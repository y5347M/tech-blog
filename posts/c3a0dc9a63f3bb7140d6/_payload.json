[{"data":1,"prerenderedAt":43},["ShallowReactive",2],{"useQiitaArticleDetailFetcher-c3a0dc9a63f3bb7140d6":3,"useQiitaAuthorizedUser":40},{"rendered_body":4,"body":5,"coediting":6,"comments_count":7,"created_at":8,"group":9,"id":10,"likes_count":11,"private":6,"reactions_count":7,"stocks_count":11,"tags":12,"title":25,"updated_at":26,"url":27,"user":28,"page_views_count":39,"team_membership":9,"organization_url_name":9,"slide":6},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:72\">今回はこちらの記事を参考にさせていただきました！\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:56\">\u003Ciframe id=\"qiita-embed-content__89d5af2039b597287987bd2b2a73b44e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__89d5af2039b597287987bd2b2a73b44e\" data-content=\"https%3A%2F%2Fzenn.dev%2Fflutteruniv_dev%2Farticles%2Fefae4bf6d457e1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:157\">上記記事ではChatGPTを使用しているのですが、同じAPIを使うのではなく、画像生成APIを使って画像を生成してみます。\u003C/p>\n\u003Ch1 data-sourcepos=\"9:1-9:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"10:1-14:0\">\n\u003Cli data-sourcepos=\"10:1-10:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:43\">Android Studio Dolphin | 2021.3.1 Patch 1\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:24\">flutter: 3.6.0-0.1.pre\u003C/li>\n\u003Cli data-sourcepos=\"13:1-14:0\">Dart: 2.19.0\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"15:1-15:38\">\n\u003Cspan id=\"openaiの画像生成apiについて\" class=\"fragment\">\u003C/span>\u003Ca href=\"#openai%E3%81%AE%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90api%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>OpenAIの画像生成APIについて\u003C/h1>\n\u003Cp data-sourcepos=\"17:1-17:46\">\u003Ciframe id=\"qiita-embed-content__ad0bacde991b54fe5c8f385021073f9a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ad0bacde991b54fe5c8f385021073f9a\" data-content=\"https%3A%2F%2Fplatform.openai.com%2Fdocs%2Fguides%2Fimages\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"19:1-20:108\">リクエストの仕方によっていくつか使用方法があります。\u003Cbr>\n今回は文字列を送信して、それを元に生成した画像のURLを返却してもらいます。\u003C/p>\n\u003Cp data-sourcepos=\"22:1-22:109\">以下はリンク先のマニュアルに記載されている、curlでリクエストする方法です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"Generate an image\" data-sourcepos=\"23:1-32:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>curl https://api.openai.com/v1/images/generations \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"34:1-34:57\">$OPENAI_API_KEYが必要となるため取得します。\u003C/p>\n\u003Col data-sourcepos=\"36:1-44:0\">\n\u003Cli data-sourcepos=\"36:1-38:0\">\n\u003Cp data-sourcepos=\"36:4-37:143\">まず\u003Ca href=\"https://auth0.openai.com/u/login/identifier?state=hKFo2SByZ1JLZVg1dE1yOWo5VlFNcHBzbkJfT3JqU2w5eGFhS6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIDBRN0Q2QThVVVFJVUs5Vmpwdm1HRmlNbkFpN3FUWnlzo2NpZNkgRFJpdnNubTJNdTQyVDNLT3BxZHR3QjNOWXZpSFl6d0Q\" rel=\"nofollow noopener\" target=\"_blank\">こちら\u003C/a>から会員登録してください。メールアドレスの他に、GoogleアカウントまたはMicrosoftアカウントが使用できます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F944c5737-90c4-dc77-c070-c0bb3c890bb0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b3b2d2ae9712b482a6e0437456098fa5\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F944c5737-90c4-dc77-c070-c0bb3c890bb0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b3b2d2ae9712b482a6e0437456098fa5\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F944c5737-90c4-dc77-c070-c0bb3c890bb0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e634d0e984bf9a5c565ed4d117f7efdd 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/944c5737-90c4-dc77-c070-c0bb3c890bb0.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli data-sourcepos=\"39:1-41:0\">\n\u003Cp data-sourcepos=\"39:4-40:143\">右上のアイコンを押してView API Keysメニューを開きます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F267de751-7065-197e-a334-0eb0c5ecc5d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f8068229a4049d06bc69a1f233abb2e1\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F267de751-7065-197e-a334-0eb0c5ecc5d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f8068229a4049d06bc69a1f233abb2e1\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F267de751-7065-197e-a334-0eb0c5ecc5d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f9aaafe1e2870e5632cf5690aaf69c20 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/267de751-7065-197e-a334-0eb0c5ecc5d1.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli data-sourcepos=\"42:1-44:0\">\n\u003Cp data-sourcepos=\"42:4-43:143\">Create New Secretボタンを押せばAPIキーを生成することができます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e80d99aaeacce02f9e66f7eacfa99fe\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e80d99aaeacce02f9e66f7eacfa99fe\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4d75d1f88005b5bca7135d45461793c9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp data-sourcepos=\"45:1-46:139\">ちなみに\u003Ca href=\"https://platform.openai.com/account/usage\" rel=\"nofollow noopener\" target=\"_blank\">Usageページ\u003C/a>を見ると無料でAPIを使用できる期間等を見ることができます。使いすぎないようにご注意ください。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc1dfadb7-61c5-fbd4-f617-33a8c98f297c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29efa1c9b893891bac1c9179b1650f18\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc1dfadb7-61c5-fbd4-f617-33a8c98f297c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29efa1c9b893891bac1c9179b1650f18\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc1dfadb7-61c5-fbd4-f617-33a8c98f297c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=594045b0f976dd0ae51dbdbc35cdcfb2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c1dfadb7-61c5-fbd4-f617-33a8c98f297c.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"49:1-49:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch3 data-sourcepos=\"51:1-51:38\">\n\u003Cspan id=\"flutterプロジェクトを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#flutter%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Flutterプロジェクトを作成\u003C/h3>\n\u003Cp data-sourcepos=\"52:1-52:66\">まずは適当にプロジェクトを作成してください。\u003C/p>\n\u003Ch3 data-sourcepos=\"54:1-54:39\">\n\u003Cspan id=\"pubspecymlにdependenciesを追加\" class=\"fragment\">\u003C/span>\u003Ca href=\"#pubspecyml%E3%81%ABdependencies%E3%82%92%E8%BF%BD%E5%8A%A0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>pubspec.ymlにdependenciesを追加\u003C/h3>\n\u003Cp data-sourcepos=\"55:1-55:103\">今回はdioというパッケージを使用します。HTTP通信を行うために利用します。\u003C/p>\n\u003Cp data-sourcepos=\"57:1-57:28\">\u003Ciframe id=\"qiita-embed-content__2f6cbf0c66c4ddd4becbf8b2c11b6900\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2f6cbf0c66c4ddd4becbf8b2c11b6900\" data-content=\"https%3A%2F%2Fpub.dev%2Fpackages%2Fdio\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"59:1-69:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">pubspec.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nl\">dependencies:\u003C/span>\n  \u003Cspan class=\"nl\">flutter:\u003C/span>\n    \u003Cspan class=\"nl\">sdk:\u003C/span> \u003Cspan class=\"n\">flutter\u003C/span>\n\n\n  \u003Cspan class=\"ss\">#\u003C/span> \u003Cspan class=\"n\">The\u003C/span> \u003Cspan class=\"n\">following\u003C/span> \u003Cspan class=\"n\">adds\u003C/span> \u003Cspan class=\"n\">the\u003C/span> \u003Cspan class=\"n\">Cupertino\u003C/span> \u003Cspan class=\"n\">Icons\u003C/span> \u003Cspan class=\"n\">font\u003C/span> \u003Cspan class=\"n\">to\u003C/span> \u003Cspan class=\"n\">your\u003C/span> \u003Cspan class=\"n\">application\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"ss\">#\u003C/span> \u003Cspan class=\"n\">Use\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">the\u003C/span> \u003Cspan class=\"n\">CupertinoIcons\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">for\u003C/span> \u003Cspan class=\"n\">iOS\u003C/span> \u003Cspan class=\"n\">style\u003C/span> \u003Cspan class=\"n\">icons\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"nl\">cupertino_icons:\u003C/span> \u003Cspan class=\"o\">^\u003C/span>\u003Cspan class=\"mf\">1.0\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"mi\">2\u003C/span>\n  \u003Cspan class=\"nl\">dio:\u003C/span> \u003Cspan class=\"o\">^\u003C/span>\u003Cspan class=\"mf\">4.0\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"mi\">6\u003C/span> \u003Cspan class=\"ss\">#\u003C/span> \u003Cspan class=\"err\">この行を追加\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"71:1-71:189\">IDEによっては自動でダウンロードしてくれますが、そうでない場合はプロジェクトのルートディレクトリ配下でコマンドを叩いてください。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"73:1-75:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">console\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">flutter pub get\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch3 data-sourcepos=\"77:1-77:25\">\n\u003Cspan id=\"ファイルを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ファイルを作成\u003C/h3>\n\u003Cp data-sourcepos=\"79:1-79:96\">アプリのメインロジック。ただ画像生成ページを呼んでいるだけです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"80:1-103:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">main.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:open_api/open_api/image_generation_api_page.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">MyApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">MyApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatelessWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">MyApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"c1\">// This widget is the root of your application.\u003C/span>\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">MaterialApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">title:\u003C/span> \u003Cspan class=\"s\">'Flutter Demo'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"nl\">theme:\u003C/span> \u003Cspan class=\"n\">ThemeData\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">primarySwatch:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">blue\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"nl\">home:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">ImageGenerationAPIPage\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"105:1-106:81\">画像生成ページです。\u003Cbr>\nボタンは送信ボタンのようなアイコンを使用してみました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"107:1-178:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">image_generation_api_page.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:dio/dio.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">ImageGenerationAPIPage\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">ImageGenerationAPIPage\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"n\">Key\u003C/span>\u003Cspan class=\"o\">?\u003C/span> \u003Cspan class=\"n\">key\u003C/span>\u003Cspan class=\"p\">})\u003C/span> \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">key:\u003C/span> \u003Cspan class=\"n\">key\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">_ImageGenerationAPIPageState\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_ImageGenerationAPIPageState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_ImageGenerationAPIPageState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">ImageGenerationAPIPage\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">imageUrl\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s\">''\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">textForGenerationImageController\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">TextEditingController\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Scaffold\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">appBar:\u003C/span> \u003Cspan class=\"n\">AppBar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">title:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Text\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'Image Generation'\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"nl\">body:\u003C/span> \u003Cspan class=\"n\">Column\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">children:\u003C/span> \u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">Widget\u003C/span>\u003Cspan class=\"p\">&gt;[\u003C/span>\n          \u003Cspan class=\"n\">Expanded\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Image\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">network\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">imageUrl\u003C/span>\u003Cspan class=\"p\">)),\u003C/span>\n          \u003Cspan class=\"n\">TextField\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">autofocus:\u003C/span> \u003Cspan class=\"kc\">true\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">style:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">TextStyle\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n              \u003Cspan class=\"nl\">fontSize:\u003C/span> \u003Cspan class=\"mf\">20.0\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n              \u003Cspan class=\"nl\">color:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">black\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"p\">),\u003C/span>\n            \u003Cspan class=\"nl\">controller:\u003C/span> \u003Cspan class=\"n\">textForGenerationImageController\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">decoration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">InputDecoration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n              \u003Cspan class=\"nl\">border:\u003C/span> \u003Cspan class=\"n\">InputBorder\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">none\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n              \u003Cspan class=\"nl\">hintText:\u003C/span> \u003Cspan class=\"s\">'Type text to generate image!'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"n\">IconButton\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">onPressed:\u003C/span> \u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"kd\">async\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n            \u003Cspan class=\"kt\">String\u003C/span> \u003Cspan class=\"n\">url\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"k\">await\u003C/span> \u003Cspan class=\"n\">generateImageFromText\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">textForGenerationImageController\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">text\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n            \u003Cspan class=\"n\">setState\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n              \u003Cspan class=\"n\">imageUrl\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">url\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n            \u003Cspan class=\"p\">});\u003C/span>\n          \u003Cspan class=\"p\">},\u003C/span> \u003Cspan class=\"nl\">icon:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Icon\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">Icons\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">send\u003C/span>\u003Cspan class=\"p\">)),\u003C/span>\n        \u003Cspan class=\"p\">],\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"n\">Future\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">String\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">generateImageFromText\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kt\">String\u003C/span> \u003Cspan class=\"n\">text\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"kd\">async\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kt\">String\u003C/span> \u003Cspan class=\"n\">apiKey\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s\">'XXXXXXXXXXXXXXXXXXXX'\u003C/span>\u003Cspan class=\"p\">;\u003C/span> \u003Cspan class=\"c1\">// ここをAPIキーに差し替え\u003C/span>\n    \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">dio\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Dio\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">dio\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">options\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">headers\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"s\">'Content-Type'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"s\">'application/json'\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">'Authorization'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"s\">'Bearer \u003C/span>\u003Cspan class=\"si\">$apiKey\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"p\">};\u003C/span>\n\n    \u003Cspan class=\"k\">try\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n      \u003Cspan class=\"n\">Response\u003C/span> \u003Cspan class=\"n\">response\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"k\">await\u003C/span> \u003Cspan class=\"n\">dio\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">post\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"s\">'https://api.openai.com/v1/images/generations'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">data:\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"s\">'prompt'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"n\">text\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n          \u003Cspan class=\"s\">'n'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n          \u003Cspan class=\"s\">'size'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"s\">'1024x1024'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"p\">},\u003C/span>\n      \u003Cspan class=\"p\">);\u003C/span>\n      \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">generatedImageUrl\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">response\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">data\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">'data'\u003C/span>\u003Cspan class=\"p\">][\u003C/span>\u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">][\u003C/span>\u003Cspan class=\"s\">'url'\u003C/span>\u003Cspan class=\"p\">];\u003C/span>\n      \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'generatedImageUrl:'\u003C/span> \u003Cspan class=\"o\">+\u003C/span> \u003Cspan class=\"n\">generatedImageUrl\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n      \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">generatedImageUrl\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">catch\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n      \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n      \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">toString\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"180:1-180:200\">レスポンスではAPIが生成した画像へのURLが返却されます。それをsetStateメソッドでStateful Widgetのメンバ変数にセットすることで、画像を表示します。\u003C/p>\n\u003Cp data-sourcepos=\"182:1-183:139\">最初は画像へのURLがないのでエラーになっています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9d509b05379f921bdfc870c6dba439b0\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9d509b05379f921bdfc870c6dba439b0\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f6bccf2c21fba4386026736a26f04be3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"185:1-186:51\">「a white cat」と入力して送信ボタンを押します。\u003Cbr>\nしばらくすると画像が表示されます。\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F29a21da7-2bf9-90f1-e159-1ea1ea914738.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6f7920e8aa27991f01cccec374415494\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F29a21da7-2bf9-90f1-e159-1ea1ea914738.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6f7920e8aa27991f01cccec374415494\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F29a21da7-2bf9-90f1-e159-1ea1ea914738.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=60dc63127d2fb5fbdf168d3c6c6c7d82 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/29a21da7-2bf9-90f1-e159-1ea1ea914738.png\" loading=\"lazy\">\u003C/a>\n\u003Cp data-sourcepos=\"190:1-190:51\">もう一回押すと違う猫ちゃんが…！！\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc9ac2024-f561-befc-504d-82ea44d44850.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5e3dce3f6b8c7a3e7509c7fd4ac1667\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc9ac2024-f561-befc-504d-82ea44d44850.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5e3dce3f6b8c7a3e7509c7fd4ac1667\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc9ac2024-f561-befc-504d-82ea44d44850.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9382af53dc82fa27090dcf8d471a6438 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c9ac2024-f561-befc-504d-82ea44d44850.png\" loading=\"lazy\">\u003C/a>\n\u003Ch1 data-sourcepos=\"194:1-194:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"195:1-198:139\">利用すること自体は他の一般的なAPIとあまり変わりはないようです。\u003Cbr>\nただ生成できるものがすごいので、色々なサービスに組み込んだり、アイディア出しにも使ったりできそうです。\u003Cbr>\n例えばCMでお馴染みの（古い？）「蛍のいる渋谷」を見てみましょう。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F871e6474-139f-f93e-4f29-57a34f648c64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b94f0083cfafc9d67dcd0e8963df4b46\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F871e6474-139f-f93e-4f29-57a34f648c64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b94f0083cfafc9d67dcd0e8963df4b46\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F871e6474-139f-f93e-4f29-57a34f648c64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c92119a682d9a3901c9487a5b235b20f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/871e6474-139f-f93e-4f29-57a34f648c64.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"200:1-200:60\">人と蛍が共存している感じがありますね…！\u003C/p>\n","# 前提\n今回はこちらの記事を参考にさせていただきました！\n\nhttps://zenn.dev/flutteruniv_dev/articles/efae4bf6d457e1\n\n上記記事ではChatGPTを使用しているのですが、同じAPIを使うのではなく、画像生成APIを使って画像を生成してみます。\n\n\n# 環境\n- macOS: 12.6\n- Android Studio Dolphin | 2021.3.1 Patch 1\n- flutter: 3.6.0-0.1.pre\n- Dart: 2.19.0\n\n# OpenAIの画像生成APIについて\n\nhttps://platform.openai.com/docs/guides/images\n\nリクエストの仕方によっていくつか使用方法があります。\n今回は文字列を送信して、それを元に生成した画像のURLを返却してもらいます。\n\n以下はリンク先のマニュアルに記載されている、curlでリクエストする方法です。\n```Generate an image\ncurl https://api.openai.com/v1/images/generations \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n```\n\n$OPENAI_API_KEYが必要となるため取得します。\n\n1. まず[こちら](https://auth0.openai.com/u/login/identifier?state=hKFo2SByZ1JLZVg1dE1yOWo5VlFNcHBzbkJfT3JqU2w5eGFhS6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIDBRN0Q2QThVVVFJVUs5Vmpwdm1HRmlNbkFpN3FUWnlzo2NpZNkgRFJpdnNubTJNdTQyVDNLT3BxZHR3QjNOWXZpSFl6d0Q)から会員登録してください。メールアドレスの他に、GoogleアカウントまたはMicrosoftアカウントが使用できます。\n    \u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/944c5737-90c4-dc77-c070-c0bb3c890bb0.png\">\n\n2. 右上のアイコンを押してView API Keysメニューを開きます。\n    \u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/267de751-7065-197e-a334-0eb0c5ecc5d1.png\">\n\n3. Create New Secretボタンを押せばAPIキーを生成することができます。\n    \u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png\">\n\nちなみに[Usageページ](https://platform.openai.com/account/usage)を見ると無料でAPIを使用できる期間等を見ることができます。使いすぎないようにご注意ください。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c1dfadb7-61c5-fbd4-f617-33a8c98f297c.png\">\n\n\n# 手順\n\n### Flutterプロジェクトを作成\nまずは適当にプロジェクトを作成してください。\n\n### pubspec.ymlにdependenciesを追加\n今回はdioというパッケージを使用します。HTTP通信を行うために利用します。\n\nhttps://pub.dev/packages/dio\n\n```dart:pubspec.yml\ndependencies:\n  flutter:\n    sdk: flutter\n\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.2\n  dio: ^4.0.6 # この行を追加\n```\n\nIDEによっては自動でダウンロードしてくれますが、そうでない場合はプロジェクトのルートディレクトリ配下でコマンドを叩いてください。\n\n```console:console\nflutter pub get\n```\n\n### ファイルを作成\n\nアプリのメインロジック。ただ画像生成ページを呼んでいるだけです。\n```dart:main.dart\nimport 'package:flutter/material.dart';\nimport 'package:open_api/open_api/image_generation_api_page.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const ImageGenerationAPIPage(),\n    );\n  }\n}\n```\n\n画像生成ページです。\nボタンは送信ボタンのようなアイコンを使用してみました。\n```dart:image_generation_api_page.dart\nimport 'package:dio/dio.dart';\nimport 'package:flutter/material.dart';\n\nclass ImageGenerationAPIPage extends StatefulWidget {\n  const ImageGenerationAPIPage({Key? key}) : super(key: key);\n\n  @override\n  _ImageGenerationAPIPageState createState() => _ImageGenerationAPIPageState();\n}\n\nclass _ImageGenerationAPIPageState extends State\u003CImageGenerationAPIPage> {\n  var imageUrl = '';\n  var textForGenerationImageController = TextEditingController();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Image Generation'),\n      ),\n      body: Column(\n        children: \u003CWidget>[\n          Expanded(\n            child: Image.network(imageUrl)),\n          TextField(\n            autofocus: true,\n            style: const TextStyle(\n              fontSize: 20.0,\n              color: Colors.black,\n            ),\n            controller: textForGenerationImageController,\n            decoration: const InputDecoration(\n              border: InputBorder.none,\n              hintText: 'Type text to generate image!',\n            ),\n          ),\n          IconButton(onPressed: () async {\n            String url = await generateImageFromText(textForGenerationImageController.text);\n            setState(() {\n              imageUrl = url;\n            });\n          }, icon: const Icon(Icons.send)),\n        ],\n      ),\n    );\n  }\n\n  Future\u003CString> generateImageFromText(String text) async {\n    String apiKey = 'XXXXXXXXXXXXXXXXXXXX'; // ここをAPIキーに差し替え\n    var dio = Dio();\n    dio.options.headers = {'Content-Type': 'application/json', 'Authorization': 'Bearer $apiKey'};\n\n    try {\n      Response response = await dio.post(\n        'https://api.openai.com/v1/images/generations',\n        data: {\n          'prompt': text,\n          'n': 1,\n          'size': '1024x1024',\n        },\n      );\n      var generatedImageUrl = response.data['data'][0]['url'];\n      print('generatedImageUrl:' + generatedImageUrl);\n      return generatedImageUrl;\n    } catch (e) {\n      print(e);\n      return e.toString();\n    }\n  }\n}\n```\n\nレスポンスではAPIが生成した画像へのURLが返却されます。それをsetStateメソッドでStateful Widgetのメンバ変数にセットすることで、画像を表示します。\n\n最初は画像へのURLがないのでエラーになっています。\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png\">\n\n「a white cat」と入力して送信ボタンを押します。\nしばらくすると画像が表示されます。\n\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/29a21da7-2bf9-90f1-e159-1ea1ea914738.png\">\n\nもう一回押すと違う猫ちゃんが…！！\n\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c9ac2024-f561-befc-504d-82ea44d44850.png\">\n\n# さいごに\n利用すること自体は他の一般的なAPIとあまり変わりはないようです。\nただ生成できるものがすごいので、色々なサービスに組み込んだり、アイディア出しにも使ったりできそうです。\n例えばCMでお馴染みの（古い？）「蛍のいる渋谷」を見てみましょう。\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/871e6474-139f-f93e-4f29-57a34f648c64.png\">\n\n人と蛍が共存している感じがありますね…！\n",false,0,"2023-02-10T00:48:09+09:00",null,"c3a0dc9a63f3bb7140d6",2,[13,16,19,22],{"name":14,"versions":15},"Dart",[],{"name":17,"versions":18},"AI",[],{"name":20,"versions":21},"Flutter",[],{"name":23,"versions":24},"OpenAI",[],"OpenAIの画像生成APIをFlutterから呼んで画像を生成してみる","2023-02-10T01:10:57+09:00","https://qiita.com/y5347M/items/c3a0dc9a63f3bb7140d6",{"description":29,"facebook_id":30,"followees_count":31,"followers_count":32,"github_login_name":33,"id":33,"items_count":34,"linkedin_id":30,"location":30,"name":33,"organization":30,"permanent_id":35,"profile_image_url":36,"team_only":6,"twitter_screen_name":37,"website_url":38},"バックエンドエンジニアをしています。","",5,1,"y5347M",18,2433961,"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2433961/a4773675e7566e225738c8c15f9fda53e35bd799/large.png?1741427719","mmmm16089306","https://twitter.com/mmmm16089306",2190,{"description":29,"facebook_id":30,"followees_count":31,"followers_count":32,"github_login_name":33,"id":33,"items_count":34,"linkedin_id":30,"location":30,"name":33,"organization":30,"permanent_id":35,"profile_image_url":36,"team_only":6,"twitter_screen_name":37,"website_url":38,"image_monthly_upload_limit":41,"image_monthly_upload_remaining":42},104857600,101432560,1745893162239]