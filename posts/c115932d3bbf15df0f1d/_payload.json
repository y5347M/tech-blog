[{"data":1,"prerenderedAt":35},["ShallowReactive",2],{"useQiitaArticleDetailFetcher-c115932d3bbf15df0f1d":3,"useQiitaAuthorizedUser":32},{"rendered_body":4,"body":5,"coediting":6,"comments_count":7,"created_at":8,"group":9,"id":10,"likes_count":11,"private":6,"reactions_count":7,"stocks_count":12,"tags":13,"title":17,"updated_at":18,"url":19,"user":20,"page_views_count":31,"team_membership":9,"organization_url_name":9,"slide":6},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:217\">Flutterが気になっていて学習していますが、なかなかアニメーションについて理解できない、できてもすぐ忘れてしまいます。そのため備忘録として記載します。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:97\">今回学習したのはFlutter公式サイトにあるAnimationのチュートリアルです。\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:59\">\u003Ciframe id=\"qiita-embed-content__25650066981108ac8e5e42ab81b2ac6e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__25650066981108ac8e5e42ab81b2ac6e\" data-content=\"https%3A%2F%2Fdocs.flutter.dev%2Fdevelopment%2Fui%2Fanimations%2Ftutorial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"9:1-9:42\">コードサンプルはこちらです。\u003C/p>\n\u003Cp data-sourcepos=\"11:1-11:45\">\u003Ciframe id=\"qiita-embed-content__2da53adcabd3204d6ee11614b30052ee\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2da53adcabd3204d6ee11614b30052ee\" data-content=\"https%3A%2F%2Fgithub.com%2Fy5347M%2Fanimations_tutorial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"13:1-13:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"14:1-18:0\">\n\u003Cli data-sourcepos=\"14:1-14:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"15:1-15:42\">Android Studio Dolphin: 2021.3.1 Patch 1\u003C/li>\n\u003Cli data-sourcepos=\"16:1-16:24\">flutter: 3.6.0-0.1.pre\u003C/li>\n\u003Cli data-sourcepos=\"17:1-18:0\">Dart: 2.19.0\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"19:1-19:23\">\n\u003Cspan id=\"各クラスの概要\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%90%84%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E6%A6%82%E8%A6%81\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>各クラスの概要\u003C/h1>\n\u003Ch2 data-sourcepos=\"21:1-21:20\">\n\u003Cspan id=\"animation\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animation\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Animation\u003C/h2>\n\u003Cp data-sourcepos=\"22:1-23:286\">Animationオブジェクトは画面上になにが描画されているかは把握しません。抽象クラスで、現在の値とその状態を保持しています。\u003Cbr>\nAnimtaionオブジェクトは2つの値にある数値を一定の期間に渡って生成します。生成の仕方は線形、曲線、ステップ関数など自由に選択できます。制御の仕方によっては逆回転させたり、方向転換させたりできます。\u003C/p>\n\u003Cp data-sourcepos=\"25:1-25:174\">\u003Ccode>Animation&lt;double&gt;\u003C/code>が一般的な使用方法ですが、\u003Ccode>Animation&lt;Color&gt;\u003C/code>や\u003Ccode>Animation&lt;Size&gt;\u003C/code>のように、数値以外の型の間も補完することができます。\u003C/p>\n\u003Ch2 data-sourcepos=\"27:1-27:18\">\n\u003Cspan id=\"curvedanimation\" class=\"fragment\">\u003C/span>\u003Ca href=\"#curvedanimation\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>CurvedAnimation\u003C/h2>\n\u003Cp data-sourcepos=\"28:1-29:177\">CurvedAnimationオブジェクトはAnimationを継承するクラスです。\u003Cbr>\nAnimationオブジェクトが一定の間隔で数値を生成し続けるのに対し、CurvedAnimationは指定した非線形のカーブを描くように生成します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"31:1-33:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">CurvedAnimationを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">easeIn\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"35:1-36:63\">以下のサイトに各カーブがどのような曲線を描きながら数値が遷移するか説明されています。\u003Cbr>\n視覚的に見ることができるのでおすすめです。\u003C/p>\n\u003Cp data-sourcepos=\"38:1-38:59\">\u003Ciframe id=\"qiita-embed-content__eed381e3efadc8ccb45c9cc22558863e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__eed381e3efadc8ccb45c9cc22558863e\" data-content=\"https%3A%2F%2Fapi.flutter.dev%2Fflutter%2Fanimation%2FCurves-class.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"40:1-41:194\">自分で曲線の動きを作成することもできます。\u003Cbr>\nCurveクラスを継承したクラスを作成し、transformメソッドに動きを記載します。このインスタンスをCurvedAnimationを生成するときに引数に渡します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"42:1-50:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ShakeCurve.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">ShakeCurve\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">Curve\u003C/span> \u003Cspan class=\"p\">{\u003C/span>                \n                                                \n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">ShakeCurve\u003C/span>\u003Cspan class=\"p\">();\u003C/span>                           \n                                                \n  \u003Cspan class=\"nd\">@override\u003C/span>                                     \n  \u003Cspan class=\"kt\">double\u003C/span> \u003Cspan class=\"n\">transform\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kt\">double\u003C/span> \u003Cspan class=\"n\">t\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">sin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">t\u003C/span> \u003Cspan class=\"o\">*\u003C/span> \u003Cspan class=\"n\">pi\u003C/span> \u003Cspan class=\"o\">*\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>                                               \n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"52:1-52:24\">\n\u003Cspan id=\"animationcontroller\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animationcontroller\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Animation­Controller\u003C/h2>\n\u003Cp data-sourcepos=\"53:1-54:178\">Animation­ControllerはAnimationを継承したクラスです。\u003Cbr>\nハードウェアが新しいフレームの準備が整ったときに新しい値を生成します。デフォルトでは0.0~1.0までの数値を線形に生成します。\u003C/p>\n\u003Cp data-sourcepos=\"56:1-56:149\">以下のコードは、（私の理解では）2秒間かけて0.0~1.0までの値を生成するAnimation­Controllerを生成する方法です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"57:1-60:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">AnimationControllerを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n    \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"62:1-63:172\">Animation­ControllerはAnimationを継承したクラスなので、Animationオブジェクトが必要な場所ではどこでも使用することができます。\u003Cbr>\nAnimationControllerは動きを制御するためのメソッドが存在します。例えば\u003Ccode>.forward()\u003C/code>メソッドはアニメーションの動きを開始します。\u003C/p>\n\u003Cp data-sourcepos=\"65:1-65:345\">Animation­Controllerを作成する際にvsyncという引数を渡します。これのおかげで不必要なリソースを消費することを防ぎます。渡すクラスの定義に\u003Ccode>SingleTickerProviderStateMixin\u003C/code>を追加することでステートフルオブジェクトをTickerProviderとして使用することができます。\u003C/p>\n\u003Cp data-sourcepos=\"67:1-67:132\">正直この部分に関してチュートリアルでは理解ができなかったので以下のサイトを参照しました。\u003C/p>\n\u003Cp data-sourcepos=\"69:1-69:62\">\u003Ciframe id=\"qiita-embed-content__c57acdbceca09a9b46570189be6256de\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c57acdbceca09a9b46570189be6256de\" data-content=\"https%3A%2F%2Fitome.team%2Fblog%2F2019%2F12%2Fflutter-advent-calendar-day15%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"71:1-72:170\">ステートフルオブジェクトに\u003Ccode>with SingleTickerProviderStateMixin\u003C/code>をつけることでそのクラス自体が\u003Ccode>TickerProvider\u003C/code>となります。\u003Ccode>Ticker\u003C/code>はフレーム更新の管理を担ってくれるクラスです。\u003Cbr>\nAnimationControllerが一つの場合は単一のTickerを提供する\u003Ccode>SingleTickerProviderStateMixin\u003C/code>、複数の場合は\u003Ccode>TickerProviderStateMixin\u003C/code>を使用します。\u003C/p>\n\u003Ch2 data-sourcepos=\"74:1-74:8\">\n\u003Cspan id=\"tween\" class=\"fragment\">\u003C/span>\u003Ca href=\"#tween\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Tween\u003C/h2>\n\u003Cp data-sourcepos=\"76:1-77:61\">AnimationControllerが生成する数値のデフォルトは0.0~1.0となっていますが、それを変更したい場合にTweenクラスを使用します。\u003Cbr>\n以下の例では-200.0~0.0まで数値が変化します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"79:1-81:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Tweenを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">tween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"o\">-\u003C/span>\u003Cspan class=\"mi\">200\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"83:1-83:84\">Animationと同様、数値以外にもColorやSizeを渡すことができます。\u003C/p>\n\u003Cp data-sourcepos=\"85:1-85:242\">Tweenオブジェクトはステートレスなので状態を保存しません。その代わり、\u003Ccode>evaluate(Animation&lt;double&gt; animation)\u003C/code>メソッドを提供し、アニメーションの現在の値を受け取ることができます。\u003C/p>\n\u003Cp data-sourcepos=\"87:1-87:89\">TweenオブジェクトからAnimationを生成するには以下のようにします。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"88:1-92:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">TweenオブジェクトからAnimationを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n    \u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">milliseconds:\u003C/span> \u003Cspan class=\"mi\">500\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">int\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">alpha\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">IntTween\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">255\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"94:1-94:75\">CurvedAnimationを利用したい場合には以下のようにします。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"95:1-101:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">TweenオブジェクトからAnimationを生成する一例（CurvedAnimationを使用）\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n    \u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">milliseconds:\u003C/span> \u003Cspan class=\"mi\">500\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">curve\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n    \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">easeOut\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">int\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">alpha\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">IntTween\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">255\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">curve\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"103:1-103:33\">\n\u003Cspan id=\"アニメーションの通知\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E9%80%9A%E7%9F%A5\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アニメーションの通知\u003C/h2>\n\u003Cp data-sourcepos=\"104:1-106:137\">Animationオブジェクトは\u003Ccode>addListener()\u003C/code>メソッドと\u003Ccode>addStatusListener()\u003C/code>メソッドで定義されたListenerとStatusListenerを持つことができます。\u003Cbr>\nListenerは値が変化するたびに呼び出されます。値が変化するたびに画面表示を変えたい場合、setState()を使用します。\u003Cbr>\nStatusListenerはアニメーションの状態が開始・終了・進行・戻るなど、変化した場合に呼び出されます。\u003C/p>\n\u003Ch1 data-sourcepos=\"109:1-109:38\">\n\u003Cspan id=\"アニメーションのサンプル\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アニメーションのサンプル\u003C/h1>\n\u003Cp data-sourcepos=\"110:1-110:87\">以上の概要を踏まえてアニメーションのサンプルを作成します。\u003C/p>\n\u003Ch2 data-sourcepos=\"112:1-112:33\">\n\u003Cspan id=\"まずはただのロゴ表示\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%81%9F%E3%81%A0%E3%81%AE%E3%83%AD%E3%82%B4%E8%A1%A8%E7%A4%BA\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>まずはただのロゴ表示\u003C/h2>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"114:1-139:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate0\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"141:1-141:55\">何も動かないFlutterロゴが表示されます。\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fffbd868a-5754-f5b6-bda4-c836514a26af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=84bb7df1fada7bfef40d762ddcbec74a\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fffbd868a-5754-f5b6-bda4-c836514a26af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=84bb7df1fada7bfef40d762ddcbec74a\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fffbd868a-5754-f5b6-bda4-c836514a26af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3858f08682068a1bd906db6fb7809c30 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/ffbd868a-5754-f5b6-bda4-c836514a26af.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"145:1-145:37\">\n\u003Cspan id=\"animationcontrollerを使用する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animationcontroller%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>AnimationControllerを使用する\u003C/h2>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"147:1-195:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate1\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addListener\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"n\">setState\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"c1\">// The state that has changed here is the animation object’s value.\u003C/span>\n        \u003Cspan class=\"p\">});\u003C/span>\n      \u003Cspan class=\"p\">});\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"197:1-197:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"198:1-207:0\">\n\u003Cli data-sourcepos=\"198:1-198:71\">Stateクラスに\u003Ccode>with SingleTickerProviderStateMixin\u003C/code>をつける。\u003C/li>\n\u003Cli data-sourcepos=\"199:1-199:80\">Stateクラスに\u003Ccode>Animation&lt;double&gt;\u003C/code>と\u003Ccode>AnimationController\u003C/code>を保持する。\u003C/li>\n\u003Cli data-sourcepos=\"200:1-200:158\">Stateクラスに\u003Ccode>initState()\u003C/code>メソッドを実装する。ステートフルウィジェットクラスが生成されたときに最初に動作する。\u003C/li>\n\u003Cli data-sourcepos=\"201:1-205:82\">\n\u003Ccode>initState()\u003C/code>メソッドでは\n\u003Cul data-sourcepos=\"202:5-205:82\">\n\u003Cli data-sourcepos=\"202:5-202:61\">AnimationControllerのインスタンス生成する。\u003C/li>\n\u003Cli data-sourcepos=\"203:5-203:78\">Tweenと作成したAnimationControllerからanimationを生成する。\u003C/li>\n\u003Cli data-sourcepos=\"204:5-204:139\">animationの\u003Ccode>addListner()\u003C/code>メソッドに\u003Ccode>setState()\u003C/code>メソッドを渡す-&gt;値の変更があるたびに画面に反映される。\u003C/li>\n\u003Cli data-sourcepos=\"205:5-205:82\">\n\u003Ccode>controller.forward()\u003C/code>メソッドでアニメーションを開始する。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli data-sourcepos=\"206:1-207:0\">\n\u003Ccode>dispose()\u003C/code>メソッドを記載する。アニメーションは大量のリソースを消費するので、ウィジェットが終了したときにメモリリークが起きないように処理する。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"208:1-208:159\">AnimationControllerクラスはAnimationを継承しているのでAnimationCotrollerだけで動くのでは？と思いましたがダメでした。\u003C/p>\n\u003Cp data-sourcepos=\"210:1-211:125\">実行すると以下のようになります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F74dea46e-8e56-fe76-290c-4c3e748a1246.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a545b8ddbc9f8ddfee83e1cb09aff628\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F74dea46e-8e56-fe76-290c-4c3e748a1246.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a545b8ddbc9f8ddfee83e1cb09aff628\" alt=\"animate1.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F74dea46e-8e56-fe76-290c-4c3e748a1246.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=aab3d5df2b24109de8ab5ce0c0a2a935 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/74dea46e-8e56-fe76-290c-4c3e748a1246.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"213:1-213:49\">\n\u003Cspan id=\"animatedwidgetを使用して簡略化する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animatedwidget%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E7%B0%A1%E7%95%A5%E5%8C%96%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Animated­Widgetを使用して簡略化する\u003C/h2>\n\u003Cp data-sourcepos=\"214:1-215:264\">ここで概要には登場しなかったAnimated­Widgetが急に出現します。\u003Cbr>\nAnimated­Widgetは実際に表示するWidgetをStateクラスから分離することができます。わざわざ\u003Ccode>addListner()\u003C/code>メソッドを使用しないでも、Animated­Widgetにlistenしたいanimationを渡せば自動的に反映してくれます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"217:1-269:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate2\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"271:1-271:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"272:1-275:0\">\n\u003Cli data-sourcepos=\"272:1-272:198\">AnimatedWidgetを継承したAnimatedLogoクラスを作成する。buildメソッドを実装し、その中にアニメーションとして表示したいオブジェクトを記載します。\u003C/li>\n\u003Cli data-sourcepos=\"273:1-273:172\">\n\u003Ccode>addListner()\u003C/code>メソッドを使用しなくて良くなったので、Stateクラスの\u003Ccode>initState()\u003C/code>メソッドから\u003Ccode>addListener()\u003C/code>に関する処理を削除する。\u003C/li>\n\u003Cli data-sourcepos=\"274:1-275:0\">StateクラスのbuildメソッドではAnimatedLogoクラスを生成する。引数としてanimationを渡す。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"276:1-276:68\">animate1と実行するときの動きの違いはありません。\u003C/p>\n\u003Ch2 data-sourcepos=\"278:1-278:66\">\n\u003Cspan id=\"アニメーションの状態変化をモニタリングする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%8A%B6%E6%85%8B%E5%A4%89%E5%8C%96%E3%82%92%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アニメーションの状態変化をモニタリングする\u003C/h2>\n\u003Cp data-sourcepos=\"279:1-280:237\">\u003Ccode>addStatusListener()\u003C/code>メソッドを使用するとアニメーションの状態変化を受け取ることができると学習しました。\u003Cbr>\nアニメーションの値の遷移が終了するとき\u003Ccode>AnimationStatus.completed\u003C/code>にアニメーションを逆再生させ、アニメーションの値が初期値に戻った時に再度スタートさせる処理を書きます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"282:1-342:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate3\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"si\">$status\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"p\">));\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"344:1-344:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"345:1-346:0\">\n\u003Cli data-sourcepos=\"345:1-346:0\">Stateクラスのanimationの\u003Ccode>addStatusListener()\u003C/code>メソッドを記載する。listnerとしてstatusが\u003Ccode>AnimationStatus.completed：アニメーションの終了\u003C/code>になったらanimationの値の動きを逆転させ、さらにstatusが\u003Ccode>AnimationStatus.dismissed：アニメーションの開始前\u003C/code>になったらアニメーションの値を進行するという処理を渡します。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"347:1-348:125\">実行するとこのようになります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd4de28fa-848c-d1b7-37d7-b95236411017.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=83d3d9da8c3b6707cc5989f0cacf84f4\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd4de28fa-848c-d1b7-37d7-b95236411017.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=83d3d9da8c3b6707cc5989f0cacf84f4\" alt=\"animate3.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd4de28fa-848c-d1b7-37d7-b95236411017.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=09f63163bf8b882a8c9950d4582e2a7f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/d4de28fa-848c-d1b7-37d7-b95236411017.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"350:1-350:63\">\n\u003Cspan id=\"animatedbuilderを使用してリファクタリングする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animatedbuilder%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>AnimatedBuilderを使用してリファクタリングする\u003C/h2>\n\u003Cp data-sourcepos=\"351:1-352:82\">animate3では、もしStateクラスのAnimationを変更した場合、AnimatedLogoの方もコードを修正しないといけなくなるという問題があります。\u003Cbr>\nそれを解決するため、責任を3つに分離する必要があります。\u003C/p>\n\u003Cul data-sourcepos=\"353:1-356:0\">\n\u003Cli data-sourcepos=\"353:1-353:35\">ロゴをレンダリングする\u003C/li>\n\u003Cli data-sourcepos=\"354:1-354:26\">Animationを定義する\u003C/li>\n\u003Cli data-sourcepos=\"355:1-356:0\">値の遷移をレンダリングする\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"357:1-357:63\">AnimatedBuilderを使用するとこれを実現できます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"359:1-444:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate4\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoWidget\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatelessWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoWidget\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n\u003Cspan class=\"c1\">// Leave out the height and width so it fills the animating parent\u003C/span>\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">GrowTransition\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatelessWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">GrowTransition\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">child\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animation\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">AnimatedBuilder\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">builder:\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">SizedBox\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n          \u003Cspan class=\"p\">);\u003C/span>\n        \u003Cspan class=\"p\">},\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"si\">$status\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"p\">));\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">GrowTransition\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoWidget\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"446:1-446:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"447:1-450:0\">\n\u003Cli data-sourcepos=\"447:1-447:129\">LogoWidgetクラスを定義します。アニメーションとして表示したいウィジェットのみを返します。\u003C/li>\n\u003Cli data-sourcepos=\"448:1-448:279\">GrowTransitionクラスを定義します。このクラスが生成されるときにコンストラクタで表示するウィジェットとanimationを受け取ります。\u003Ccode>builder()\u003C/code>メソッド内でAnimatedBuilderを使用してアニメーションを生成します。\u003C/li>\n\u003Cli data-sourcepos=\"449:1-450:0\">Stateクラスの\u003Ccode>builder()\u003C/code>メソッド内ではGrowTransitionクラスにanimationとロゴを渡して生成します。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"451:1-451:41\">実行結果はanimate3と同じです。\u003C/p>\n\u003Ch2 data-sourcepos=\"453:1-453:39\">\n\u003Cspan id=\"同時進行のアニメーション\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%90%8C%E6%99%82%E9%80%B2%E8%A1%8C%E3%81%AE%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>同時進行のアニメーション\u003C/h2>\n\u003Cp data-sourcepos=\"454:1-454:124\">透明度とサイズのように、一度に複数のアニメーション(Tween)を生成したい場合があります。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"455:1-460:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n    \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">sizeAnimation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">opacityAnimation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mf\">0.1\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"462:1-464:276\">しかしAnimatedWidgetは1つのアニメーションしか受け取れません。そのため、上記のように2つのアニメーションをStateクラスで生成しても行き場がありません。\u003Cbr>\nそのためアニメーションはTweenから生成していないものをAnimatedWidgetの引数に渡し、渡した先でそれぞれTweenを生成するようにします。\u003Cbr>\nこのとき、\u003Ccode>animation.value\u003C/code>ではTweenから生成していない値を受け取ることになるため、Tweenのevaluateメソッドを使用します。\u003Ccode>_sizeTween.evaluate(animation)\u003C/code>のようにしてanimationの現在の値をTweenを通して受け取ります。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"466:1-532:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate5\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"c1\">// Make the Tweens static because they don't change.\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_opacityTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mf\">0.1\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Opacity\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">opacity:\u003C/span> \u003Cspan class=\"n\">_opacityTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n          \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">easeIn\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">});\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"534:1-535:125\">実行すると以下の通りとなります。animate3やanimate4とは異なり、サイズだけでなく透明度も変化しています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8f9bb0dcd3c52950d312ac6f70b0451\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8f9bb0dcd3c52950d312ac6f70b0451\" alt=\"animate5.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=83e24f8b43d676db1995dc45eac7b8a3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"537:1-537:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"538:1-538:247\">Flutterのアニメーションについて学習してきました。画面表示側の処理には詳しくありませんが、アプリを起動した際のロゴ表示や、スクロールした際の表示などに応用できそうです。\u003C/p>\n","# 前提\nFlutterが気になっていて学習していますが、なかなかアニメーションについて理解できない、できてもすぐ忘れてしまいます。そのため備忘録として記載します。\n\n今回学習したのはFlutter公式サイトにあるAnimationのチュートリアルです。\n\nhttps://docs.flutter.dev/development/ui/animations/tutorial\n\n\nコードサンプルはこちらです。\n\nhttps://github.com/y5347M/animations_tutorial\n\n# 環境\n- macOS: 12.6\n- Android Studio Dolphin: 2021.3.1 Patch 1\n- flutter: 3.6.0-0.1.pre\n- Dart: 2.19.0\n\n# 各クラスの概要\n\n## Animation\u003Cdouble>\nAnimationオブジェクトは画面上になにが描画されているかは把握しません。抽象クラスで、現在の値とその状態を保持しています。\nAnimtaionオブジェクトは2つの値にある数値を一定の期間に渡って生成します。生成の仕方は線形、曲線、ステップ関数など自由に選択できます。制御の仕方によっては逆回転させたり、方向転換させたりできます。\n\n`Animation\u003Cdouble>`が一般的な使用方法ですが、`Animation\u003CColor>`や`Animation\u003CSize>`のように、数値以外の型の間も補完することができます。\n\n## CurvedAnimation\nCurvedAnimationオブジェクトはAnimation\u003Cdouble>を継承するクラスです。\nAnimationオブジェクトが一定の間隔で数値を生成し続けるのに対し、CurvedAnimationは指定した非線形のカーブを描くように生成します。\n\n```dart:CurvedAnimationを生成する一例\nanimation = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n```\n\n以下のサイトに各カーブがどのような曲線を描きながら数値が遷移するか説明されています。\n視覚的に見ることができるのでおすすめです。\n\nhttps://api.flutter.dev/flutter/animation/Curves-class.html\n\n自分で曲線の動きを作成することもできます。\nCurveクラスを継承したクラスを作成し、transformメソッドに動きを記載します。このインスタンスをCurvedAnimationを生成するときに引数に渡します。\n```dart:ShakeCurve.dart\nclass ShakeCurve extends Curve {                \n                                                \n  const ShakeCurve();                           \n                                                \n  @override                                     \n  double transform(double t) => sin(t * pi * 2);\n}                                               \n```\n\n## Animation­Controller\nAnimation­ControllerはAnimation\u003Cdouble>を継承したクラスです。\nハードウェアが新しいフレームの準備が整ったときに新しい値を生成します。デフォルトでは0.0~1.0までの数値を線形に生成します。\n\n以下のコードは、（私の理解では）2秒間かけて0.0~1.0までの値を生成するAnimation­Controllerを生成する方法です。\n```dart:AnimationControllerを生成する一例\ncontroller =\n    AnimationController(duration: const Duration(seconds: 2), vsync: this);\n```\n\nAnimation­ControllerはAnimation\u003Cdouble>を継承したクラスなので、Animationオブジェクトが必要な場所ではどこでも使用することができます。\nAnimationControllerは動きを制御するためのメソッドが存在します。例えば`.forward()`メソッドはアニメーションの動きを開始します。\n\nAnimation­Controllerを作成する際にvsyncという引数を渡します。これのおかげで不必要なリソースを消費することを防ぎます。渡すクラスの定義に`SingleTickerProviderStateMixin`を追加することでステートフルオブジェクトをTickerProviderとして使用することができます。\n\n正直この部分に関してチュートリアルでは理解ができなかったので以下のサイトを参照しました。\n\nhttps://itome.team/blog/2019/12/flutter-advent-calendar-day15/\n\nステートフルオブジェクトに`with SingleTickerProviderStateMixin`をつけることでそのクラス自体が`TickerProvider`となります。`Ticker`はフレーム更新の管理を担ってくれるクラスです。\nAnimationControllerが一つの場合は単一のTickerを提供する`SingleTickerProviderStateMixin`、複数の場合は`TickerProviderStateMixin`を使用します。\n\n## Tween\n\nAnimationControllerが生成する数値のデフォルトは0.0~1.0となっていますが、それを変更したい場合にTweenクラスを使用します。\n以下の例では-200.0~0.0まで数値が変化します。\n\n```dart:Tweenを生成する一例\ntween = Tween\u003Cdouble>(begin: -200, end: 0);\n```\n\nAnimationと同様、数値以外にもColorやSizeを渡すことができます。\n\nTweenオブジェクトはステートレスなので状態を保存しません。その代わり、`evaluate(Animation\u003Cdouble> animation)`メソッドを提供し、アニメーションの現在の値を受け取ることができます。\n\nTweenオブジェクトからAnimationを生成するには以下のようにします。\n```dart:TweenオブジェクトからAnimationを生成する一例\nAnimationController controller = AnimationController(\n    duration: const Duration(milliseconds: 500), vsync: this);\nAnimation\u003Cint> alpha = IntTween(begin: 0, end: 255).animate(controller);\n```\n\nCurvedAnimationを利用したい場合には以下のようにします。\n```dart:TweenオブジェクトからAnimationを生成する一例（CurvedAnimationを使用）\nAnimationController controller = AnimationController(\n    duration: const Duration(milliseconds: 500), vsync: this);\nfinal Animation\u003Cdouble> curve =\n    CurvedAnimation(parent: controller, curve: Curves.easeOut);\nAnimation\u003Cint> alpha = IntTween(begin: 0, end: 255).animate(curve);\n```\n\n## アニメーションの通知\nAnimationオブジェクトは`addListener()`メソッドと`addStatusListener()`メソッドで定義されたListenerとStatusListenerを持つことができます。\nListenerは値が変化するたびに呼び出されます。値が変化するたびに画面表示を変えたい場合、setState()を使用します。\nStatusListenerはアニメーションの状態が開始・終了・進行・戻るなど、変化した場合に呼び出されます。\n\n\n# アニメーションのサンプル\n以上の概要を踏まえてアニメーションのサンプルを作成します。\n\n## まずはただのロゴ表示\n\n```dart:animate0\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: 300,\n        width: 300,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n```\n\n何も動かないFlutterロゴが表示されます。\n\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/ffbd868a-5754-f5b6-bda4-c836514a26af.png\">\n\n## AnimationControllerを使用する\n\n```dart:animate1\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller)\n      ..addListener(() {\n        setState(() {\n          // The state that has changed here is the animation object’s value.\n        });\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- Stateクラスに`with SingleTickerProviderStateMixin`をつける。\n- Stateクラスに`Animation\u003Cdouble>`と`AnimationController`を保持する。\n- Stateクラスに`initState()`メソッドを実装する。ステートフルウィジェットクラスが生成されたときに最初に動作する。\n- `initState()`メソッドでは\n    - AnimationControllerのインスタンス生成する。\n    - Tweenと作成したAnimationControllerからanimationを生成する。\n    - animationの`addListner()`メソッドに`setState()`メソッドを渡す->値の変更があるたびに画面に反映される。\n    - `controller.forward()`メソッドでアニメーションを開始する。\n- `dispose()`メソッドを記載する。アニメーションは大量のリソースを消費するので、ウィジェットが終了したときにメモリリークが起きないように処理する。\n\nAnimationControllerクラスはAnimation\u003Cdouble>を継承しているのでAnimationCotrollerだけで動くのでは？と思いましたがダメでした。\n\n実行すると以下のようになります。\n![animate1.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/74dea46e-8e56-fe76-290c-4c3e748a1246.gif)\n\n## Animated­Widgetを使用して簡略化する\nここで概要には登場しなかったAnimated­Widgetが急に出現します。\nAnimated­Widgetは実際に表示するWidgetをStateクラスから分離することができます。わざわざ`addListner()`メソッドを使用しないでも、Animated­Widgetにlistenしたいanimationを渡せば自動的に反映してくれます。\n\n```dart:animate2\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller);\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- AnimatedWidgetを継承したAnimatedLogoクラスを作成する。buildメソッドを実装し、その中にアニメーションとして表示したいオブジェクトを記載します。\n- `addListner()`メソッドを使用しなくて良くなったので、Stateクラスの`initState()`メソッドから`addListener()`に関する処理を削除する。\n- StateクラスのbuildメソッドではAnimatedLogoクラスを生成する。引数としてanimationを渡す。\n\nanimate1と実行するときの動きの違いはありません。\n\n## アニメーションの状態変化をモニタリングする\n`addStatusListener()`メソッドを使用するとアニメーションの状態変化を受け取ることができると学習しました。\nアニメーションの値の遷移が終了するとき`AnimationStatus.completed`にアニメーションを逆再生させ、アニメーションの値が初期値に戻った時に再度スタートさせる処理を書きます。\n\n```dart:animate3\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      })\n      ..addStatusListener((status) => print('$status'));\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- Stateクラスのanimationの`addStatusListener()`メソッドを記載する。listnerとしてstatusが`AnimationStatus.completed：アニメーションの終了`になったらanimationの値の動きを逆転させ、さらにstatusが`AnimationStatus.dismissed：アニメーションの開始前`になったらアニメーションの値を進行するという処理を渡します。\n\n実行するとこのようになります。\n![animate3.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/d4de28fa-848c-d1b7-37d7-b95236411017.gif)\n\n## AnimatedBuilderを使用してリファクタリングする\nanimate3では、もしStateクラスのAnimationを変更した場合、AnimatedLogoの方もコードを修正しないといけなくなるという問題があります。\nそれを解決するため、責任を3つに分離する必要があります。\n- ロゴをレンダリングする\n- Animationを定義する\n- 値の遷移をレンダリングする\n\nAnimatedBuilderを使用するとこれを実現できます。\n\n```dart:animate4\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoWidget extends StatelessWidget {\n  const LogoWidget({super.key});\n\n// Leave out the height and width so it fills the animating parent\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(vertical: 10),\n      child: const FlutterLogo(),\n    );\n  }\n}\n\nclass GrowTransition extends StatelessWidget {\n  const GrowTransition(\n      {required this.child, required this.animation, super.key});\n\n  final Widget child;\n  final Animation\u003Cdouble> animation;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: AnimatedBuilder(\n        animation: animation,\n        builder: (context, child) {\n          return SizedBox(\n            height: animation.value,\n            width: animation.value,\n            child: child,\n          );\n        },\n        child: child,\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      })\n      ..addStatusListener((status) => print('$status'));\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GrowTransition(\n      animation: animation,\n      child: const LogoWidget(),\n    );\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- LogoWidgetクラスを定義します。アニメーションとして表示したいウィジェットのみを返します。\n- GrowTransitionクラスを定義します。このクラスが生成されるときにコンストラクタで表示するウィジェットとanimationを受け取ります。`builder()`メソッド内でAnimatedBuilderを使用してアニメーションを生成します。\n- Stateクラスの`builder()`メソッド内ではGrowTransitionクラスにanimationとロゴを渡して生成します。\n\n実行結果はanimate3と同じです。\n\n## 同時進行のアニメーション\n透明度とサイズのように、一度に複数のアニメーション(Tween)を生成したい場合があります。\n```dart\ncontroller =\n    AnimationController(duration: const Duration(seconds: 2), vsync: this);\nsizeAnimation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller);\nopacityAnimation = Tween\u003Cdouble>(begin: 0.1, end: 1).animate(controller);\n```\n\nしかしAnimatedWidgetは1つのアニメーションしか受け取れません。そのため、上記のように2つのアニメーションをStateクラスで生成しても行き場がありません。\nそのためアニメーションはTweenから生成していないものをAnimatedWidgetの引数に渡し、渡した先でそれぞれTweenを生成するようにします。\nこのとき、`animation.value`ではTweenから生成していない値を受け取ることになるため、Tweenのevaluateメソッドを使用します。`_sizeTween.evaluate(animation)`のようにしてanimationの現在の値をTweenを通して受け取ります。\n\n```dart:animate5\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  // Make the Tweens static because they don't change.\n  static final _opacityTween = Tween\u003Cdouble>(begin: 0.1, end: 1);\n  static final _sizeTween = Tween\u003Cdouble>(begin: 0, end: 300);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Opacity(\n        opacity: _opacityTween.evaluate(animation),\n        child: Container(\n          margin: const EdgeInsets.symmetric(vertical: 10),\n          height: _sizeTween.evaluate(animation),\n          width: _sizeTween.evaluate(animation),\n          child: const FlutterLogo(),\n        ),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = CurvedAnimation(parent: controller, curve: Curves.easeIn)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n実行すると以下の通りとなります。animate3やanimate4とは異なり、サイズだけでなく透明度も変化しています。\n![animate5.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif)\n\n# さいごに\nFlutterのアニメーションについて学習してきました。画面表示側の処理には詳しくありませんが、アプリを起動した際のロゴ表示や、スクロールした際の表示などに応用できそうです。\n",false,0,"2023-03-11T15:15:52+09:00",null,"c115932d3bbf15df0f1d",4,2,[14],{"name":15,"versions":16},"Flutter",[],"Flutterのアニメーションのチュートリアル","2023-03-11T16:32:15+09:00","https://qiita.com/y5347M/items/c115932d3bbf15df0f1d",{"description":21,"facebook_id":22,"followees_count":23,"followers_count":24,"github_login_name":25,"id":25,"items_count":26,"linkedin_id":22,"location":22,"name":25,"organization":22,"permanent_id":27,"profile_image_url":28,"team_only":6,"twitter_screen_name":29,"website_url":30},"バックエンドエンジニアをしています。","",5,1,"y5347M",18,2433961,"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2433961/a4773675e7566e225738c8c15f9fda53e35bd799/large.png?1741427719","mmmm16089306","https://twitter.com/mmmm16089306",6041,{"description":21,"facebook_id":22,"followees_count":23,"followers_count":24,"github_login_name":25,"id":25,"items_count":26,"linkedin_id":22,"location":22,"name":25,"organization":22,"permanent_id":27,"profile_image_url":28,"team_only":6,"twitter_screen_name":29,"website_url":30,"image_monthly_upload_limit":33,"image_monthly_upload_remaining":34},104857600,101432560,1745893161717]