[{"data":1,"prerenderedAt":35},["ShallowReactive",2],{"useQiitaArticleDetailFetcher-203a2b2fc3532bf9699f":3,"useQiitaAuthorizedUser":32},{"rendered_body":4,"body":5,"coediting":6,"comments_count":7,"created_at":8,"group":9,"id":10,"likes_count":7,"private":6,"reactions_count":7,"stocks_count":7,"tags":11,"title":18,"updated_at":8,"url":19,"user":20,"page_views_count":31,"team_membership":9,"organization_url_name":9,"slide":6},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:69\">前回に引き続きチュートリアルを実施してみます。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:51\">\u003Ciframe id=\"qiita-embed-content__5d26316f0c25d1b802bf3dbd0d88884e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5d26316f0c25d1b802bf3dbd0d88884e\" data-content=\"https%3A%2F%2Fqiita.com%2Fy5347M%2Fitems%2F17a3198a2eb553844634\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:141\">コーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\u003C/p>\n\u003Cp data-sourcepos=\"8:1-8:69\">\u003Ciframe id=\"qiita-embed-content__2ae527ac35e2fdf000e54d63095d4c85\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2ae527ac35e2fdf000e54d63095d4c85\" data-content=\"https%3A%2F%2Frunebook.dev%2Fja%2Fdocs%2Fkotlin%2Fdocs%2Freference%2Fcoding-conventions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"10:1-10:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"11:1-16:0\">\n\u003Cli data-sourcepos=\"11:1-11:15\">macOS: 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:45\">IntelliJ IDEA: 2021.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"13:1-13:38\">Kotlin: 212-1.5.10-release-IJ5457.46\u003C/li>\n\u003Cli data-sourcepos=\"14:1-14:15\">Gradle: 7.4.1\u003C/li>\n\u003Cli data-sourcepos=\"15:1-16:0\">Java: temurin 17.0.3\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"17:1-17:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"18:1-18:39\">\n\u003Cspan id=\"独自の拡張機能を作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%8B%AC%E8%87%AA%E3%81%AE%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>独自の拡張機能を作成する\u003C/h2>\n\u003Cp data-sourcepos=\"19:1-20:63\">以下のクラスを作成します。この関数は後ほど使うそうです。\u003Cbr>\n（これで良いのでしょうか、少し不安です。）\u003C/p>\n\u003Cp data-sourcepos=\"22:1-22:48\">\u003Ccode>src/main/kotlin/com/example/blog/Extensions.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"23:1-57:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Extensions.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.LocalDateTime\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.format.DateTimeFormatterBuilder\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.temporal.ChronoField\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.util.*\u003C/span>\n\n\u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">format\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">format\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">englishDateFormatter\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">daysLookup\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"mi\">31\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">associate\u003C/span> \u003Cspan class=\"p\">{\u003C/span> \u003Cspan class=\"n\">it\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toLong\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"n\">to\u003C/span> \u003Cspan class=\"nf\">getOrdinal\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">it\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">englishDateFormatter\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">DateTimeFormatterBuilder\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendPattern\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"yyyy-MM-dd\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendLiteral\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendText\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">ChronoField\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">DAY_OF_MONTH\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">daysLookup\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendLiteral\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendPattern\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"yyyy\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toFormatter\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">Locale\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">ENGLISH\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">getOrdinal\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">n\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Int\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">when\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"k\">in\u003C/span> \u003Cspan class=\"mi\">11\u003C/span>\u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"mi\">13\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}th\"\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"p\">%\u003C/span> \u003Cspan class=\"mi\">10\u003C/span> \u003Cspan class=\"p\">==\u003C/span> \u003Cspan class=\"mi\">1\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}st\"\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"p\">%\u003C/span> \u003Cspan class=\"mi\">10\u003C/span> \u003Cspan class=\"p\">==\u003C/span> \u003Cspan class=\"mi\">2\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}nd\"\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"p\">%\u003C/span> \u003Cspan class=\"mi\">10\u003C/span> \u003Cspan class=\"p\">==\u003C/span> \u003Cspan class=\"mi\">3\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}rd\"\u003C/span>\n    \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}th\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toSlug\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nf\">toLowerCase\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">replace\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"\\n\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">replace\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"[^a-z\\\\d\\\\s]\"\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toRegex\u003C/span>\u003Cspan class=\"p\">(),\u003C/span> \u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">split\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">joinToString\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"-\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">replace\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"-+\"\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toRegex\u003C/span>\u003Cspan class=\"p\">(),\u003C/span> \u003Cspan class=\"s\">\"-\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"59:1-59:31\">\n\u003Cspan id=\"jpa-を使用した永続性\" class=\"fragment\">\u003C/span>\u003Ca href=\"#jpa-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E6%B0%B8%E7%B6%9A%E6%80%A7\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>JPA を使用した永続性\u003C/h2>\n\u003Ch4 data-sourcepos=\"60:1-60:33\">\n\u003Cspan id=\"entityをopenに設定する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#entity%E3%82%92open%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Entityをopenに設定する\u003C/h4>\n\u003Cp data-sourcepos=\"61:1-61:100\">遅延フェッチを有効にするにはEntityをopenに設定する必要があるそうです。\u003C/p>\n\u003Cp data-sourcepos=\"63:1-64:41\">\u003Ccode>build.gradle.kts\u003C/code>を編集します。\u003Cbr>\nまずはpluginsに1行追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"65:1-70:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">plugins\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"nf\">kotlin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"plugin.allopen\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"s\">\"1.4.32\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"71:1-71:37\">さらにallopenを記述します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"72:1-78:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">allOpen\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"k\">annotation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"javax.persistence.Entity\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n  \u003Cspan class=\"k\">annotation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"javax.persistence.Embeddable\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n  \u003Cspan class=\"k\">annotation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"javax.persistence.MappedSuperclass\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"80:1-80:20\">\n\u003Cspan id=\"モデル作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%A2%E3%83%87%E3%83%AB%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>モデル作成\u003C/h4>\n\u003Cp data-sourcepos=\"81:1-83:117\">Entityを作成します。\u003Cbr>\nデフォルト値を持つフィールド変数はコンストラクタの後ろに定義します。コンストラクタを使用して定義する際、引数を省略できます。\u003Cbr>\nKotlinでは同じファイル内で簡潔なクラス宣言をグループ化することは普通なようです。\u003C/p>\n\u003Cp data-sourcepos=\"85:1-85:46\">\u003Ccode>src/main/kotlin/com/example/blog/Entities.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"86:1-111:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Entities.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.example.blog.toSlug\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.LocalDateTime\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.Entity\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.GeneratedValue\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.Id\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.ManyToOne\u003C/span>\n\n\u003Cspan class=\"nd\">@Entity\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">title\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">headline\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">content\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nd\">@ManyToOne\u003C/span> \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">author\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">slug\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">title\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toSlug\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">addedAt\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">now\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"nd\">@Id\u003C/span> \u003Cspan class=\"nd\">@GeneratedValue\u003C/span> \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">id\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"nd\">@Entity\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">login\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">firstname\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">lastname\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">description\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nd\">@Id\u003C/span> \u003Cspan class=\"nd\">@GeneratedValue\u003C/span> \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">id\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"113:1-113:26\">\n\u003Cspan id=\"リポジトリ作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>リポジトリ作成\u003C/h4>\n\u003Cp data-sourcepos=\"114:1-114:79\">こちらも同じファイル内に2つのinterfaceを宣言しています。\u003C/p>\n\u003Cp data-sourcepos=\"116:1-116:50\">\u003Ccode>src/main/kotlin/com/example/blog/Repositories.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"117:1-130:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Repositories.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.data.repository.CrudRepository\u003C/span>\n\n\u003Cspan class=\"kd\">interface\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span> \u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">CrudRepository\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">findBySlug\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">slug\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">?\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">findAllByOrderByAddedAtDesc\u003C/span>\u003Cspan class=\"p\">():\u003C/span> \u003Cspan class=\"nc\">Iterable\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">interface\u003C/span> \u003Cspan class=\"nc\">UserRepository\u003C/span> \u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">CrudRepository\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">findByLogin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">login\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">?\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"132:1-132:29\">\n\u003Cspan id=\"jpaのテストを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#jpa%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>JPAのテストを作成\u003C/h4>\n\u003Cp data-sourcepos=\"133:1-134:55\">リポジトリが期待通り動作するかテストを作成します。\u003Cbr>\n\u003Ccode>src/test/kotlin/com/example/blog/RepositoriesTests.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"135:1-175:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">RepositoriesTests.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">Article\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">ArticleRepository\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">User\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">UserRepository\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.assertj.core.api.Assertions.assertThat\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.beans.factory.annotation.Autowired\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.data.repository.findByIdOrNull\u003C/span>\n\n\u003Cspan class=\"nd\">@DataJpaTest\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">RepositoriesTests\u003C/span> \u003Cspan class=\"nd\">@Autowired\u003C/span> \u003Cspan class=\"k\">constructor\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">entityManager\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">TestEntityManager\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">userRepository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">UserRepository\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">articleRepository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`When\u003C/span> \u003Cspan class=\"n\">findByIdOrNull\u003C/span> \u003Cspan class=\"n\">then\u003C/span> \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Article`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">juergen\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"springjuergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Juergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Hoeller\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">persist\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">article\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"Spring Framework 5.0 goes GA\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Dear Spring community ...\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Lorem ipsum\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">persist\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">flush\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">found\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">articleRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findByIdOrNull\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">id\u003C/span>\u003Cspan class=\"o\">!!\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">found\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">isEqualTo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`When\u003C/span> \u003Cspan class=\"n\">findByLogin\u003C/span> \u003Cspan class=\"n\">then\u003C/span> \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">User`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">juergen\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"springjuergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Juergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Hoeller\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">persist\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">flush\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">user\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">userRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findByLogin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">login\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">user\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">isEqualTo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"177:1-177:48\">またしてもエラーが発生しました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"178:1-184:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>2022-06-19 11:44:12.495  WARN 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 42001, SQLState: 42001\n2022-06-19 11:44:12.495 ERROR 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQLステートメントに文法エラーがあります \n\"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; 期待されるステートメント \"identifier\"\nSyntax error in SQL statement \"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; expected \"identifier\"; SQL statement:\n\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"186:1-187:57\">どうやら\u003Ccode>USER\u003C/code>というワードはH2の予約語だそうなので、\u003Ccode>USER\u003C/code>を\u003Ccode>ARTICLE_USER\u003C/code>に変更してみます。\u003Cbr>\n結果、問題なくテストを実行できました。\u003C/p>\n\u003Cp data-sourcepos=\"189:1-189:52\">\u003Ciframe id=\"qiita-embed-content__1e4907c2e46f91f98cdf089871f7b103\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1e4907c2e46f91f98cdf089871f7b103\" data-content=\"https%3A%2F%2Fgithub.com%2Fh2database%2Fh2database%2Fissues%2F3363\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch2 data-sourcepos=\"191:1-191:15\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h2>\n\u003Cp data-sourcepos=\"192:1-193:42\">長くなったのでこちらで一旦切ります。\u003Cbr>\n今回はJPA周りを実装しました。\u003C/p>\n","# 前提\n前回に引き続きチュートリアルを実施してみます。\n\nhttps://qiita.com/y5347M/items/17a3198a2eb553844634\n\nコーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\n\nhttps://runebook.dev/ja/docs/kotlin/docs/reference/coding-conventions\n\n# 環境\n- macOS: 11.6.4\n- IntelliJ IDEA: 2021.2.3 (Community Edition)\n- Kotlin: 212-1.5.10-release-IJ5457.46\n- Gradle: 7.4.1\n- Java: temurin 17.0.3\n\n# 手順\n## 独自の拡張機能を作成する\n以下のクラスを作成します。この関数は後ほど使うそうです。\n（これで良いのでしょうか、少し不安です。）\n\n`src/main/kotlin/com/example/blog/Extensions.kt`\n```kotlin:Extensions.kt\npackage com.example.blog\n\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatterBuilder\nimport java.time.temporal.ChronoField\nimport java.util.*\n\nfun LocalDateTime.format() = this.format(englishDateFormatter)\n\nprivate val daysLookup = (1..31).associate { it.toLong() to getOrdinal(it) }\n\nprivate val englishDateFormatter = DateTimeFormatterBuilder()\n        .appendPattern(\"yyyy-MM-dd\")\n        .appendLiteral(\" \")\n        .appendText(ChronoField.DAY_OF_MONTH, daysLookup)\n        .appendLiteral(\" \")\n        .appendPattern(\"yyyy\")\n        .toFormatter(Locale.ENGLISH)\n\nprivate fun getOrdinal(n: Int) = when {\n    n in 11..13 -> \"${n}th\"\n    n % 10 == 1 -> \"${n}st\"\n    n % 10 == 2 -> \"${n}nd\"\n    n % 10 == 3 -> \"${n}rd\"\n    else -> \"${n}th\"\n}\n\nfun String.toSlug() = toLowerCase()\n        .replace(\"\\n\", \" \")\n        .replace(\"[^a-z\\\\d\\\\s]\".toRegex(), \" \")\n        .split(\" \")\n        .joinToString(\"-\")\n        .replace(\"-+\".toRegex(), \"-\")\n```\n\n## JPA を使用した永続性\n#### Entityをopenに設定する\n遅延フェッチを有効にするにはEntityをopenに設定する必要があるそうです。\n\n`build.gradle.kts`を編集します。\nまずはpluginsに1行追加します。\n```build.gradle.kts\nplugins {\n  ...\n  kotlin(\"plugin.allopen\") version \"1.4.32\"\n}\n```\nさらにallopenを記述します。\n```build.gradle.kts\nallOpen {\n  annotation(\"javax.persistence.Entity\")\n  annotation(\"javax.persistence.Embeddable\")\n  annotation(\"javax.persistence.MappedSuperclass\")\n}\n```\n\n#### モデル作成\nEntityを作成します。\nデフォルト値を持つフィールド変数はコンストラクタの後ろに定義します。コンストラクタを使用して定義する際、引数を省略できます。\nKotlinでは同じファイル内で簡潔なクラス宣言をグループ化することは普通なようです。\n\n`src/main/kotlin/com/example/blog/Entities.kt`\n```kotlin:Entities.kt\nimport com.example.blog.toSlug\nimport java.time.LocalDateTime\nimport javax.persistence.Entity\nimport javax.persistence.GeneratedValue\nimport javax.persistence.Id\nimport javax.persistence.ManyToOne\n\n@Entity\nclass Article(\n        var title: String,\n        var headline: String,\n        var content: String,\n        @ManyToOne var author: User,\n        var slug: String = title.toSlug(),\n        var addedAt: LocalDateTime = LocalDateTime.now(),\n        @Id @GeneratedValue var id: Long? = null)\n\n@Entity\nclass User(\n        var login: String,\n        var firstname: String,\n        var lastname: String,\n        var description: String? = null,\n        @Id @GeneratedValue var id: Long? = null)\n```\n\n#### リポジトリ作成\nこちらも同じファイル内に2つのinterfaceを宣言しています。\n\n`src/main/kotlin/com/example/blog/Repositories.kt`\n```kotlin:Repositories.kt\npackage com.example.blog\n\nimport org.springframework.data.repository.CrudRepository\n\ninterface ArticleRepository : CrudRepository\u003CArticle, Long> {\n    fun findBySlug(slug: String): Article?\n    fun findAllByOrderByAddedAtDesc(): Iterable\u003CArticle>\n}\n\ninterface UserRepository : CrudRepository\u003CUser, Long> {\n    fun findByLogin(login: String): User?\n}\n```\n\n#### JPAのテストを作成\nリポジトリが期待通り動作するかテストを作成します。\n`src/test/kotlin/com/example/blog/RepositoriesTests.kt`\n```kotlin:RepositoriesTests.kt\npackage com.example.blog\n\nimport Article\nimport ArticleRepository\nimport User\nimport UserRepository\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest\nimport org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager\nimport org.springframework.data.repository.findByIdOrNull\n\n@DataJpaTest\nclass RepositoriesTests @Autowired constructor(\n        val entityManager: TestEntityManager,\n        val userRepository: UserRepository,\n        val articleRepository: ArticleRepository) {\n\n    @Test\n    fun `When findByIdOrNull then return Article`() {\n        val juergen = User(\"springjuergen\", \"Juergen\", \"Hoeller\")\n        entityManager.persist(juergen)\n        val article = Article(\"Spring Framework 5.0 goes GA\", \"Dear Spring community ...\", \"Lorem ipsum\", juergen)\n        entityManager.persist(article)\n        entityManager.flush()\n        val found = articleRepository.findByIdOrNull(article.id!!)\n        assertThat(found).isEqualTo(article)\n    }\n\n    @Test\n    fun `When findByLogin then return User`() {\n        val juergen = User(\"springjuergen\", \"Juergen\", \"Hoeller\")\n        entityManager.persist(juergen)\n        entityManager.flush()\n        val user = userRepository.findByLogin(juergen.login)\n        assertThat(user).isEqualTo(juergen)\n    }\n}\n```\n\nまたしてもエラーが発生しました。\n```\n2022-06-19 11:44:12.495  WARN 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 42001, SQLState: 42001\n2022-06-19 11:44:12.495 ERROR 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQLステートメントに文法エラーがあります \n\"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; 期待されるステートメント \"identifier\"\nSyntax error in SQL statement \"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; expected \"identifier\"; SQL statement:\n\n```\n\nどうやら`USER`というワードはH2の予約語だそうなので、`USER`を`ARTICLE_USER`に変更してみます。\n結果、問題なくテストを実行できました。\n\nhttps://github.com/h2database/h2database/issues/3363\n\n## さいごに\n長くなったのでこちらで一旦切ります。\n今回はJPA周りを実装しました。\n\n",false,0,"2022-06-19T12:27:05+09:00",null,"203a2b2fc3532bf9699f",[12,15],{"name":13,"versions":14},"Kotlin",[],{"name":16,"versions":17},"SpringBoot",[],"KotlinでSpring BootのWebアプリケーションを作成してみる（２）","https://qiita.com/y5347M/items/203a2b2fc3532bf9699f",{"description":21,"facebook_id":22,"followees_count":23,"followers_count":24,"github_login_name":25,"id":25,"items_count":26,"linkedin_id":22,"location":22,"name":25,"organization":22,"permanent_id":27,"profile_image_url":28,"team_only":6,"twitter_screen_name":29,"website_url":30},"バックエンドエンジニアをしています。","",5,1,"y5347M",18,2433961,"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2433961/a4773675e7566e225738c8c15f9fda53e35bd799/large.png?1741427719","mmmm16089306","https://twitter.com/mmmm16089306",1648,{"description":21,"facebook_id":22,"followees_count":23,"followers_count":24,"github_login_name":25,"id":25,"items_count":26,"linkedin_id":22,"location":22,"name":25,"organization":22,"permanent_id":27,"profile_image_url":28,"team_only":6,"twitter_screen_name":29,"website_url":30,"image_monthly_upload_limit":33,"image_monthly_upload_remaining":34},104857600,101432560,1745893162741]