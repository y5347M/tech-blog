[{"data":1,"prerenderedAt":43},["ShallowReactive",2],{"useQiitaArticleDetailFetcher-5c679fa1d351fc8ef02b":3,"useQiitaAuthorizedUser":40},{"rendered_body":4,"body":5,"coediting":6,"comments_count":7,"created_at":8,"group":9,"id":10,"likes_count":11,"private":6,"reactions_count":7,"stocks_count":7,"tags":12,"title":25,"updated_at":26,"url":27,"user":28,"page_views_count":39,"team_membership":9,"organization_url_name":9,"slide":6},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-3:268\">プロジェクトをテストする中でどうしてもアプリ日時を変更したいときがあると思います。\u003Cbr>\nアプリを起動するコンテナの日時を変更しても実現はできますが、HTTPS通信をする際にエラーが発生することがありました。そのためClockクラスを利用して日時変更をする方法を試したのでメモです。\u003C/p>\n\u003Cp data-sourcepos=\"5:1-5:42\">コードサンプルはこちらです。\u003C/p>\n\u003Cp data-sourcepos=\"7:1-7:45\">\u003Ciframe id=\"qiita-embed-content__7607be51b4c2d12fcf1633d22eb82d28\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7607be51b4c2d12fcf1633d22eb82d28\" data-content=\"https%3A%2F%2Fgithub.com%2Fy5347M%2Fclock-config-sample\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"9:1-9:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"10:1-15:0\">\n\u003Cli data-sourcepos=\"10:1-10:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:45\">IntelliJ IDEA: 2022.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:13\">Gradle: 7.5\u003C/li>\n\u003Cli data-sourcepos=\"13:1-13:22\">Java: temurin 17.0.3\u003C/li>\n\u003Cli data-sourcepos=\"14:1-15:0\">Spring Boot: 2.7.10-SNAPSHOT\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"16:1-16:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"18:1-18:30\">\n\u003Cspan id=\"プロジェクトの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロジェクトの作成\u003C/h2>\n\u003Ch4 data-sourcepos=\"20:1-20:49\">\n\u003Cspan id=\"spring-initializrでプロジェクト作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#spring-initializr%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>spring initializrでプロジェクト作成\u003C/h4>\n\u003Cp data-sourcepos=\"21:1-23:139\">\u003Ca href=\"https://start.spring.io/\" rel=\"nofollow noopener\" target=\"_blank\">https://start.spring.io/\u003C/a>でプロジェクトの雛形を作成します。\u003Cbr>\n以下の画像のような構成にしています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3452ce5e-d040-3c3d-dc55-8a4575a56f47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=996da8961649fa834573bc2b6baa045b\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3452ce5e-d040-3c3d-dc55-8a4575a56f47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=996da8961649fa834573bc2b6baa045b\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3452ce5e-d040-3c3d-dc55-8a4575a56f47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=17fcf8fa82d1eaf4f752ece6a5a9089a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3452ce5e-d040-3c3d-dc55-8a4575a56f47.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"25:1-25:104\">GENERATEボタンを押してダウンロードしてきます。それをIDEツールで開きます。\u003C/p>\n\u003Ch4 data-sourcepos=\"27:1-27:32\">\n\u003Cspan id=\"コントローラー作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コントローラー作成\u003C/h4>\n\u003Cp data-sourcepos=\"29:1-30:127\">\u003Ccode>http://localhost:8080/api/datetime\u003C/code>にアクセスすることでレスポンスが返却されるAPIを作成しました。\u003Cbr>\n\u003Ccode>LocalDateTime.now()\u003C/code>の代わりに今回作成する\u003Ccode>CustomLocalDateTime.customLocalDateTime()\u003C/code>等を使用しています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"32:1-54:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">DatetimeController.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@RestController\u003C/span>\n\u003Cspan class=\"nd\">@RequestMapping\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"/api/datetime\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">DatetimeController\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Data\u003C/span>\n    \u003Cspan class=\"nd\">@Builder\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">Response\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span> \u003Cspan class=\"n\">localDateTime\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n        \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">LocalDate\u003C/span> \u003Cspan class=\"n\">localDate\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n        \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">LocalTime\u003C/span> \u003Cspan class=\"n\">localTime\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@GetMapping\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"nc\">Response\u003C/span> \u003Cspan class=\"nf\">getCurrentDatetime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Response\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">builder\u003C/span>\u003Cspan class=\"o\">()\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">localDateTime\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">customLocalDateTime\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">localDate\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">customLocalDate\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">localTime\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">customLocalTime\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">build\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"56:1-56:31\">\n\u003Cspan id=\"clockconfigクラス作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#clockconfig%E3%82%AF%E3%83%A9%E3%82%B9%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ClockConfigクラス作成\u003C/h4>\n\u003Cp data-sourcepos=\"57:1-59:64\">Configクラスを作成します。\u003Cbr>\nシステム起動時にappilication.ymlから値を読み取り、時間指定されていればその時間を反映したClock、そうでなければシステム日時を反映したClockを返却します。\u003Cbr>\nあらかじめZoneは\u003Ccode>Asia/Tokyo\u003C/code>を指定しておきます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"61:1-81:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ClockConfig.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@Configuration\u003C/span>\n\u003Cspan class=\"nd\">@Slf4j\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Value\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"${time-travel.specified-time}\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"nd\">@Bean\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"nc\">Clock\u003C/span> \u003Cspan class=\"nf\">clock\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">ObjectUtils\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">isEmpty\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">))\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n            \u003Cspan class=\"n\">log\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">info\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Using default clock\"\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n            \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Clock\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">system\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">ZoneId\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">of\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Asia/Tokyo\"\u003C/span>\u003Cspan class=\"o\">));\u003C/span>\n        \u003Cspan class=\"o\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n            \u003Cspan class=\"n\">log\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">info\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Using custom clock: {}\"\u003C/span>\u003Cspan class=\"o\">,\u003C/span> \u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n            \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Clock\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">fixed\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">Instant\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">parse\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">),\u003C/span> \u003Cspan class=\"nc\">ZoneId\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">of\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Asia/Tokyo\"\u003C/span>\u003Cspan class=\"o\">));\u003C/span>\n        \u003Cspan class=\"o\">}\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"83:1-83:57\">applicaiton.ymlには以下の設定を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"84:1-87:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">time-travel\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">specified-time\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"89:1-89:39\">\n\u003Cspan id=\"customlocaldatetimeクラス作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#customlocaldatetime%E3%82%AF%E3%83%A9%E3%82%B9%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>CustomLocalDateTimeクラス作成\u003C/h4>\n\u003Cp data-sourcepos=\"90:1-90:195\">beanとして用意したClockを各Component上でDIしてもいいのですが、管理が煩雑になります。そのため時間を管理するUtilクラスを作成して利用します。\u003C/p>\n\u003Cp data-sourcepos=\"92:1-92:122\">staticであるUtilクラスにconfigをセットするため、\u003Ccode>setClockConfig\u003C/code>メソッドを用意しておきます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"94:1-117:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">CustomLocalDateTime.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">setClockConfig\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clockConfig\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nf\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span> \u003Cspan class=\"nf\">customLocalDateTime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">now\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clock\u003C/span>\u003Cspan class=\"o\">());\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">LocalDate\u003C/span> \u003Cspan class=\"nf\">customLocalDate\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">LocalDate\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">now\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clock\u003C/span>\u003Cspan class=\"o\">());\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">LocalTime\u003C/span> \u003Cspan class=\"nf\">customLocalTime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">LocalTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">now\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clock\u003C/span>\u003Cspan class=\"o\">());\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"119:1-119:44\">\n\u003Cspan id=\"staticcontextinitializerクラス作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#staticcontextinitializer%E3%82%AF%E3%83%A9%E3%82%B9%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>StaticContextInitializerクラス作成\u003C/h4>\n\u003Cp data-sourcepos=\"120:1-120:220\">staticであるUtilクラスにconfigをセットするため、アプリケーション起動時に動作するようStaticContextInitializerクラスを準備します。参考にしたのは以下のサイトです。\u003C/p>\n\u003Cp data-sourcepos=\"122:1-122:93\">\u003Ciframe id=\"qiita-embed-content__b17b2cc4247f01b069adc90feede35cc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b17b2cc4247f01b069adc90feede35cc\" data-content=\"https%3A%2F%2Fbetter-coding.com%2Fjava-spring-boot-how-to-autowire-bean-to-a-static-field-of-a-class%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"124:1-136:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">StaticContextInitializer.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@Component\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">StaticContextInitializer\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Autowired\u003C/span>\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"nd\">@PostConstruct\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">init\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">setClockConfig\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"139:1-139:9\">\n\u003Cspan id=\"実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実行\u003C/h2>\n\u003Ch4 data-sourcepos=\"141:1-141:35\">\n\u003Cspan id=\"日時を指定しない場合\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%97%A5%E6%99%82%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>日時を指定しない場合\u003C/h4>\n\u003Cp data-sourcepos=\"142:1-142:57\">applicaiton.ymlには以下の設定を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"143:1-146:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">time-travel\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">specified-time\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"148:1-149:89\">アプリケーションを起動します。\u003Cbr>\nログにはデフォルトのClockを使用するという内容が表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"150:1-152:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">log\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">2023-03-05 11:34:07.851  INFO 9299 --- [           main] c.e.c.config.ClockConfig                 : Using default clock\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"154:1-155:57\">\u003Ccode>http://localhost:8080/api/datetime\u003C/code>にアクセスします。\u003Cbr>\nレスポンスには現在日時が表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"156:1-158:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">レスポンス\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">{\"localDateTime\":\"2023-03-05T11:35:16.674985\",\"localDate\":\"2023-03-05\",\"localTime\":\"11:35:16.675263\"}\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"160:1-160:32\">\n\u003Cspan id=\"日時を指定する場合\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%97%A5%E6%99%82%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>日時を指定する場合\u003C/h4>\n\u003Cp data-sourcepos=\"161:1-161:57\">applicaiton.ymlには以下の設定を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"162:1-165:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">time-travel\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">specified-time\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">2025-01-01T12:00:00.000Z\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"167:1-168:95\">アプリケーションを起動します。\u003Cbr>\nログには指定された日時のClockを使用するという内容が表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"169:1-171:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">log\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">2023-03-05 11:38:07.522  INFO 9373 --- [           main] c.e.c.config.ClockConfig                 : Using custom clock: 2025-01-01T12:00:00.000Z\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"173:1-175:248\">\u003Ccode>http://localhost:8080/api/datetime\u003C/code>にアクセスします。\u003Cbr>\nレスポンスには指定された日時が表示されます。\u003Cbr>\n注意が必要なのは、指定した時間はUTCで表示されるのはJSTとなる点です。こちらは各プロジェクト内で統一してください。変更する場合はClockConfigクラスのゾーンを変更してください。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"176:1-178:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">レスポンス\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">{\"localDateTime\":\"2025-01-01T21:00:00\",\"localDate\":\"2025-01-01\",\"localTime\":\"21:00:00\"}\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch1 data-sourcepos=\"180:1-180:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"181:1-182:54\">アプリ内の日時を変更してテストすることが多いと思います。一つの例として参考にしていただけると幸いです。\u003Cbr>\n他の方法があればぜひご共有ください！\u003C/p>\n","# 前提\nプロジェクトをテストする中でどうしてもアプリ日時を変更したいときがあると思います。\nアプリを起動するコンテナの日時を変更しても実現はできますが、HTTPS通信をする際にエラーが発生することがありました。そのためClockクラスを利用して日時変更をする方法を試したのでメモです。\n\nコードサンプルはこちらです。\n\nhttps://github.com/y5347M/clock-config-sample\n\n# 環境\n- macOS: 12.6\n- IntelliJ IDEA: 2022.2.3 (Community Edition)\n- Gradle: 7.5\n- Java: temurin 17.0.3\n- Spring Boot: 2.7.10-SNAPSHOT\n\n# 手順\n\n## プロジェクトの作成\n\n#### spring initializrでプロジェクト作成\n[https://start.spring.io/](https://start.spring.io/)でプロジェクトの雛形を作成します。\n以下の画像のような構成にしています。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3452ce5e-d040-3c3d-dc55-8a4575a56f47.png\">\n\nGENERATEボタンを押してダウンロードしてきます。それをIDEツールで開きます。\n\n#### コントローラー作成\n\n`http://localhost:8080/api/datetime`にアクセスすることでレスポンスが返却されるAPIを作成しました。\n`LocalDateTime.now()`の代わりに今回作成する`CustomLocalDateTime.customLocalDateTime()`等を使用しています。\n\n```java:DatetimeController.java\n@RestController\n@RequestMapping(\"/api/datetime\")\npublic class DatetimeController {\n\n    @Data\n    @Builder\n    public static class Response {\n        private LocalDateTime localDateTime;\n        private LocalDate localDate;\n        private LocalTime localTime;\n    }\n\n    @GetMapping\n    public Response getCurrentDatetime() {\n        return Response.builder()\n                .localDateTime(CustomLocalDateTime.customLocalDateTime())\n                .localDate(CustomLocalDateTime.customLocalDate())\n                .localTime(CustomLocalDateTime.customLocalTime())\n                .build();\n    }\n}\n```\n\n#### ClockConfigクラス作成\nConfigクラスを作成します。\nシステム起動時にappilication.ymlから値を読み取り、時間指定されていればその時間を反映したClock、そうでなければシステム日時を反映したClockを返却します。\nあらかじめZoneは`Asia/Tokyo`を指定しておきます。\n\n```java:ClockConfig.java\n@Configuration\n@Slf4j\npublic class ClockConfig {\n\n    @Value(\"${time-travel.specified-time}\")\n    private String specifiedTime;\n\n    @Bean\n    public Clock clock() {\n        if(ObjectUtils.isEmpty(specifiedTime)) {\n            log.info(\"Using default clock\");\n            return Clock.system(ZoneId.of(\"Asia/Tokyo\"));\n        } else {\n            log.info(\"Using custom clock: {}\", specifiedTime);\n            return Clock.fixed(Instant.parse(specifiedTime), ZoneId.of(\"Asia/Tokyo\"));\n        }\n    }\n\n}\n```\n\napplicaiton.ymlには以下の設定を追加します。\n```yml:application.yml\ntime-travel:\n  specified-time: \n```\n\n#### CustomLocalDateTimeクラス作成\nbeanとして用意したClockを各Component上でDIしてもいいのですが、管理が煩雑になります。そのため時間を管理するUtilクラスを作成して利用します。\n\nstaticであるUtilクラスにconfigをセットするため、`setClockConfig`メソッドを用意しておきます。\n\n```java:CustomLocalDateTime.java\npublic class CustomLocalDateTime {\n\n    private static ClockConfig clockConfig;\n\n    public static void setClockConfig(ClockConfig clockConfig) {\n        CustomLocalDateTime.clockConfig = clockConfig;\n    }\n\n    private CustomLocalDateTime() {}\n\n    public static LocalDateTime customLocalDateTime() {\n        return LocalDateTime.now(clockConfig.clock());\n    }\n\n    public static LocalDate customLocalDate() {\n        return LocalDate.now(clockConfig.clock());\n    }\n\n    public static LocalTime customLocalTime() {\n        return LocalTime.now(clockConfig.clock());\n    }\n}\n```\n\n#### StaticContextInitializerクラス作成\nstaticであるUtilクラスにconfigをセットするため、アプリケーション起動時に動作するようStaticContextInitializerクラスを準備します。参考にしたのは以下のサイトです。\n\nhttps://better-coding.com/java-spring-boot-how-to-autowire-bean-to-a-static-field-of-a-class/\n\n```java:StaticContextInitializer.java\n@Component\npublic class StaticContextInitializer {\n\n    @Autowired\n    private ClockConfig clockConfig;\n\n    @PostConstruct\n    public void init() {\n        CustomLocalDateTime.setClockConfig(clockConfig);\n    }\n}\n```\n\n\n## 実行\n\n#### 日時を指定しない場合\napplicaiton.ymlには以下の設定を追加します。\n```yml:application.yml\ntime-travel:\n  specified-time: \n```\n\nアプリケーションを起動します。\nログにはデフォルトのClockを使用するという内容が表示されます。\n```console:log\n2023-03-05 11:34:07.851  INFO 9299 --- [           main] c.e.c.config.ClockConfig                 : Using default clock\n```\n\n`http://localhost:8080/api/datetime`にアクセスします。\nレスポンスには現在日時が表示されます。\n```console:レスポンス\n{\"localDateTime\":\"2023-03-05T11:35:16.674985\",\"localDate\":\"2023-03-05\",\"localTime\":\"11:35:16.675263\"}\n```\n\n#### 日時を指定する場合\napplicaiton.ymlには以下の設定を追加します。\n```yml:application.yml\ntime-travel:\n  specified-time: 2025-01-01T12:00:00.000Z\n```\n\nアプリケーションを起動します。\nログには指定された日時のClockを使用するという内容が表示されます。\n```console:log\n2023-03-05 11:38:07.522  INFO 9373 --- [           main] c.e.c.config.ClockConfig                 : Using custom clock: 2025-01-01T12:00:00.000Z\n```\n\n`http://localhost:8080/api/datetime`にアクセスします。\nレスポンスには指定された日時が表示されます。\n注意が必要なのは、指定した時間はUTCで表示されるのはJSTとなる点です。こちらは各プロジェクト内で統一してください。変更する場合はClockConfigクラスのゾーンを変更してください。\n```console:レスポンス\n{\"localDateTime\":\"2025-01-01T21:00:00\",\"localDate\":\"2025-01-01\",\"localTime\":\"21:00:00\"}\n```\n\n# さいごに\nアプリ内の日時を変更してテストすることが多いと思います。一つの例として参考にしていただけると幸いです。\n他の方法があればぜひご共有ください！\n\n",false,0,"2023-03-05T11:43:31+09:00",null,"5c679fa1d351fc8ef02b",2,[13,16,19,22],{"name":14,"versions":15},"Java",[],{"name":17,"versions":18},"テスト",[],{"name":20,"versions":21},"clock",[],{"name":23,"versions":24},"SpringBoot",[],"Spring Boot内の現在日時を変更する","2023-03-05T11:50:06+09:00","https://qiita.com/y5347M/items/5c679fa1d351fc8ef02b",{"description":29,"facebook_id":30,"followees_count":31,"followers_count":32,"github_login_name":33,"id":33,"items_count":34,"linkedin_id":30,"location":30,"name":33,"organization":30,"permanent_id":35,"profile_image_url":36,"team_only":6,"twitter_screen_name":37,"website_url":38},"バックエンドエンジニアをしています。","",5,1,"y5347M",18,2433961,"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2433961/a4773675e7566e225738c8c15f9fda53e35bd799/large.png?1741427719","mmmm16089306","https://twitter.com/mmmm16089306",4237,{"description":29,"facebook_id":30,"followees_count":31,"followers_count":32,"github_login_name":33,"id":33,"items_count":34,"linkedin_id":30,"location":30,"name":33,"organization":30,"permanent_id":35,"profile_image_url":36,"team_only":6,"twitter_screen_name":37,"website_url":38,"image_monthly_upload_limit":41,"image_monthly_upload_remaining":42},104857600,101432560,1745893161729]