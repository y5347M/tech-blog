[{"data":1,"prerenderedAt":339},["ShallowReactive",2],{"useQiitaArticlesFetcher":3,"useQiitaAuthorizedUser":336},[4,36,60,80,100,113,127,150,172,191,213,227,246,260,274,289,305,320],{"rendered_body":5,"body":6,"coediting":7,"comments_count":8,"created_at":9,"group":10,"id":11,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":12,"tags":13,"title":23,"updated_at":9,"url":24,"user":25,"page_views_count":35,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Cp data-sourcepos=\"1:1-1:164\">\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F799611a5-2283-4b02-aa60-b3245b9aa7ed.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=43b9def9cd8f99603f4d11c0331a3104\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F799611a5-2283-4b02-aa60-b3245b9aa7ed.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=43b9def9cd8f99603f4d11c0331a3104\" alt=\"スクリーンショット 2025-04-20 17.25.33.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F799611a5-2283-4b02-aa60-b3245b9aa7ed.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=811c83d8e9fc1d9f1af63231860b956b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/799611a5-2283-4b02-aa60-b3245b9aa7ed.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"3:1-4:69\">Nuxt3の自前ブログを使って、色々な機能を試して実装していきます。\u003Cbr>\n最初にトースト機能を実装してみたいと思います。\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:36\">↓作成したブログはこちら\u003C/p>\n\u003Cp data-sourcepos=\"8:1-8:51\">\u003Ciframe id=\"qiita-embed-content__3a1684d6c610f1dbb5683b1f9e2e7c75\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__3a1684d6c610f1dbb5683b1f9e2e7c75\" data-content=\"https%3A%2F%2Fqiita.com%2Fy5347M%2Fitems%2Faa279c10af6597ed7a24\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"11:1-11:14\">\n\u003Cspan id=\"動作環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>動作環境\u003C/h1>\n\u003Cul data-sourcepos=\"12:1-14:0\">\n\u003Cli data-sourcepos=\"12:1-12:14\">Nuxt: 3.16.2\u003C/li>\n\u003Cli data-sourcepos=\"13:1-14:0\">@nuxt/ui: 3.0.2\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"15:1-15:14\">\n\u003Cspan id=\"全体構成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%85%A8%E4%BD%93%E6%A7%8B%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>全体構成\u003C/h1>\n\u003Ch2 data-sourcepos=\"17:1-17:9\">\n\u003Cspan id=\"準備\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%BA%96%E5%82%99\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>準備\u003C/h2>\n\u003Ch3 data-sourcepos=\"19:1-19:19\">\n\u003Cspan id=\"1-nuxtuiとは\" class=\"fragment\">\u003C/span>\u003Ca href=\"#1-nuxtui%E3%81%A8%E3%81%AF\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>1. NuxtUIとは\u003C/h3>\n\u003Cp data-sourcepos=\"21:1-21:35\">\u003Ciframe id=\"qiita-embed-content__2b3af8db169e278ce0057b43459350ae\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2b3af8db169e278ce0057b43459350ae\" data-content=\"https%3A%2F%2Fui.nuxt.com%2Fgetting-started\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cblockquote data-sourcepos=\"23:1-23:278\">\n\u003Cp data-sourcepos=\"23:3-23:278\">Nuxt UI は、Reka UI、Tailwind CSS、Tailwind Variants の強みを融合し、洗練された、アクセシブルで高パフォーマンスなユーザーインターフェースを構築するための、他に類を見ないツール群を開発者に提供します。\u003C/p>\n\u003C/blockquote>\n\u003Cp data-sourcepos=\"25:1-25:102\">Nuxtに簡単にUIコンポーネントを組み込めるためのライブラリのことですね。\u003C/p>\n\u003Ch3 data-sourcepos=\"27:1-27:23\">\n\u003Cspan id=\"2-nuxt-uiの導入\" class=\"fragment\">\u003C/span>\u003Ca href=\"#2-nuxt-ui%E3%81%AE%E5%B0%8E%E5%85%A5\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>2. Nuxt UIの導入\u003C/h3>\n\u003Ch4 data-sourcepos=\"29:1-29:38\">\n\u003Cspan id=\"2-1-nuxt-uiのインストール\" class=\"fragment\">\u003C/span>\u003Ca href=\"#2-1-nuxt-ui%E3%81%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>2-1. Nuxt UIのインストール\u003C/h4>\n\u003Cp data-sourcepos=\"30:1-30:93\">プロジェクトのルートディレクトリで以下のコマンドを実行します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"31:1-33:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">npm install @nuxt/ui\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"34:1-34:66\">package.jsonに次のように追加されているはずです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"35:1-42:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">package.json\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n  \u003C/span>\u003Cspan class=\"err\">...\u003C/span>\u003Cspan class=\"w\">\n  \u003C/span>\u003Cspan class=\"nl\">\"dependencies\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"err\">...\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"nl\">\"@nuxt/ui\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"s2\">\"^3.0.2\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"err\">#\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"err\">追加されている\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"err\">...\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch3 data-sourcepos=\"44:1-44:38\">\n\u003Cspan id=\"2-2-nuxtconfigtsに設定追加\" class=\"fragment\">\u003C/span>\u003Ca href=\"#2-2-nuxtconfigts%E3%81%AB%E8%A8%AD%E5%AE%9A%E8%BF%BD%E5%8A%A0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>2-2. nuxt.config.tsに設定追加\u003C/h3>\n\u003Cp data-sourcepos=\"45:1-45:50\">そして次にnuxt.config.tsを編集します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"47:1-51:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">nuxt.config.ts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">export\u003C/span> \u003Cspan class=\"k\">default\u003C/span> \u003Cspan class=\"nf\">defineNuxtConfig\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\n  \u003Cspan class=\"na\">modules\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"s1\">@nuxt/ui\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"p\">],\u003C/span>\n\u003Cspan class=\"p\">});\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch3 data-sourcepos=\"52:1-52:21\">\n\u003Cspan id=\"2-3-cssの編集\" class=\"fragment\">\u003C/span>\u003Ca href=\"#2-3-css%E3%81%AE%E7%B7%A8%E9%9B%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>2-3. CSSの編集\u003C/h3>\n\u003Cp data-sourcepos=\"54:1-54:81\">プロジェクト全体で使用しているcssファイルを指定します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"56:1-61:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">nuxt.config.ts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">export\u003C/span> \u003Cspan class=\"k\">default\u003C/span> \u003Cspan class=\"nf\">defineNuxtConfig\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\n  \u003Cspan class=\"na\">modules\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"s1\">@nuxt/ui\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"p\">],\u003C/span>\n  \u003Cspan class=\"na\">css\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"s1\">~/assets/css/main.css\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"c1\">// 追加\u003C/span>\n\u003Cspan class=\"p\">})\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"63:1-63:84\">そしてそのcssファイルでtailwindとNuxt UIのインポートをします。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"css\" data-sourcepos=\"64:1-67:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">main.css\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">@import\u003C/span> \u003Cspan class=\"s1\">\"tailwindcss\"\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">@import\u003C/span> \u003Cspan class=\"s1\">\"@nuxt/ui\"\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch3 data-sourcepos=\"69:1-69:43\">\n\u003Cspan id=\"2-4-app全体をapp-componentで囲う\" class=\"fragment\">\u003C/span>\u003Ca href=\"#2-4-app%E5%85%A8%E4%BD%93%E3%82%92app-component%E3%81%A7%E5%9B%B2%E3%81%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>2-4. app全体をApp Componentで囲う\u003C/h3>\n\u003Cp data-sourcepos=\"70:1-70:99\">プロジェクト全体でToastやTooltipを使用できるようにするための設定です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"vue\" data-sourcepos=\"72:1-78:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">app.vue\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nt\">&lt;\u003C/span>\u003Cspan class=\"k\">template\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;UApp&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;NuxtPage\u003C/span> \u003Cspan class=\"nt\">/&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;/UApp&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;/\u003C/span>\u003Cspan class=\"k\">template\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"80:1-80:112\">私のプロジェクトではNuxtLayoutを使用しているので、このような実装となりました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"vue\" data-sourcepos=\"81:1-89:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">app.vue\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nt\">&lt;\u003C/span>\u003Cspan class=\"k\">template\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;UApp&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;NuxtLayout&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;NuxtPage\u003C/span> \u003Cspan class=\"nt\">/&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;/NuxtLayout&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;/UApp&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;/\u003C/span>\u003Cspan class=\"k\">template\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"91:1-91:69\">これでトースト機能を実装する準備が整いました。\u003C/p>\n\u003Ch2 data-sourcepos=\"93:1-93:9\">\n\u003Cspan id=\"実装\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A3%85\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実装\u003C/h2>\n\u003Cp data-sourcepos=\"95:1-95:9\">まずは\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"typescript\" data-sourcepos=\"97:1-114:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"o\">&lt;\u003C/span>\u003Cspan class=\"nx\">script\u003C/span> \u003Cspan class=\"nx\">lang\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"dl\">\"\u003C/span>\u003Cspan class=\"s2\">ts\u003C/span>\u003Cspan class=\"dl\">\"\u003C/span> \u003Cspan class=\"nx\">setup\u003C/span>\u003Cspan class=\"o\">&gt;\u003C/span>\n\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"nx\">toast\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"nf\">useToast\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\n\u003Cspan class=\"kd\">function\u003C/span> \u003Cspan class=\"nf\">showToast\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"nx\">props\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"na\">title\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"s1\">ブログにようこそ！\u003C/span>\u003Cspan class=\"dl\">'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n  \u003Cspan class=\"p\">};\u003C/span>\n  \u003Cspan class=\"nx\">toast\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">add\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nx\">props\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"p\">};\u003C/span>\n\n\u003Cspan class=\"c1\">// ページを初期表示したときに呼び出す\u003C/span>\n\u003Cspan class=\"nf\">onMounted\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"o\">=&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"nf\">showToast\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">});\u003C/span>\n\u003Cspan class=\"o\">&lt;\u003C/span>\u003Cspan class=\"sr\">/script\u003C/span>\u003Cspan class=\"err\">&gt;\n\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"116:1-116:66\">まずは\u003Ccode>useToast\u003C/code>関数を使用してtoastを生成します。\u003C/p>\n\u003Cp data-sourcepos=\"118:1-118:41\">\u003Ciframe id=\"qiita-embed-content__e602803f3f632403ff8e4ca1b277604f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e602803f3f632403ff8e4ca1b277604f\" data-content=\"https%3A%2F%2Fui.nuxt.com%2Fcomposables%2Fuse-toast\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"121:1-122:132\">その次にtoastの\u003Ccode>add\u003C/code>関数にオブジェクトを渡します。\u003Cbr>\n他にも細かい制御（アイコンやクローズボタンなど）もできるので、以下を参考にしてください。\u003C/p>\n\u003Cp data-sourcepos=\"124:1-124:36\">\u003Ciframe id=\"qiita-embed-content__501a28f32d5c96614dec1befd8782fef\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__501a28f32d5c96614dec1befd8782fef\" data-content=\"https%3A%2F%2Fui.nuxt.com%2Fcomponents%2Ftoast\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"127:1-128:122\">ブログを表示する際にtoastが表示されるようになりました🎉\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb0c2588c-8de9-48f2-a6f8-4ec3526ab8ad.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f549120d6ec1b51e0d016b441b21a9fc\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb0c2588c-8de9-48f2-a6f8-4ec3526ab8ad.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f549120d6ec1b51e0d016b441b21a9fc\" alt=\"toast.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb0c2588c-8de9-48f2-a6f8-4ec3526ab8ad.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=432d2798c8157fd7c20464a54a116ae9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b0c2588c-8de9-48f2-a6f8-4ec3526ab8ad.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"130:1-130:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"132:1-132:170\">Nuxt UI他にも多くのIconを用意していたり、ColorModeを設定できたりするようなので、少しずつ機能を足していきたいと思います。\u003C/p>\n","![スクリーンショット 2025-04-20 17.25.33.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/799611a5-2283-4b02-aa60-b3245b9aa7ed.png)\n\nNuxt3の自前ブログを使って、色々な機能を試して実装していきます。\n最初にトースト機能を実装してみたいと思います。\n\n↓作成したブログはこちら\n\nhttps://qiita.com/y5347M/items/aa279c10af6597ed7a24\n\n\n# 動作環境\n- Nuxt: 3.16.2\n- @nuxt/ui: 3.0.2\n\n# 全体構成\n\n## 準備\n\n### 1. NuxtUIとは\n\nhttps://ui.nuxt.com/getting-started\n\n> Nuxt UI は、Reka UI、Tailwind CSS、Tailwind Variants の強みを融合し、洗練された、アクセシブルで高パフォーマンスなユーザーインターフェースを構築するための、他に類を見ないツール群を開発者に提供します。\n\nNuxtに簡単にUIコンポーネントを組み込めるためのライブラリのことですね。\n\n### 2. Nuxt UIの導入\n\n#### 2-1. Nuxt UIのインストール\nプロジェクトのルートディレクトリで以下のコマンドを実行します。\n```console\nnpm install @nuxt/ui\n```\npackage.jsonに次のように追加されているはずです。\n```json:package.json\n{\n  ...\n  \"dependencies\": {\n    ...\n    \"@nuxt/ui\": \"^3.0.2\", # 追加されている\n    ...\n```\n\n### 2-2. nuxt.config.tsに設定追加\nそして次にnuxt.config.tsを編集します。\n\n```typescript:nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n});\n```\n### 2-3. CSSの編集\n\nプロジェクト全体で使用しているcssファイルを指定します。\n\n```typescript:nuxt.config.ts\nexport default defineNuxtConfig({\n  modules: ['@nuxt/ui'],\n  css: ['~/assets/css/main.css'] // 追加\n})\n```\n\nそしてそのcssファイルでtailwindとNuxt UIのインポートをします。\n```css:main.css\n@import \"tailwindcss\";\n@import \"@nuxt/ui\";\n```\n\n### 2-4. app全体をApp Componentで囲う\nプロジェクト全体でToastやTooltipを使用できるようにするための設定です。\n\n```vue:app.vue\n\u003Ctemplate>\n  \u003CUApp>\n    \u003CNuxtPage />\n  \u003C/UApp>\n\u003C/template>\n```\n\n私のプロジェクトではNuxtLayoutを使用しているので、このような実装となりました。\n```vue:app.vue\n\u003Ctemplate>\n  \u003CUApp>\n    \u003CNuxtLayout>\n      \u003CNuxtPage />\n    \u003C/NuxtLayout>\n  \u003C/UApp>\n\u003C/template>\n```\n\nこれでトースト機能を実装する準備が整いました。\n\n## 実装\n\nまずは\n\n```typescript\n\u003Cscript lang=\"ts\" setup>\nconst toast = useToast();\n\nfunction showToast() {\n  const props = {\n    title: 'ブログにようこそ！',\n  };\n  toast.add(props);\n};\n\n// ページを初期表示したときに呼び出す\nonMounted(() => {\n  showToast();\n});\n\u003C/script>\n\n```\n\nまずは`useToast`関数を使用してtoastを生成します。\n\nhttps://ui.nuxt.com/composables/use-toast\n\n\nその次にtoastの`add`関数にオブジェクトを渡します。\n他にも細かい制御（アイコンやクローズボタンなど）もできるので、以下を参考にしてください。\n\nhttps://ui.nuxt.com/components/toast\n\n\nブログを表示する際にtoastが表示されるようになりました🎉\n![toast.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b0c2588c-8de9-48f2-a6f8-4ec3526ab8ad.gif)\n\n# さいごに\n\nNuxt UI他にも多くのIconを用意していたり、ColorModeを設定できたりするようなので、少しずつ機能を足していきたいと思います。\n",false,0,"2025-04-20T18:03:06+09:00",null,"bdfd413e7d073473c39d",1,[14,17,20],{"name":15,"versions":16},"TypeScript",[],{"name":18,"versions":19},"Nuxt",[],{"name":21,"versions":22},"Nuxt3",[],"Nuxt3でトースト機能の実装","https://qiita.com/y5347M/items/bdfd413e7d073473c39d",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},"バックエンドエンジニアをしています。","",5,"y5347M",18,2433961,"https://s3-ap-northeast-1.amazonaws.com/qiita-image-store/0/2433961/a4773675e7566e225738c8c15f9fda53e35bd799/large.png?1741427719","mmmm16089306","https://twitter.com/mmmm16089306",138,{"rendered_body":37,"body":38,"coediting":7,"comments_count":8,"created_at":39,"group":10,"id":40,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":8,"tags":41,"title":55,"updated_at":56,"url":57,"user":58,"page_views_count":59,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Cp data-sourcepos=\"1:1-1:137\">\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F85cd718d-95f4-451c-b98e-e7094d0cfecb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5db90532a92e5c2d1efad84aef6b540\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F85cd718d-95f4-451c-b98e-e7094d0cfecb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5db90532a92e5c2d1efad84aef6b540\" alt=\"imageのコピー.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F85cd718d-95f4-451c-b98e-e7094d0cfecb.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=19e026f3a97b709b947a3ff7d82916d0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/85cd718d-95f4-451c-b98e-e7094d0cfecb.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"4:1-5:153\">エンジニアとして、今後は自身のポートフォリオを作って行きたいという思いがありました。\u003Cbr>\nそこでまずは自分専用のブログサイトを作成することで、ポートフォリオの基盤として活用することにしました。\u003C/p>\n\u003Cp data-sourcepos=\"7:1-8:35\">公開したブログはこちらにあります。\u003Cbr>\n\u003Ca href=\"https://y5347m.github.io/tech-blog/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://y5347m.github.io/tech-blog/\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"10:1-11:146\">ブログ記事の管理をするためのDBなどを含めると管理が大変です。\u003Cbr>\nそのため何枚か書き溜めていたQiitaの記事を取得し、自身のブログにも同じ内容で公開するようにしました。\u003C/p>\n\u003Ch1 data-sourcepos=\"13:1-13:14\">\n\u003Cspan id=\"動作環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>動作環境\u003C/h1>\n\u003Cul data-sourcepos=\"14:1-15:0\">\n\u003Cli data-sourcepos=\"14:1-15:0\">Nuxt: 3.15.4\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"16:1-16:14\">\n\u003Cspan id=\"全体構成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%85%A8%E4%BD%93%E6%A7%8B%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>全体構成\u003C/h1>\n\u003Cp data-sourcepos=\"17:1-17:160\">\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F495587e2-8f92-4237-9cb3-b120c7399130.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=42bf88847bbbe4fb597f9ed0f06b58d4\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F495587e2-8f92-4237-9cb3-b120c7399130.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=42bf88847bbbe4fb597f9ed0f06b58d4\" alt=\"MyBlogSystemConfiguration_phase1.drawio (1).png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F495587e2-8f92-4237-9cb3-b120c7399130.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7750a07c258a986a97b045135a39facd 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/495587e2-8f92-4237-9cb3-b120c7399130.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cul data-sourcepos=\"19:1-23:0\">\n\u003Cli data-sourcepos=\"19:1-19:222\">ローカルでNuxt3のブログプロジェクトを作成し、GitHubにpushします。このブログプロジェクトのソースは公開したくなかったので、リポジトリをprivate設定しています\u003C/li>\n\u003Cli data-sourcepos=\"20:1-21:174\">このブログプロジェクトではQiita APIをコールすることで、著者情報と記事情報を取得します\u003Cbr>\nQiita APIからの取得方法と注意点は別途記事を作成しようと思います。ドキュメントは\u003Ca href=\"https://qiita.com/api/v2/docs\">こちら\u003C/a>にあります。\u003C/li>\n\u003Cli data-sourcepos=\"22:1-23:0\">公開したいときにGitHub Actionsを実行することで、GitHub Pages用のリポジトリにpushします。このGitHub Pagesのリポジトリは公開するためにpublic設定としています\u003C/li>\n\u003C/ul>\n\u003Cdiv data-sourcepos=\"24:1-29:3\" class=\"note info\">\n\u003Cspan class=\"fa fa-fw fa-check-circle\">\u003C/span>\u003Cdiv>\n\u003Cp data-sourcepos=\"25:1-25:63\">Qiita APIで情報を取得して公開することについて\u003C/p>\n\u003Cp data-sourcepos=\"27:1-28:44\">収益化しなければ問題ないと記載されているため、今回は問題ないケースだと判断しました。\u003Cbr>\n\u003Ca href=\"https://help.qiita.com/ja/articles/qiita-api\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://help.qiita.com/ja/articles/qiita-api\u003C/a>\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Ch1 data-sourcepos=\"31:1-31:35\">\n\u003Cspan id=\"github-pagesに公開する手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#github-pages%E3%81%AB%E5%85%AC%E9%96%8B%E3%81%99%E3%82%8B%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>GitHub Pagesに公開する手順\u003C/h1>\n\u003Cp data-sourcepos=\"32:1-32:6\">\u003C/p>\n\u003Ch2 data-sourcepos=\"33:1-33:57\">\n\u003Cspan id=\"1-github-pages用の新しいリポジトリを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#1-github-pages%E7%94%A8%E3%81%AE%E6%96%B0%E3%81%97%E3%81%84%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>1. GitHub Pages用の新しいリポジトリを作成\u003C/h2>\n\u003Cp data-sourcepos=\"34:1-35:69\">新しいリポジトリを作成し、公開設定にします。\u003Cbr>\nその際、リポジトリの中身は空で問題ありません。\u003C/p>\n\u003Ch2 data-sourcepos=\"37:1-37:42\">\n\u003Cspan id=\"2-github-pagesリポジトリの設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#2-github-pages%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>2. GitHub Pagesリポジトリの設定\u003C/h2>\n\u003Cp data-sourcepos=\"38:1-39:122\">まず、GitHub Pagesリポジトリの「Pages」セクションに移動します。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F6483e849-7bac-4dec-833a-bd1d4162d165.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1084483fdec51d13ca3208f9b518cbab\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F6483e849-7bac-4dec-833a-bd1d4162d165.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1084483fdec51d13ca3208f9b518cbab\" alt=\"pages.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F6483e849-7bac-4dec-833a-bd1d4162d165.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0fad54d9a498f4bd2c2358e58ae1ba60 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/6483e849-7bac-4dec-833a-bd1d4162d165.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"41:1-43:123\">次に、ソースとして「Deploy from a branch」を選択します。\u003Cbr>\nブランチは「main」を選択します。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb57c5b02-1cf1-4cec-84cd-65c8c47ecc76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7c04e0a13b1fc5ecd3d72a2ddcc43cba\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb57c5b02-1cf1-4cec-84cd-65c8c47ecc76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=7c04e0a13b1fc5ecd3d72a2ddcc43cba\" alt=\"source.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb57c5b02-1cf1-4cec-84cd-65c8c47ecc76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=647f6a842cbbd739c83d569d4778c1e4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b57c5b02-1cf1-4cec-84cd-65c8c47ecc76.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"45:1-45:24\">\n\u003Cspan id=\"3-sshキーを生成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#3-ssh%E3%82%AD%E3%83%BC%E3%82%92%E7%94%9F%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>3. SSHキーを生成\u003C/h2>\n\u003Cp data-sourcepos=\"46:1-47:99\">ローカルコンピュータでSSHキーを生成します。\u003Cbr>\nこのコマンドを実行したディレクトリに公開鍵と秘密鍵が生成されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"48:1-50:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">ssh-keygen -t rsa -b 4096 -C \"github-actions\" -f gh-pages-key -N \"\"\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch2 data-sourcepos=\"52:1-52:54\">\n\u003Cspan id=\"4-公開鍵をgithub-pagesリポジトリに追加\" class=\"fragment\">\u003C/span>\u003Ca href=\"#4-%E5%85%AC%E9%96%8B%E9%8D%B5%E3%82%92github-pages%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E8%BF%BD%E5%8A%A0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>4. 公開鍵をGitHub Pagesリポジトリに追加\u003C/h2>\n\u003Cp data-sourcepos=\"53:1-53:92\">まず、GitHub Pagesリポジトリの「Deploy keys」セクションに移動します。\u003C/p>\n\u003Cp data-sourcepos=\"55:1-55:126\">\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb402b460-01df-4782-9cea-492ffcc59c05.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=797dce88b8373816566e92d4e0a4cfe9\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb402b460-01df-4782-9cea-492ffcc59c05.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=797dce88b8373816566e92d4e0a4cfe9\" alt=\"DeployKey.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb402b460-01df-4782-9cea-492ffcc59c05.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=dc10eff3c50dca8e26067aee3ef7839e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b402b460-01df-4782-9cea-492ffcc59c05.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"57:1-57:73\">\u003Ccode>Add Deploy key\u003C/code>ボタンを押して以下の情報を入力します。\u003C/p>\n\u003Cul data-sourcepos=\"59:1-61:0\">\n\u003Cli data-sourcepos=\"59:1-59:53\">title: GitHub Actions（または任意の名前）\u003C/li>\n\u003Cli data-sourcepos=\"60:1-61:0\">key: 生成した公開鍵の内容を貼り付ける\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"62:1-63:164\">そして、\u003Ccode>Allow write access\u003C/code>にチェックを入れます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F22425044-dce4-483f-8d7f-4774aaffdfc8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=da2233f63598e1e8873eec0790f33602\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F22425044-dce4-483f-8d7f-4774aaffdfc8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=da2233f63598e1e8873eec0790f33602\" alt=\"スクリーンショット 2025-03-08 18.23.52.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F22425044-dce4-483f-8d7f-4774aaffdfc8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=52785d6a6a8923d6d916cbd555b33558 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/22425044-dce4-483f-8d7f-4774aaffdfc8.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"66:1-66:69\">\n\u003Cspan id=\"5-ブログリポジトリにシークレットと変数を追加\" class=\"fragment\">\u003C/span>\u003Ca href=\"#5-%E3%83%96%E3%83%AD%E3%82%B0%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%81%AB%E3%82%B7%E3%83%BC%E3%82%AF%E3%83%AC%E3%83%83%E3%83%88%E3%81%A8%E5%A4%89%E6%95%B0%E3%82%92%E8%BF%BD%E5%8A%A0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>5. ブログリポジトリにシークレットと変数を追加\u003C/h2>\n\u003Cp data-sourcepos=\"67:1-67:44\">以下をGitHub Secretsに追加します。\u003C/p>\n\u003Cul data-sourcepos=\"68:1-70:0\">\n\u003Cli data-sourcepos=\"68:1-68:77\">GH_PAGES_DEPLOY_KEY: 生成された秘密鍵の内容を貼り付けます\u003C/li>\n\u003Cli data-sourcepos=\"69:1-70:0\">QIITA_TOKEN: Qiita APIのシークレット\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"71:1-71:46\">以下をGitHub Variablesに追加します。\u003C/p>\n\u003Cul data-sourcepos=\"72:1-74:0\">\n\u003Cli data-sourcepos=\"72:1-72:80\">BASE_URL: \u003Ccode>/${GitHub Pagesリポジトリの名前}/\u003C/code>（例：\u003Ccode>/tech-blog/\u003C/code>）\u003C/li>\n\u003Cli data-sourcepos=\"73:1-74:0\">GITHUB_PAGES_REPO: GitHub PagesリポジトリのSSH URLを貼り付けます\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"75:1-76:164\">SSH URLはGitHub Pagesリポジトリ側のCodeタブで確認できます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fdfaf8c5c-6627-45d2-b158-76616a01f4ca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fba3fbdf25ab6fb7111f6fab54345a63\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fdfaf8c5c-6627-45d2-b158-76616a01f4ca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fba3fbdf25ab6fb7111f6fab54345a63\" alt=\"スクリーンショット 2025-03-08 18.27.19.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fdfaf8c5c-6627-45d2-b158-76616a01f4ca.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=35b38095ac1a995788c2b39899857074 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/dfaf8c5c-6627-45d2-b158-76616a01f4ca.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cdiv data-sourcepos=\"78:1-83:3\" class=\"note info\">\n\u003Cspan class=\"fa fa-fw fa-check-circle\">\u003C/span>\u003Cdiv>\n\u003Cp data-sourcepos=\"79:1-79:111\">GitHub SecretsとVariablesに変数を登録することで、Actions内で使用することができます。\u003C/p>\n\u003Cp data-sourcepos=\"81:1-82:116\">詳細は以下のページを参照してください。\u003Cbr>\n\u003Ca href=\"https://docs.github.com/ja/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.github.com/ja/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables\u003C/a>\u003C/p>\n\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"85:1-85:86\">\n\u003Cspan id=\"6-ブログリポジトリ側にデプロイするためのgithub-actionsを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#6-%E3%83%96%E3%83%AD%E3%82%B0%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E5%81%B4%E3%81%AB%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%81%99%E3%82%8B%E3%81%9F%E3%82%81%E3%81%AEgithub-actions%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>6. ブログリポジトリ側にデプロイするためのGitHub Actionsを作成\u003C/h2>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"87:1-141:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">deploy.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Deploy to Selected GitHub Pages\u003C/span>\n\n\u003Cspan class=\"na\">on\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">workflow_dispatch\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n\n\u003Cspan class=\"na\">jobs\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">deploy\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n    \u003Cspan class=\"na\">runs-on\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">ubuntu-latest\u003C/span>\n\n    \u003Cspan class=\"na\">steps\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Checkout repository\u003C/span>\n        \u003Cspan class=\"na\">uses\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">actions/checkout@v4\u003C/span>\n        \u003Cspan class=\"na\">with\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n          \u003Cspan class=\"na\">ref\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">${{ github.ref }}\u003C/span> \n\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Setup Node.js\u003C/span>\n        \u003Cspan class=\"na\">uses\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">actions/setup-node@v4\u003C/span>\n        \u003Cspan class=\"na\">with\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n          \u003Cspan class=\"na\">node-version\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"m\">23\u003C/span>\n\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Install dependencies\u003C/span>\n        \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">npm install\u003C/span>\n\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Setup environment\u003C/span>\n        \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"pi\">|\u003C/span>\n          \u003Cspan class=\"s\">echo \"NUXT_QIITA_TOKEN=${{ secrets.QIITA_TOKEN }}\" &gt;&gt; $GITHUB_ENV\u003C/span>\n          \u003Cspan class=\"s\">echo \"NUXT_APP_BASE_URL=${{ vars.BASE_URL }}\" &gt;&gt; $GITHUB_ENV\u003C/span>\n\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Generate static files\u003C/span>\n        \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">npx nuxi generate\u003C/span>\n\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Set SSH Key\u003C/span>\n        \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"pi\">|\u003C/span>\n          \u003Cspan class=\"s\">mkdir -p ~/.ssh\u003C/span>\n          \u003Cspan class=\"s\">echo \"$GH_PAGES_DEPLOY_KEY\" &gt; ~/.ssh/id_rsa\u003C/span>\n          \u003Cspan class=\"s\">REPO=\"${{ vars.REPO_GITHUB_PAGES }}\"\u003C/span>\n          \u003Cspan class=\"s\">chmod 600 ~/.ssh/id_rsa\u003C/span>\n          \u003Cspan class=\"s\">ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts\u003C/span>\n          \u003Cspan class=\"s\">echo \"REPO=$REPO\" &gt;&gt; $GITHUB_ENV\u003C/span>\n        \u003Cspan class=\"na\">env\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n          \u003Cspan class=\"na\">GH_PAGES_DEPLOY_KEY\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">${{ secrets.GH_PAGES_DEPLOY_KEY }}\u003C/span>\n\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Deploy to GitHub Pages\u003C/span>\n        \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"pi\">|\u003C/span>\n          \u003Cspan class=\"s\">git config --global user.name \"github-actions\"\u003C/span>\n          \u003Cspan class=\"s\">git config --global user.email \"github-actions@github.com\"\u003C/span>\n          \u003Cspan class=\"s\">cd .output/public\u003C/span>\n          \u003Cspan class=\"s\">git init\u003C/span>\n          \u003Cspan class=\"s\">git add .\u003C/span>\n          \u003Cspan class=\"s\">git commit -m \"Deploy to GitHub Pages (${{ github.event.inputs.user }})\"\u003C/span>\n          \u003Cspan class=\"s\">git branch -M main\u003C/span>\n          \u003Cspan class=\"s\">git remote add origin $REPO\u003C/span>\n          \u003Cspan class=\"s\">git push -f origin main\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"143:1-143:30\">以下、補足説明です。\u003C/p>\n\u003Cp data-sourcepos=\"145:1-145:51\">ここでは環境変数を設定しています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"146:1-151:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Setup environment\u003C/span>\n        \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"pi\">|\u003C/span>\n          \u003Cspan class=\"s\">echo \"NUXT_QIITA_TOKEN=${{ secrets.QIITA_TOKEN }}\" &gt;&gt; $GITHUB_ENV\u003C/span>\n          \u003Cspan class=\"s\">echo \"NUXT_APP_BASE_URL=${{ vars.BASE_URL }}\" &gt;&gt; $GITHUB_ENV\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cul data-sourcepos=\"152:1-154:0\">\n\u003Cli data-sourcepos=\"152:1-152:124\">\n\u003Ccode>NUXT_QIITA_TOKEN\u003C/code>はNuxt3のプロジェクト内でQiita APIを使用するためのトークンを設定しています\u003C/li>\n\u003Cli data-sourcepos=\"153:1-154:0\">\n\u003Ccode>NUXT_APP_BASE_URL\u003C/code>は\u003Ca href=\"https://nuxt.com/deploy/github-pages\" rel=\"nofollow noopener\" target=\"_blank\">Nuxt公式ドキュメント\u003C/a>に記載がある通り、GitHub Pagesでカスタムドメインを利用しない場合は設定しろ、と記載があります。静的サイトを生成してGitHub Pagesに公開する際、CSSのパスがずれてしまい読み込めないらしく、この変数を設定する必要があります\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"155:1-155:106\">ここでは、SSHを設定してGitHub Pagesリポジトリへpushする前の準備をしています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"156:1-167:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>   \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Set SSH Key\u003C/span>\n        \u003Cspan class=\"s\">run\u003C/span>\u003Cspan class=\"err\">:\u003C/span> \u003Cspan class=\"pi\">|\u003C/span>\n          \u003Cspan class=\"s\">mkdir -p ~/.ssh\u003C/span>\n          \u003Cspan class=\"s\">echo \"$GH_PAGES_DEPLOY_KEY\" &gt; ~/.ssh/id_rsa\u003C/span>\n          \u003Cspan class=\"s\">REPO=\"${{ vars.REPO_GITHUB_PAGES }}\"\u003C/span>\n          \u003Cspan class=\"s\">chmod 600 ~/.ssh/id_rsa\u003C/span>\n          \u003Cspan class=\"s\">ssh-keyscan github.com &gt;&gt; ~/.ssh/known_hosts\u003C/span>\n          \u003Cspan class=\"s\">echo \"REPO=$REPO\" &gt;&gt; $GITHUB_ENV\u003C/span>\n        \u003Cspan class=\"na\">env\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n          \u003Cspan class=\"na\">GH_PAGES_DEPLOY_KEY\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">${{ secrets.GH_PAGES_DEPLOY_KEY }}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch2 data-sourcepos=\"169:1-169:42\">\n\u003Cspan id=\"7-デプロイアクションを実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#7-%E3%83%87%E3%83%97%E3%83%AD%E3%82%A4%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>7. デプロイアクションを実行\u003C/h2>\n\u003Cp data-sourcepos=\"170:1-171:164\">作成したアクションを実行します。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb8a371ad-2646-47b8-a6e8-dac58bf793d6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=22cb6804049e6f9856ba0919850a1937\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb8a371ad-2646-47b8-a6e8-dac58bf793d6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=22cb6804049e6f9856ba0919850a1937\" alt=\"スクリーンショット 2025-03-08 18.30.20.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb8a371ad-2646-47b8-a6e8-dac58bf793d6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e447469f79bd20cc12c3c45816fe74d0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b8a371ad-2646-47b8-a6e8-dac58bf793d6.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"173:1-173:12\">\n\u003Cspan id=\"8-公開\" class=\"fragment\">\u003C/span>\u003Ca href=\"#8-%E5%85%AC%E9%96%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>8. 公開\u003C/h2>\n\u003Cp data-sourcepos=\"174:1-175:164\">GitHub Pages側のactionsが自動的に動きます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F0b5d5701-410f-4b94-8043-824ec0220810.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5434b541f72324a001bd2698ee634f28\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F0b5d5701-410f-4b94-8043-824ec0220810.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5434b541f72324a001bd2698ee634f28\" alt=\"スクリーンショット 2025-03-08 18.41.00.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F0b5d5701-410f-4b94-8043-824ec0220810.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ce548326b57c1de612fea9cf087b3e47 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/0b5d5701-410f-4b94-8043-824ec0220810.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"177:1-177:126\">成功するとURLが表示されているので、アクセスすれば公開されたページが表示されています。\u003C/p>\n\u003Ch1 data-sourcepos=\"179:1-179:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"181:1-183:66\">今回はGitHub Actionsを活用して、最小限の構成でブログを公開する方法を紹介しました。\u003Cbr>\n今後は静的サイトではなく、動的なコンテンツを取り入れてカスタマイズ性を高めたいと考えています。\u003Cbr>\nまた、デザインもより洗練させていく予定です。\u003C/p>\n","![imageのコピー.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/85cd718d-95f4-451c-b98e-e7094d0cfecb.png)\n\n\nエンジニアとして、今後は自身のポートフォリオを作って行きたいという思いがありました。\nそこでまずは自分専用のブログサイトを作成することで、ポートフォリオの基盤として活用することにしました。\n\n公開したブログはこちらにあります。\nhttps://y5347m.github.io/tech-blog/\n\nブログ記事の管理をするためのDBなどを含めると管理が大変です。\nそのため何枚か書き溜めていたQiitaの記事を取得し、自身のブログにも同じ内容で公開するようにしました。\n\n# 動作環境\n- Nuxt: 3.15.4\n\n# 全体構成\n![MyBlogSystemConfiguration_phase1.drawio (1).png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/495587e2-8f92-4237-9cb3-b120c7399130.png)\n\n- ローカルでNuxt3のブログプロジェクトを作成し、GitHubにpushします。このブログプロジェクトのソースは公開したくなかったので、リポジトリをprivate設定しています\n- このブログプロジェクトではQiita APIをコールすることで、著者情報と記事情報を取得します\nQiita APIからの取得方法と注意点は別途記事を作成しようと思います。ドキュメントは[こちら](https://qiita.com/api/v2/docs)にあります。\n- 公開したいときにGitHub Actionsを実行することで、GitHub Pages用のリポジトリにpushします。このGitHub Pagesのリポジトリは公開するためにpublic設定としています\n\n:::note info\nQiita APIで情報を取得して公開することについて\n\n収益化しなければ問題ないと記載されているため、今回は問題ないケースだと判断しました。\nhttps://help.qiita.com/ja/articles/qiita-api\n:::\n\n# GitHub Pagesに公開する手順\n\u003Cbr_ >\n## 1. GitHub Pages用の新しいリポジトリを作成\n新しいリポジトリを作成し、公開設定にします。\nその際、リポジトリの中身は空で問題ありません。\n\n## 2. GitHub Pagesリポジトリの設定\nまず、GitHub Pagesリポジトリの「Pages」セクションに移動します。\n![pages.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/6483e849-7bac-4dec-833a-bd1d4162d165.png)\n\n次に、ソースとして「Deploy from a branch」を選択します。\nブランチは「main」を選択します。\n![source.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b57c5b02-1cf1-4cec-84cd-65c8c47ecc76.png)\n\n## 3. SSHキーを生成\nローカルコンピュータでSSHキーを生成します。\nこのコマンドを実行したディレクトリに公開鍵と秘密鍵が生成されます。\n```console\nssh-keygen -t rsa -b 4096 -C \"github-actions\" -f gh-pages-key -N \"\"\n```\n\n## 4. 公開鍵をGitHub Pagesリポジトリに追加\nまず、GitHub Pagesリポジトリの「Deploy keys」セクションに移動します。\n\n![DeployKey.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b402b460-01df-4782-9cea-492ffcc59c05.png)\n\n`Add Deploy key`ボタンを押して以下の情報を入力します。\n\n- title: GitHub Actions（または任意の名前）\n- key: 生成した公開鍵の内容を貼り付ける\n\nそして、`Allow write access`にチェックを入れます。\n![スクリーンショット 2025-03-08 18.23.52.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/22425044-dce4-483f-8d7f-4774aaffdfc8.png)\n\n\n## 5. ブログリポジトリにシークレットと変数を追加\n以下をGitHub Secretsに追加します。\n- GH_PAGES_DEPLOY_KEY: 生成された秘密鍵の内容を貼り付けます\n- QIITA_TOKEN: Qiita APIのシークレット\n\n以下をGitHub Variablesに追加します。\n- BASE_URL: `/${GitHub Pagesリポジトリの名前}/`（例：`/tech-blog/`）\n- GITHUB_PAGES_REPO: GitHub PagesリポジトリのSSH URLを貼り付けます\n\nSSH URLはGitHub Pagesリポジトリ側のCodeタブで確認できます。\n![スクリーンショット 2025-03-08 18.27.19.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/dfaf8c5c-6627-45d2-b158-76616a01f4ca.png)\n\n:::note info\nGitHub SecretsとVariablesに変数を登録することで、Actions内で使用することができます。\n\n詳細は以下のページを参照してください。\nhttps://docs.github.com/ja/actions/writing-workflows/choosing-what-your-workflow-does/store-information-in-variables\n:::\n\n## 6. ブログリポジトリ側にデプロイするためのGitHub Actionsを作成\n\n```yml:deploy.yml\nname: Deploy to Selected GitHub Pages\n\non:\n  workflow_dispatch:\n\njobs:\n  deploy:\n    runs-on: ubuntu-latest\n\n    steps:\n      - name: Checkout repository\n        uses: actions/checkout@v4\n        with:\n          ref: ${{ github.ref }} \n\n      - name: Setup Node.js\n        uses: actions/setup-node@v4\n        with:\n          node-version: 23\n\n      - name: Install dependencies\n        run: npm install\n\n      - name: Setup environment\n        run: |\n          echo \"NUXT_QIITA_TOKEN=${{ secrets.QIITA_TOKEN }}\" >> $GITHUB_ENV\n          echo \"NUXT_APP_BASE_URL=${{ vars.BASE_URL }}\" >> $GITHUB_ENV\n\n      - name: Generate static files\n        run: npx nuxi generate\n\n      - name: Set SSH Key\n        run: |\n          mkdir -p ~/.ssh\n          echo \"$GH_PAGES_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          REPO=\"${{ vars.REPO_GITHUB_PAGES }}\"\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          echo \"REPO=$REPO\" >> $GITHUB_ENV\n        env:\n          GH_PAGES_DEPLOY_KEY: ${{ secrets.GH_PAGES_DEPLOY_KEY }}\n\n      - name: Deploy to GitHub Pages\n        run: |\n          git config --global user.name \"github-actions\"\n          git config --global user.email \"github-actions@github.com\"\n          cd .output/public\n          git init\n          git add .\n          git commit -m \"Deploy to GitHub Pages (${{ github.event.inputs.user }})\"\n          git branch -M main\n          git remote add origin $REPO\n          git push -f origin main\n```\n\n以下、補足説明です。\n\nここでは環境変数を設定しています。\n```yml\n      - name: Setup environment\n        run: |\n          echo \"NUXT_QIITA_TOKEN=${{ secrets.QIITA_TOKEN }}\" >> $GITHUB_ENV\n          echo \"NUXT_APP_BASE_URL=${{ vars.BASE_URL }}\" >> $GITHUB_ENV\n```\n- `NUXT_QIITA_TOKEN`はNuxt3のプロジェクト内でQiita APIを使用するためのトークンを設定しています\n- `NUXT_APP_BASE_URL`は[Nuxt公式ドキュメント](https://nuxt.com/deploy/github-pages)に記載がある通り、GitHub Pagesでカスタムドメインを利用しない場合は設定しろ、と記載があります。静的サイトを生成してGitHub Pagesに公開する際、CSSのパスがずれてしまい読み込めないらしく、この変数を設定する必要があります\n\nここでは、SSHを設定してGitHub Pagesリポジトリへpushする前の準備をしています。\n```yml\n   - name: Set SSH Key\n        run: |\n          mkdir -p ~/.ssh\n          echo \"$GH_PAGES_DEPLOY_KEY\" > ~/.ssh/id_rsa\n          REPO=\"${{ vars.REPO_GITHUB_PAGES }}\"\n          chmod 600 ~/.ssh/id_rsa\n          ssh-keyscan github.com >> ~/.ssh/known_hosts\n          echo \"REPO=$REPO\" >> $GITHUB_ENV\n        env:\n          GH_PAGES_DEPLOY_KEY: ${{ secrets.GH_PAGES_DEPLOY_KEY }}\n```\n\n## 7. デプロイアクションを実行\n作成したアクションを実行します。\n![スクリーンショット 2025-03-08 18.30.20.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b8a371ad-2646-47b8-a6e8-dac58bf793d6.png)\n\n## 8. 公開\nGitHub Pages側のactionsが自動的に動きます。\n![スクリーンショット 2025-03-08 18.41.00.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/0b5d5701-410f-4b94-8043-824ec0220810.png)\n\n成功するとURLが表示されているので、アクセスすれば公開されたページが表示されています。\n\n# さいごに\n\n今回はGitHub Actionsを活用して、最小限の構成でブログを公開する方法を紹介しました。\n今後は静的サイトではなく、動的なコンテンツを取り入れてカスタマイズ性を高めたいと考えています。\nまた、デザインもより洗練させていく予定です。\n\n","2025-03-08T18:53:03+09:00","aa279c10af6597ed7a24",[42,45,47,50,52],{"name":43,"versions":44},"GitHub",[],{"name":15,"versions":46},[],{"name":48,"versions":49},"GithubPages",[],{"name":18,"versions":51},[],{"name":53,"versions":54},"GitHubActions",[],"GitHub PagesにNuxt3で作成したブログを公開しました","2025-03-08T19:02:17+09:00","https://qiita.com/y5347M/items/aa279c10af6597ed7a24",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},354,{"rendered_body":61,"body":62,"coediting":7,"comments_count":8,"created_at":63,"group":10,"id":64,"likes_count":65,"private":7,"reactions_count":8,"stocks_count":28,"tags":66,"title":75,"updated_at":76,"url":77,"user":78,"page_views_count":79,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:194\">遊びや旅行等の予定でPCは持っていきたくない、けど暇を持て余したときに開発したくなるかも…そんなことがきっとあるかもしれません（？）\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:202\">そんなとき、GithubのCodespacesを使用すればブラウザだけで開発・動作確認ができるようです。一連の流れをブラウザだけでできないか試してみました。\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:148\">以前作成したflutter公式が公開しているアニメーションのチュートリアルを題材に実行してみたいと思います。\u003C/p>\n\u003Cp data-sourcepos=\"8:1-8:45\">\u003Ciframe id=\"qiita-embed-content__d12f2a61cd95a56212d01cb14c0b4359\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__d12f2a61cd95a56212d01cb14c0b4359\" data-content=\"https%3A%2F%2Fgithub.com%2Fy5347M%2Fanimations_tutorial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"10:1-10:14\">\n\u003Cspan id=\"動作環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%8B%95%E4%BD%9C%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>動作環境\u003C/h1>\n\u003Cul data-sourcepos=\"11:1-13:0\">\n\u003Cli data-sourcepos=\"11:1-11:38\">iPad Pro 11 インチ (第 2 世代)\u003C/li>\n\u003Cli data-sourcepos=\"12:1-13:0\">Google Chromeアプリ\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"14:1-14:23\">\n\u003Cspan id=\"試してみたこと\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F%E3%81%93%E3%81%A8\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>試してみたこと\u003C/h1>\n\u003Cp data-sourcepos=\"15:1-15:33\">順を追って記載します。\u003C/p>\n\u003Ch2 data-sourcepos=\"17:1-17:31\">\n\u003Cspan id=\"githubのcodespacesを開く\" class=\"fragment\">\u003C/span>\u003Ca href=\"#github%E3%81%AEcodespaces%E3%82%92%E9%96%8B%E3%81%8F\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>githubのCodespacesを開く\u003C/h2>\n\u003Cp data-sourcepos=\"18:1-19:139\">githubのリポジトリのCodeボタンの下にあるCodespacesタブを開きます。そこに＋ボタンがあるので押すと、ブラウザにvscodeのような画面が立ち上がります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb9b7b7a7-bd12-e57d-12ed-f363051bc460.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4f6cf938be48b65159a28a6ffe19abe2\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb9b7b7a7-bd12-e57d-12ed-f363051bc460.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=4f6cf938be48b65159a28a6ffe19abe2\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb9b7b7a7-bd12-e57d-12ed-f363051bc460.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b5e0b189f8792fb98856e505c1105789 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b9b7b7a7-bd12-e57d-12ed-f363051bc460.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F12850e86-19f5-07e9-4b9b-eedf82abc56a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a708beef12f73b829d338d51694881b9\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F12850e86-19f5-07e9-4b9b-eedf82abc56a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a708beef12f73b829d338d51694881b9\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F12850e86-19f5-07e9-4b9b-eedf82abc56a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=731a66376f3ea8f0a1dbd521d944eb63 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/12850e86-19f5-07e9-4b9b-eedf82abc56a.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"23:1-23:27\">\n\u003Cspan id=\"ターミナルを開く\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%BF%E3%83%BC%E3%83%9F%E3%83%8A%E3%83%AB%E3%82%92%E9%96%8B%E3%81%8F\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ターミナルを開く\u003C/h2>\n\u003Cp data-sourcepos=\"24:1-25:139\">左のハンバーガーメニューにあります。ターミナルを新しく表示することができます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff46d53a5-dd20-7784-bd00-534adaf994d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8db5427c6f4db5c9392c234d45905967\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff46d53a5-dd20-7784-bd00-534adaf994d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=8db5427c6f4db5c9392c234d45905967\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff46d53a5-dd20-7784-bd00-534adaf994d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d35ec8b3ef03743eab33e1d30ff1f612 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/f46d53a5-dd20-7784-bd00-534adaf994d1.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"27:1-27:42\">\n\u003Cspan id=\"拡張機能をあらかじめ入れる\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%82%92%E3%81%82%E3%82%89%E3%81%8B%E3%81%98%E3%82%81%E5%85%A5%E3%82%8C%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>拡張機能をあらかじめ入れる\u003C/h2>\n\u003Cp data-sourcepos=\"28:1-28:205\">プロジェクトのルートディレクトリの直下に\u003Ccode>.devcontainer\u003C/code>ディレクトリを作成します。そこに\u003Ccode>devcontainer.json\u003C/code>ファイルを作成し、以下のように記載します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"29:1-40:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">devcontainer.json\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n\t\u003C/span>\u003Cspan class=\"nl\">\"customizations\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n        \u003C/span>\u003Cspan class=\"nl\">\"vscode\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"nl\">\"extensions\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"Dart-Code.dart-code\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"Dart-Code.flutter\"\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"p\">]\u003C/span>\u003Cspan class=\"w\">\n        \u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"42:1-45:139\">再度Codespacesを開き直します。\u003Cbr>\n左下のCodespacesボタンを押し、その後中央上に表示されるメニューの\u003Ccode>Rebuild Container\u003C/code>を押します。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9577d1cd-d9fb-5ab9-e7ad-c2943f540c19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98194976be9bfc464050a7aba08a43f2\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9577d1cd-d9fb-5ab9-e7ad-c2943f540c19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=98194976be9bfc464050a7aba08a43f2\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9577d1cd-d9fb-5ab9-e7ad-c2943f540c19.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=956cb46723fd5ae252de76c84b456a4a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/9577d1cd-d9fb-5ab9-e7ad-c2943f540c19.png\" loading=\"lazy\">\u003C/a>\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1b405463-6ff7-1c5a-82c0-e817e8b51488.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fde5d938bec03f3925479ede71707521\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1b405463-6ff7-1c5a-82c0-e817e8b51488.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fde5d938bec03f3925479ede71707521\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1b405463-6ff7-1c5a-82c0-e817e8b51488.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0a2929b0e72ed2f370b5834504e9843f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1b405463-6ff7-1c5a-82c0-e817e8b51488.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"47:1-48:139\">すると、あらかじめ拡張機能がインストールされています。Japanese Language Packもなぜかインストールされていましたが、理由は検証・調査してないです。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F0bf69870-c979-b394-d83f-906a0c749788.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=17b6b7fca676eb5e2d4bb3be183f508d\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F0bf69870-c979-b394-d83f-906a0c749788.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=17b6b7fca676eb5e2d4bb3be183f508d\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F0bf69870-c979-b394-d83f-906a0c749788.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=91b450d5d3037cd2d1e5f4965037ed9f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/0bf69870-c979-b394-d83f-906a0c749788.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"50:1-50:25\">\n\u003Cspan id=\"flutterを実行する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#flutter%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>flutterを実行する\u003C/h2>\n\u003Cp data-sourcepos=\"51:1-51:91\">残念ながら\u003Ccode>flutter run\u003C/code>だけでは以下のようなエラーが表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"52:1-60:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ターミナル\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"gp\">root@codespaces-73d63d:/workspaces/animations_tutorial#\u003C/span>\u003Cspan class=\"w\"> \u003C/span>flutter run\n\u003Cspan class=\"go\">Launching lib/main.dart on Linux in debug mode...\nCMake Error: CMake was unable to find a build program corresponding to \"Ninja\".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.\nCMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage\nBuilding Linux application...                                           \nthe Dart compiler exited unexpectedly.\nException: Unable to generate build files\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"62:1-62:45\">以下のサイトを参考にしました。\u003C/p>\n\u003Cp data-sourcepos=\"64:1-64:95\">\u003Ciframe id=\"qiita-embed-content__e784ddd7262b6b2680fadd6444b7d5c7\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__e784ddd7262b6b2680fadd6444b7d5c7\" data-content=\"https%3A%2F%2Fmedium.com%2Fflutter-community%2Fgithub-codespaces-code-on-the-go-with-flutter-a6b550b3342b\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"66:1-66:79\">まずは\u003Ccode>devcontainer.json\u003C/code>ファイルを以下のように記載します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"67:1-82:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">devconainer.json\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"err\">//\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"err\">追記から\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"nl\">\"image\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"s2\">\"ghcr.io/cirruslabs/flutter:3.10.0-1.3.pre\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"nl\">\"forwardPorts\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"mi\">3000\u003C/span>\u003Cspan class=\"p\">],\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"err\">//\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"err\">追記ここまで\u003C/span>\u003Cspan class=\"w\">\n\t\u003C/span>\u003Cspan class=\"nl\">\"customizations\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n        \u003C/span>\u003Cspan class=\"nl\">\"vscode\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"nl\">\"extensions\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"Dart-Code.dart-code\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"Dart-Code.flutter\"\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"p\">]\u003C/span>\u003Cspan class=\"w\">\n        \u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"84:1-84:100\">使用するイメージは\u003Ca href=\"https://github.com/cirruslabs/docker-images-flutter\" rel=\"nofollow noopener\" target=\"_blank\">こちら\u003C/a>です。\u003C/p>\n\u003Cp data-sourcepos=\"86:1-86:51\">\u003Ciframe id=\"qiita-embed-content__f2ff668b65b9864ebb1d77c9ee014fbf\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__f2ff668b65b9864ebb1d77c9ee014fbf\" data-content=\"https%3A%2F%2Fgithub.com%2Fcirruslabs%2Fdocker-images-flutter\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"88:1-88:57\">ターミナルで次のコマンドを入力します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"89:1-91:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ターミナル\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">flutter run --release -d web-server --web-hostname=0.0.0.0 --web-port=3000\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"93:1-94:139\">するとポートタブにポート：3000でflutterアプリが動作されていることが表示されます。ブラウザマークを押すとブラウザでflutterアプリが表示されます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F400b59bd-1949-db7d-b675-b42641a1b020.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0c09bc8f4b9fdcfe02072bc258c4111\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F400b59bd-1949-db7d-b675-b42641a1b020.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b0c09bc8f4b9fdcfe02072bc258c4111\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F400b59bd-1949-db7d-b675-b42641a1b020.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=759a3a69208826834e335933b8162dc8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/400b59bd-1949-db7d-b675-b42641a1b020.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5cb69788-208d-8491-d4cb-74b83a20483d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=68f9a4795ec7c413a847c36f396f953e\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5cb69788-208d-8491-d4cb-74b83a20483d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=68f9a4795ec7c413a847c36f396f953e\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5cb69788-208d-8491-d4cb-74b83a20483d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e6392c1692c77b02150e3f918c9a83e2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5cb69788-208d-8491-d4cb-74b83a20483d.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"98:1-98:30\">\n\u003Cspan id=\"内容を変更してみる\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%86%85%E5%AE%B9%E3%82%92%E5%A4%89%E6%9B%B4%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>内容を変更してみる\u003C/h2>\n\u003Cp data-sourcepos=\"99:1-99:142\">\u003Ccode>lib/main.dart\u003C/code>ファイルを編集し、flutterロゴの背景をピンク色にしてみました。（正直なんでもよいです。）\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"100:1-108:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">lib/main.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n          \u003Cspan class=\"nl\">decoration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">BoxDecoration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">color:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">pink\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"c1\">// この行を追加\u003C/span>\n          \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"p\">),\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"110:1-111:139\">再度、コマンドを入力して実行してみます。反映まで少し時間がかかるので、待ちます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3659d25e-1880-56c3-9271-883494432214.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=80be420f042f5968b862dab572a79f26\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3659d25e-1880-56c3-9271-883494432214.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=80be420f042f5968b862dab572a79f26\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3659d25e-1880-56c3-9271-883494432214.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ff477e832bf9840792551446720885c7 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3659d25e-1880-56c3-9271-883494432214.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"113:1-113:51\">ロゴの背景がピンク色になりました。\u003C/p>\n\u003Ch2 data-sourcepos=\"115:1-115:27\">\n\u003Cspan id=\"コミットしてみる\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%9F%E3%83%83%E3%83%88%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コミットしてみる\u003C/h2>\n\u003Cp data-sourcepos=\"116:1-118:69\">\u003Ccode>git add .\u003C/code>からの\u003Ccode>git commit -m \"${コメント}\"\u003C/code>でコミットしてみました。\u003Cbr>\n一つ前のコミットは私ですが、最新は謎の\u003Ccode>Cirrus CI\u003C/code>という人になっていました…（利用したdocker imageリポジトリ所有者だと思われます。）\u003Cbr>\n怖いので、この後このコミットを取り消しました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"119:1-132:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ターミナル\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"gp\">root@codespaces-663b73:/workspaces/animations_tutorial#\u003C/span>\u003Cspan class=\"w\"> \u003C/span>git log\n\u003Cspan class=\"gp\">commit c94c09e787437bf9a0c2c548244c50fd8cb78843 (HEAD -&gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>main, origin/main, origin/HEAD\u003Cspan class=\"o\">)\u003C/span>\n\u003Cspan class=\"gp\">Author: Cirrus CI &lt;support@cirruslabs.org&gt;\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003Cspan class=\"go\">Date:   Sun May 7 07:02:04 2023 +0000\n\n    fix: color\n\ncommit 330118f07b24bbe4f33b673acf7d1effd49535b8\n\u003C/span>\u003Cspan class=\"gp\">Author: y5347M &lt;81342785+y5347M@users.noreply.github.com&gt;\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003Cspan class=\"go\">Date:   Sun May 7 06:42:03 2023 +0000\n\n    fix: change size\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"134:1-135:139\">ただgithubのcontributor上は私だけなので問題なさそうでしょうか。実際に企業でCodespacesを利用する場合は調査してから利用する方が賢明なようです。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F7d2b56bc-a77e-c0ba-d4ad-ffa35bf0771d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e8b11fc9d5922a7b9b919e81fb6a47c0\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F7d2b56bc-a77e-c0ba-d4ad-ffa35bf0771d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e8b11fc9d5922a7b9b919e81fb6a47c0\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F7d2b56bc-a77e-c0ba-d4ad-ffa35bf0771d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2aa55108c7709d1b0835cd17168d2aab 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/7d2b56bc-a77e-c0ba-d4ad-ffa35bf0771d.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"137:1-137:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"138:1-139:190\">ちょっと外出先で暇を潰したい、という場合にとても有効なようです。また開発環境を統一したいなど、いろいろなシーンでも利用できそうです。\u003Cbr>\nただやはりローカルで開発するほうが修正と動作確認は早そうですし、Android/iPhone等のエミュレーターを使うならPCですね。今後に期待です。\u003C/p>\n","# 前提\n遊びや旅行等の予定でPCは持っていきたくない、けど暇を持て余したときに開発したくなるかも…そんなことがきっとあるかもしれません（？）\n\nそんなとき、GithubのCodespacesを使用すればブラウザだけで開発・動作確認ができるようです。一連の流れをブラウザだけでできないか試してみました。\n\n以前作成したflutter公式が公開しているアニメーションのチュートリアルを題材に実行してみたいと思います。\n\nhttps://github.com/y5347M/animations_tutorial\n\n# 動作環境\n- iPad Pro 11 インチ (第 2 世代)\n- Google Chromeアプリ\n\n# 試してみたこと\n順を追って記載します。\n\n## githubのCodespacesを開く\ngithubのリポジトリのCodeボタンの下にあるCodespacesタブを開きます。そこに＋ボタンがあるので押すと、ブラウザにvscodeのような画面が立ち上がります。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b9b7b7a7-bd12-e57d-12ed-f363051bc460.png\">\n\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/12850e86-19f5-07e9-4b9b-eedf82abc56a.png\">\n\n## ターミナルを開く\n左のハンバーガーメニューにあります。ターミナルを新しく表示することができます。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/f46d53a5-dd20-7784-bd00-534adaf994d1.png\">\n\n## 拡張機能をあらかじめ入れる\nプロジェクトのルートディレクトリの直下に`.devcontainer`ディレクトリを作成します。そこに`devcontainer.json`ファイルを作成し、以下のように記載します。\n```json:devcontainer.json\n{\n\t\"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"Dart-Code.dart-code\",\n                \"Dart-Code.flutter\"\n            ]\n        }\n    }\n}\n```\n\n再度Codespacesを開き直します。\n左下のCodespacesボタンを押し、その後中央上に表示されるメニューの`Rebuild Container`を押します。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/9577d1cd-d9fb-5ab9-e7ad-c2943f540c19.png\">\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1b405463-6ff7-1c5a-82c0-e817e8b51488.png\">\n\nすると、あらかじめ拡張機能がインストールされています。Japanese Language Packもなぜかインストールされていましたが、理由は検証・調査してないです。\n\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/0bf69870-c979-b394-d83f-906a0c749788.png\">\n\n## flutterを実行する\n残念ながら`flutter run`だけでは以下のようなエラーが表示されます。\n```console:ターミナル\nroot@codespaces-73d63d:/workspaces/animations_tutorial# flutter run\nLaunching lib/main.dart on Linux in debug mode...\nCMake Error: CMake was unable to find a build program corresponding to \"Ninja\".  CMAKE_MAKE_PROGRAM is not set.  You probably need to select a different build tool.\nCMake Error: CMAKE_CXX_COMPILER not set, after EnableLanguage\nBuilding Linux application...                                           \nthe Dart compiler exited unexpectedly.\nException: Unable to generate build files\n```\n\n以下のサイトを参考にしました。\n\nhttps://medium.com/flutter-community/github-codespaces-code-on-the-go-with-flutter-a6b550b3342b\n\nまずは`devcontainer.json`ファイルを以下のように記載します。\n```json:devconainer.json\n{\n    // 追記から\n    \"image\": \"ghcr.io/cirruslabs/flutter:3.10.0-1.3.pre\",\n    \"forwardPorts\": [3000],\n    // 追記ここまで\n\t\"customizations\": {\n        \"vscode\": {\n            \"extensions\": [\n                \"Dart-Code.dart-code\",\n                \"Dart-Code.flutter\"\n            ]\n        }\n    }\n}\n```\n\n使用するイメージは[こちら](https://github.com/cirruslabs/docker-images-flutter)です。\n\nhttps://github.com/cirruslabs/docker-images-flutter\n\nターミナルで次のコマンドを入力します。\n```console:ターミナル\nflutter run --release -d web-server --web-hostname=0.0.0.0 --web-port=3000\n```\n\nするとポートタブにポート：3000でflutterアプリが動作されていることが表示されます。ブラウザマークを押すとブラウザでflutterアプリが表示されます。\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/400b59bd-1949-db7d-b675-b42641a1b020.png\">\n\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5cb69788-208d-8491-d4cb-74b83a20483d.png\">\n\n## 内容を変更してみる\n`lib/main.dart`ファイルを編集し、flutterロゴの背景をピンク色にしてみました。（正直なんでもよいです。）\n```dart:lib/main.dart\nchild: Container(\n          decoration: const BoxDecoration(color: Colors.pink), // この行を追加\n          margin: const EdgeInsets.symmetric(vertical: 10),\n          height: _sizeTween.evaluate(animation),\n          width: _sizeTween.evaluate(animation),\n          child: const FlutterLogo(),\n        ),\n```\n\n再度、コマンドを入力して実行してみます。反映まで少し時間がかかるので、待ちます。\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3659d25e-1880-56c3-9271-883494432214.png\">\n\nロゴの背景がピンク色になりました。\n\n## コミットしてみる\n`git add .`からの`git commit -m \"${コメント}\"`でコミットしてみました。\n一つ前のコミットは私ですが、最新は謎の`Cirrus CI`という人になっていました…（利用したdocker imageリポジトリ所有者だと思われます。）\n怖いので、この後このコミットを取り消しました。\n```console:ターミナル\nroot@codespaces-663b73:/workspaces/animations_tutorial# git log\ncommit c94c09e787437bf9a0c2c548244c50fd8cb78843 (HEAD -> main, origin/main, origin/HEAD)\nAuthor: Cirrus CI \u003Csupport@cirruslabs.org>\nDate:   Sun May 7 07:02:04 2023 +0000\n\n    fix: color\n\ncommit 330118f07b24bbe4f33b673acf7d1effd49535b8\nAuthor: y5347M \u003C81342785+y5347M@users.noreply.github.com>\nDate:   Sun May 7 06:42:03 2023 +0000\n\n    fix: change size\n```\n\nただgithubのcontributor上は私だけなので問題なさそうでしょうか。実際に企業でCodespacesを利用する場合は調査してから利用する方が賢明なようです。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/7d2b56bc-a77e-c0ba-d4ad-ffa35bf0771d.png\">\n\n# さいごに\nちょっと外出先で暇を潰したい、という場合にとても有効なようです。また開発環境を統一したいなど、いろいろなシーンでも利用できそうです。\nただやはりローカルで開発するほうが修正と動作確認は早そうですし、Android/iPhone等のエミュレーターを使うならPCですね。今後に期待です。\n","2023-05-07T20:19:21+09:00","82cb115231653b8b4887",2,[67,69,72],{"name":43,"versions":68},[],{"name":70,"versions":71},"Flutter",[],{"name":73,"versions":74},"Codespaces",[],"FlutterをiPadだけで開発したい！","2023-05-07T22:42:08+09:00","https://qiita.com/y5347M/items/82cb115231653b8b4887",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},3954,{"rendered_body":81,"body":82,"coediting":7,"comments_count":8,"created_at":83,"group":10,"id":84,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":8,"tags":85,"title":95,"updated_at":96,"url":97,"user":98,"page_views_count":99,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-4:89\">mysqlのテーブル定義を変えたいけど影響が大きくすぐには難しいという課題がありました。\u003Cbr>\nそのため別テーブルを作成しておいてデータは自動で同期しておきたい、というときにトリガーを使用する方法を見つけたので検証します。\u003Cbr>\nAWSのRDSを使用しているので、mysqlのバージョンは5.7を使用します。\u003C/p>\n\u003Ch1 data-sourcepos=\"6:1-6:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"7:1-9:0\">\n\u003Cli data-sourcepos=\"7:1-7:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"8:1-9:0\">mysql: 5.7\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"10:1-10:8\">\n\u003Cspan id=\"準備\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%BA%96%E5%82%99\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>準備\u003C/h1>\n\u003Ch2 data-sourcepos=\"12:1-12:38\">\n\u003Cspan id=\"docker-composeymlでmysqlを準備\" class=\"fragment\">\u003C/span>\u003Ca href=\"#docker-composeyml%E3%81%A7mysql%E3%82%92%E6%BA%96%E5%82%99\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>docker-compose.ymlでmysqlを準備\u003C/h2>\n\u003Cp data-sourcepos=\"14:1-14:77\">以下のようにdocker-compose.ymlを作成してmysqlを用意します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"15:1-29:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">docker-compose.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">version\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s1\">'\u003C/span>\u003Cspan class=\"s\">3.8'\u003C/span>\n\n\u003Cspan class=\"na\">services\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">db\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n    \u003Cspan class=\"na\">image\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">mysql:5.7\u003C/span>\n    \u003Cspan class=\"na\">container_name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">mysql\u003C/span>\n    \u003Cspan class=\"na\">environment\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n      \u003Cspan class=\"na\">MYSQL_ROOT_PASSWORD\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">password\u003C/span>\n      \u003Cspan class=\"na\">MYSQL_DATABASE\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">sample_db\u003C/span>\n      \u003Cspan class=\"na\">MYSQL_USER\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">user\u003C/span>\n      \u003Cspan class=\"na\">MYSQL_PASSWORD\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">password\u003C/span>\n    \u003Cspan class=\"na\">ports\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s\">3306:3306\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"31:1-31:30\">\n\u003Cspan id=\"データベースに接続\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E3%83%99%E3%83%BC%E3%82%B9%E3%81%AB%E6%8E%A5%E7%B6%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>データベースに接続\u003C/h2>\n\u003Cp data-sourcepos=\"32:1-32:85\">私はdbeaverというツールを用いてデータベースに接続しました。\u003C/p>\n\u003Cp data-sourcepos=\"35:1-35:19\">\u003Ciframe id=\"qiita-embed-content__99415adfc6386f85b8a37088a29e255b\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__99415adfc6386f85b8a37088a29e255b\" data-content=\"https%3A%2F%2Fdbeaver.io%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"37:1-38:139\">こちらの情報で接続することができます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fa67ba970-88aa-924e-aabb-07107df3fd9d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=609b5a3c7b5d0fb1fd1176797942adfd\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fa67ba970-88aa-924e-aabb-07107df3fd9d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=609b5a3c7b5d0fb1fd1176797942adfd\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fa67ba970-88aa-924e-aabb-07107df3fd9d.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c454081564789bcfb6b7dd8d86e65fc4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/a67ba970-88aa-924e-aabb-07107df3fd9d.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"40:1-40:24\">\n\u003Cspan id=\"テーブルを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%83%BC%E3%83%96%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テーブルを作成\u003C/h2>\n\u003Cp data-sourcepos=\"41:1-42:200\">データコピー元のテーブル\u003Ccode>origin_table\u003C/code>とコピー先のテーブル\u003Ccode>copied_table\u003C/code>を作成します。\u003Cbr>\n\u003Ccode>origin_table.num_data\u003C/code>カラムに入る数字を\u003Ccode>copied_table.varchar_data\u003C/code>カラムへコピーしますが、そのとき数字を文字列に変換するようにトリガーで設定します。\u003C/p>\n\u003Cp data-sourcepos=\"44:1-44:62\">（IDのみ大文字になってしまってました…。）\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"sql\" data-sourcepos=\"46:1-59:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">origin_table\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">CREATE\u003C/span> \u003Cspan class=\"k\">TABLE\u003C/span> \u003Cspan class=\"n\">sample_db\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">origin_table\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\n\t\u003Cspan class=\"n\">ID\u003C/span> \u003Cspan class=\"nb\">BIGINT\u003C/span> \u003Cspan class=\"n\">auto_increment\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span> \u003Cspan class=\"k\">COMMENT\u003C/span> \u003Cspan class=\"s1\">'ID'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">num_data\u003C/span> \u003Cspan class=\"nb\">INTEGER\u003C/span> \u003Cspan class=\"k\">DEFAULT\u003C/span> \u003Cspan class=\"mi\">0\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">create_user\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">create_datetime\u003C/span> \u003Cspan class=\"nb\">DATETIME\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">update_user\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">update_datetime\u003C/span> \u003Cspan class=\"nb\">DATETIME\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"k\">CONSTRAINT\u003C/span> \u003Cspan class=\"n\">origin_table_PK\u003C/span> \u003Cspan class=\"k\">PRIMARY\u003C/span> \u003Cspan class=\"k\">KEY\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">ID\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"n\">ENGINE\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">InnoDB\u003C/span>\n\u003Cspan class=\"k\">DEFAULT\u003C/span> \u003Cspan class=\"n\">CHARSET\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">utf8mb4\u003C/span>\n\u003Cspan class=\"k\">COLLATE\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">utf8mb4_general_ci\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"code-frame\" data-lang=\"sql\" data-sourcepos=\"61:1-74:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">copied_table\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">CREATE\u003C/span> \u003Cspan class=\"k\">TABLE\u003C/span> \u003Cspan class=\"n\">sample_db\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">copied_table\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\n\t\u003Cspan class=\"n\">ID\u003C/span> \u003Cspan class=\"nb\">bigint\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">20\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"n\">auto_increment\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span> \u003Cspan class=\"k\">COMMENT\u003C/span> \u003Cspan class=\"s1\">'ID'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">varchar_data\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">create_user\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"nb\">CHARACTER\u003C/span> \u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">utf8mb4\u003C/span> \u003Cspan class=\"k\">COLLATE\u003C/span> \u003Cspan class=\"n\">utf8mb4_general_ci\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">create_datetime\u003C/span> \u003Cspan class=\"nb\">datetime\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">update_user\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"nb\">CHARACTER\u003C/span> \u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">utf8mb4\u003C/span> \u003Cspan class=\"k\">COLLATE\u003C/span> \u003Cspan class=\"n\">utf8mb4_general_ci\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"n\">update_datetime\u003C/span> \u003Cspan class=\"nb\">datetime\u003C/span> \u003Cspan class=\"k\">NOT\u003C/span> \u003Cspan class=\"k\">NULL\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\u003Cspan class=\"k\">CONSTRAINT\u003C/span> \u003Cspan class=\"nv\">`PRIMARY`\u003C/span> \u003Cspan class=\"k\">PRIMARY\u003C/span> \u003Cspan class=\"k\">KEY\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">ID\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"n\">ENGINE\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">InnoDB\u003C/span>\n\u003Cspan class=\"k\">DEFAULT\u003C/span> \u003Cspan class=\"n\">CHARSET\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">utf8mb4\u003C/span>\n\u003Cspan class=\"k\">COLLATE\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">utf8mb4_general_ci\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch1 data-sourcepos=\"76:1-76:23\">\n\u003Cspan id=\"トリガーの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>トリガーの作成\u003C/h1>\n\u003Ch2 data-sourcepos=\"78:1-78:51\">\n\u003Cspan id=\"データ作成時に実行されるトリガー\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E4%BD%9C%E6%88%90%E6%99%82%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>データ作成時に実行されるトリガー\u003C/h2>\n\u003Cp data-sourcepos=\"80:1-81:156\">\u003Ccode>origin_table.num_data\u003C/code>を\u003Ccode>copied_table.varchar_data\u003C/code>にコピーする際、IF文で分岐して一度変数に格納するようにしました。これはプログラム内のenumのようなものでデータを入れる想定なので、その通り分岐するようにしています。\u003Cbr>\n\u003Ccode>NEW\u003C/code>はレコードへのSQL文を実行した後の値を指しています。\u003Ccode>NEW.ID\u003C/code>はデータ登録後にできたレコードのIDを指します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"sql\" data-sourcepos=\"83:1-107:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">origin_table_insert_trigger\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">DROP\u003C/span> \u003Cspan class=\"k\">TRIGGER\u003C/span> \u003Cspan class=\"n\">IF\u003C/span> \u003Cspan class=\"k\">EXISTS\u003C/span> \u003Cspan class=\"n\">sample_db\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">origin_table_insert_trigger\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">DELIMITER\u003C/span> \u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"k\">CREATE\u003C/span> \u003Cspan class=\"k\">TRIGGER\u003C/span> \u003Cspan class=\"n\">origin_table_insert_trigger\u003C/span> \u003Cspan class=\"k\">AFTER\u003C/span> \u003Cspan class=\"k\">INSERT\u003C/span> \u003Cspan class=\"k\">ON\u003C/span> \u003Cspan class=\"n\">origin_table\u003C/span> \u003Cspan class=\"k\">FOR\u003C/span> \u003Cspan class=\"k\">EACH\u003C/span> \u003Cspan class=\"k\">ROW\u003C/span>\n\u003Cspan class=\"k\">BEGIN\u003C/span> \n\t\u003Cspan class=\"k\">DECLARE\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\t\u003Cspan class=\"n\">IF\u003C/span> \u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`num_data`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"mi\">1\u003C/span> \u003Cspan class=\"k\">THEN\u003C/span>\n\t\t\u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"s1\">'ONE'\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\t\u003Cspan class=\"n\">ELSEIF\u003C/span> \u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`num_data`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"mi\">2\u003C/span> \u003Cspan class=\"k\">THEN\u003C/span>\n\t\t\u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"s1\">'TWO'\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\t\u003Cspan class=\"k\">ELSE\u003C/span>\n\t\t\u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"s1\">'OTHER'\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\t\u003Cspan class=\"k\">END\u003C/span> \u003Cspan class=\"n\">IF\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\t\n\t\u003Cspan class=\"k\">INSERT\u003C/span> \u003Cspan class=\"k\">INTO\u003C/span> \u003Cspan class=\"n\">copied_table\u003C/span> \u003Cspan class=\"k\">SET\u003C/span>\n\t\t\u003Cspan class=\"nv\">`ID`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`ID`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`varchar_data`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`create_user`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`create_user`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`create_datetime`\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`create_datetime`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`update_user`\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`update_user`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`update_datetime`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`update_datetime`\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">END\u003C/span>\u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"k\">DELIMITER\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"109:1-110:139\">ためしにデータを登録すると以下の通りデータがコピーされます。データの変換もできています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3a93e9d6-a011-09ed-7f99-3bca58322b2a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dae2022bb1e68f48b557405a5e87bfe5\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3a93e9d6-a011-09ed-7f99-3bca58322b2a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=dae2022bb1e68f48b557405a5e87bfe5\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3a93e9d6-a011-09ed-7f99-3bca58322b2a.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=ff28e687c4697cad9b1303fca6c589d4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3a93e9d6-a011-09ed-7f99-3bca58322b2a.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"112:1-112:51\">\n\u003Cspan id=\"データ更新時に実行されるトリガー\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E6%9B%B4%E6%96%B0%E6%99%82%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>データ更新時に実行されるトリガー\u003C/h2>\n\u003Cp data-sourcepos=\"113:1-113:67\">INSERT文とは異なり、WHERE句でIDを指定しています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"sql\" data-sourcepos=\"115:1-139:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">origin_table_update_trigger\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">DROP\u003C/span> \u003Cspan class=\"k\">TRIGGER\u003C/span> \u003Cspan class=\"n\">IF\u003C/span> \u003Cspan class=\"k\">EXISTS\u003C/span> \u003Cspan class=\"n\">sample_db\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">origin_table_update_trigger\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">DELIMITER\u003C/span> \u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"k\">CREATE\u003C/span> \u003Cspan class=\"k\">TRIGGER\u003C/span> \u003Cspan class=\"n\">origin_table_update_trigger\u003C/span> \u003Cspan class=\"k\">AFTER\u003C/span> \u003Cspan class=\"k\">UPDATE\u003C/span> \u003Cspan class=\"k\">ON\u003C/span> \u003Cspan class=\"n\">origin_table\u003C/span> \u003Cspan class=\"k\">FOR\u003C/span> \u003Cspan class=\"k\">EACH\u003C/span> \u003Cspan class=\"k\">ROW\u003C/span>\n\u003Cspan class=\"k\">BEGIN\u003C/span> \n\t\u003Cspan class=\"k\">DECLARE\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span> \u003Cspan class=\"nb\">varchar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">100\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\t\u003Cspan class=\"n\">IF\u003C/span> \u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`num_data`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"mi\">1\u003C/span> \u003Cspan class=\"k\">THEN\u003C/span>\n\t\t\u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"s1\">'ONE'\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\t\u003Cspan class=\"n\">ELSEIF\u003C/span> \u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`num_data`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"mi\">2\u003C/span> \u003Cspan class=\"k\">THEN\u003C/span>\n\t\t\u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"s1\">'TWO'\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\t\u003Cspan class=\"k\">ELSE\u003C/span>\n\t\t\u003Cspan class=\"k\">SET\u003C/span> \u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"s1\">'OTHER'\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\t\u003Cspan class=\"k\">END\u003C/span> \u003Cspan class=\"n\">IF\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\t\n\t\u003Cspan class=\"k\">UPDATE\u003C/span> \u003Cspan class=\"n\">copied_table\u003C/span> \u003Cspan class=\"k\">SET\u003C/span>\n\t\t\u003Cspan class=\"nv\">`varchar_data`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"n\">varchar_data_tmp\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`create_user`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`create_user`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`create_datetime`\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`create_datetime`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`update_user`\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`update_user`\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n\t\t\u003Cspan class=\"nv\">`update_datetime`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`update_datetime`\u003C/span>\n\t\u003Cspan class=\"k\">WHERE\u003C/span> \u003Cspan class=\"nv\">`ID`\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">NEW\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`ID`\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">END\u003C/span>\u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"k\">DELIMITER\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"141:1-142:139\">ID以外のデータを更新してみます。こちらもデータの変換がしっかりできています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5eb30c4c-c008-8e5e-9713-8b5110f2c748.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb5ea77c69fc12c33b12e00a5deae366\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5eb30c4c-c008-8e5e-9713-8b5110f2c748.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb5ea77c69fc12c33b12e00a5deae366\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5eb30c4c-c008-8e5e-9713-8b5110f2c748.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=66def55ee7218840a0b76c3122107466 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5eb30c4c-c008-8e5e-9713-8b5110f2c748.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"144:1-144:51\">\n\u003Cspan id=\"データ削除時に実行されるトリガー\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%87%E3%83%BC%E3%82%BF%E5%89%8A%E9%99%A4%E6%99%82%E3%81%AB%E5%AE%9F%E8%A1%8C%E3%81%95%E3%82%8C%E3%82%8B%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>データ削除時に実行されるトリガー\u003C/h2>\n\u003Cp data-sourcepos=\"146:1-146:220\">注意点として、DELETE時に実行されるトリガーは\u003Ccode>NEW\u003C/code>を使用できないことです。\u003Ccode>NEW\u003C/code>はレコードに変化があった後の値なので、削除実行後は存在しなくなるためです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"sql\" data-sourcepos=\"147:1-156:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">origin_table_delete_trigger\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">DROP\u003C/span> \u003Cspan class=\"k\">TRIGGER\u003C/span> \u003Cspan class=\"n\">IF\u003C/span> \u003Cspan class=\"k\">EXISTS\u003C/span> \u003Cspan class=\"n\">sample_db\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">origin_table_delete_trigger\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">DELIMITER\u003C/span> \u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"k\">CREATE\u003C/span> \u003Cspan class=\"k\">TRIGGER\u003C/span> \u003Cspan class=\"n\">origin_table_delete_trigger\u003C/span> \u003Cspan class=\"k\">AFTER\u003C/span> \u003Cspan class=\"k\">DELETE\u003C/span> \u003Cspan class=\"k\">ON\u003C/span> \u003Cspan class=\"n\">origin_table\u003C/span> \u003Cspan class=\"k\">FOR\u003C/span> \u003Cspan class=\"k\">EACH\u003C/span> \u003Cspan class=\"k\">ROW\u003C/span>\n\u003Cspan class=\"k\">BEGIN\u003C/span> \t\n\t\u003Cspan class=\"k\">DELETE\u003C/span> \u003Cspan class=\"k\">FROM\u003C/span> \u003Cspan class=\"n\">copied_table\u003C/span> \u003Cspan class=\"k\">WHERE\u003C/span> \u003Cspan class=\"nv\">`ID`\u003C/span>\u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"k\">OLD\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">`ID`\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\u003Cspan class=\"k\">END\u003C/span>\u003Cspan class=\"err\">$$\u003C/span>\n\u003Cspan class=\"k\">DELIMITER\u003C/span> \u003Cspan class=\"p\">;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"158:1-159:139\">削除してみると該当のデータが消えていることがわかります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fa0b485aa-034c-59e7-02b8-4399ec0cabb1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=54793dc87868da51207a5d3c268eaf85\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fa0b485aa-034c-59e7-02b8-4399ec0cabb1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=54793dc87868da51207a5d3c268eaf85\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fa0b485aa-034c-59e7-02b8-4399ec0cabb1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=879c76bf1ea31606e31fd8a39bd5c355 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/a0b485aa-034c-59e7-02b8-4399ec0cabb1.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"161:1-161:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"162:1-163:253\">データを変換する処理のところは少し骨が折れましたが、これでうまく動作しました。\u003Cbr>\nトリガー定義を資源管理することや、ログなどを適切に管理することができれば、SQL文実行前後で何か処理をしたい場合の有効な方法の1つとなり得ます。ぜひ使っていきたいと思います。\u003C/p>\n","# 前提\nmysqlのテーブル定義を変えたいけど影響が大きくすぐには難しいという課題がありました。\nそのため別テーブルを作成しておいてデータは自動で同期しておきたい、というときにトリガーを使用する方法を見つけたので検証します。\nAWSのRDSを使用しているので、mysqlのバージョンは5.7を使用します。\n\n# 環境\n- macOS: 12.6\n- mysql: 5.7\n\n# 準備\n\n## docker-compose.ymlでmysqlを準備\n\n以下のようにdocker-compose.ymlを作成してmysqlを用意します。\n```yml:docker-compose.yml\nversion: '3.8'\n\nservices:\n  db:\n    image: mysql:5.7\n    container_name: mysql\n    environment:\n      MYSQL_ROOT_PASSWORD: password\n      MYSQL_DATABASE: sample_db\n      MYSQL_USER: user\n      MYSQL_PASSWORD: password\n    ports:\n      - 3306:3306\n```\n\n## データベースに接続\n私はdbeaverというツールを用いてデータベースに接続しました。\n\n\nhttps://dbeaver.io/\n\nこちらの情報で接続することができます。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/a67ba970-88aa-924e-aabb-07107df3fd9d.png\">\n\n## テーブルを作成\nデータコピー元のテーブル`origin_table`とコピー先のテーブル`copied_table`を作成します。\n`origin_table.num_data`カラムに入る数字を`copied_table.varchar_data`カラムへコピーしますが、そのとき数字を文字列に変換するようにトリガーで設定します。\n\n（IDのみ大文字になってしまってました…。）\n\n```sql:origin_table\nCREATE TABLE sample_db.origin_table (\n\tID BIGINT auto_increment NOT NULL COMMENT 'ID',\n\tnum_data INTEGER DEFAULT 0 NOT NULL,\n\tcreate_user varchar(100) NOT NULL,\n\tcreate_datetime DATETIME NOT NULL,\n\tupdate_user varchar(100) NOT NULL,\n\tupdate_datetime DATETIME NOT NULL,\n\tCONSTRAINT origin_table_PK PRIMARY KEY (ID)\n)\nENGINE=InnoDB\nDEFAULT CHARSET=utf8mb4\nCOLLATE=utf8mb4_general_ci;\n```\n\n```sql:copied_table\nCREATE TABLE sample_db.copied_table (\n\tID bigint(20) auto_increment NOT NULL COMMENT 'ID',\n\tvarchar_data varchar(100) NOT NULL,\n\tcreate_user varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,\n\tcreate_datetime datetime NOT NULL,\n\tupdate_user varchar(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci NOT NULL,\n\tupdate_datetime datetime NOT NULL,\n\tCONSTRAINT `PRIMARY` PRIMARY KEY (ID)\n)\nENGINE=InnoDB\nDEFAULT CHARSET=utf8mb4\nCOLLATE=utf8mb4_general_ci;\n```\n\n# トリガーの作成\n\n## データ作成時に実行されるトリガー\n\n`origin_table.num_data`を`copied_table.varchar_data`にコピーする際、IF文で分岐して一度変数に格納するようにしました。これはプログラム内のenumのようなものでデータを入れる想定なので、その通り分岐するようにしています。\n`NEW`はレコードへのSQL文を実行した後の値を指しています。`NEW.ID`はデータ登録後にできたレコードのIDを指します。\n\n```sql:origin_table_insert_trigger\nDROP TRIGGER IF EXISTS sample_db.origin_table_insert_trigger;\nDELIMITER $$\n$$\nCREATE TRIGGER origin_table_insert_trigger AFTER INSERT ON origin_table FOR EACH ROW\nBEGIN \n\tDECLARE varchar_data_tmp varchar(100);\n\tIF NEW.`num_data`=1 THEN\n\t\tSET varchar_data_tmp='ONE' ;\n\tELSEIF NEW.`num_data`=2 THEN\n\t\tSET varchar_data_tmp='TWO' ;\n\tELSE\n\t\tSET varchar_data_tmp='OTHER' ;\n\tEND IF;\n\t\n\tINSERT INTO copied_table SET\n\t\t`ID`=NEW.`ID`,\n\t\t`varchar_data`=varchar_data_tmp,\n\t\t`create_user`=NEW.`create_user`,\n\t\t`create_datetime` =NEW.`create_datetime`,\n\t\t`update_user` =NEW.`update_user`,\n\t\t`update_datetime`=NEW.`update_datetime`;\nEND$$\nDELIMITER ;\n```\n\nためしにデータを登録すると以下の通りデータがコピーされます。データの変換もできています。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3a93e9d6-a011-09ed-7f99-3bca58322b2a.png\">\n\n## データ更新時に実行されるトリガー\nINSERT文とは異なり、WHERE句でIDを指定しています。\n\n```sql:origin_table_update_trigger\nDROP TRIGGER IF EXISTS sample_db.origin_table_update_trigger;\nDELIMITER $$\n$$\nCREATE TRIGGER origin_table_update_trigger AFTER UPDATE ON origin_table FOR EACH ROW\nBEGIN \n\tDECLARE varchar_data_tmp varchar(100);\n\tIF NEW.`num_data`=1 THEN\n\t\tSET varchar_data_tmp='ONE' ;\n\tELSEIF NEW.`num_data`=2 THEN\n\t\tSET varchar_data_tmp='TWO' ;\n\tELSE\n\t\tSET varchar_data_tmp='OTHER' ;\n\tEND IF;\n\t\n\tUPDATE copied_table SET\n\t\t`varchar_data`=varchar_data_tmp,\n\t\t`create_user`=NEW.`create_user`,\n\t\t`create_datetime` =NEW.`create_datetime`,\n\t\t`update_user` =NEW.`update_user`,\n\t\t`update_datetime`=NEW.`update_datetime`\n\tWHERE `ID` =NEW.`ID`;\nEND$$\nDELIMITER ;\n```\n\nID以外のデータを更新してみます。こちらもデータの変換がしっかりできています。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5eb30c4c-c008-8e5e-9713-8b5110f2c748.png\">\n\n## データ削除時に実行されるトリガー\n\n注意点として、DELETE時に実行されるトリガーは`NEW`を使用できないことです。`NEW`はレコードに変化があった後の値なので、削除実行後は存在しなくなるためです。\n```sql:origin_table_delete_trigger\nDROP TRIGGER IF EXISTS sample_db.origin_table_delete_trigger;\nDELIMITER $$\n$$\nCREATE TRIGGER origin_table_delete_trigger AFTER DELETE ON origin_table FOR EACH ROW\nBEGIN \t\n\tDELETE FROM copied_table WHERE `ID`=OLD.`ID`;\nEND$$\nDELIMITER ;\n```\n\n削除してみると該当のデータが消えていることがわかります。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/a0b485aa-034c-59e7-02b8-4399ec0cabb1.png\">\n\n# さいごに\nデータを変換する処理のところは少し骨が折れましたが、これでうまく動作しました。\nトリガー定義を資源管理することや、ログなどを適切に管理することができれば、SQL文実行前後で何か処理をしたい場合の有効な方法の1つとなり得ます。ぜひ使っていきたいと思います。\n\n\n","2023-03-19T17:51:38+09:00","caa5eeeba93e152cc99a",[86,89,92],{"name":87,"versions":88},"MySQL",[],{"name":90,"versions":91},"mysql5.7",[],{"name":93,"versions":94},"Trigger",[],"mysqlのトリガーを使用して他テーブルにデータを作成/更新/削除する","2023-03-19T17:53:53+09:00","https://qiita.com/y5347M/items/caa5eeeba93e152cc99a",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},8853,{"rendered_body":101,"body":102,"coediting":7,"comments_count":8,"created_at":103,"group":10,"id":104,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":105,"tags":106,"title":109,"updated_at":103,"url":110,"user":111,"page_views_count":112,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:14\">\n\u003Cspan id=\"はじめに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%AF%E3%81%98%E3%82%81%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>はじめに\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:76\">　前回、Flutterのアニメーションについて学習しました。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:51\">\u003Ciframe id=\"qiita-embed-content__cdeb5fbf03694349f63f8c1b1d360c3e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__cdeb5fbf03694349f63f8c1b1d360c3e\" data-content=\"https%3A%2F%2Fqiita.com%2Fy5347M%2Fitems%2Fc115932d3bbf15df0f1d\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"7:1-8:49\">応用として四角がかわいく（？）動くようにしました。\u003Cbr>\n変化する値としては以下の4つです。\u003C/p>\n\u003Cul data-sourcepos=\"9:1-13:0\">\n\u003Cli data-sourcepos=\"9:1-9:11\">サイズ\u003C/li>\n\u003Cli data-sourcepos=\"10:1-10:11\">透明度\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:5\">色\u003C/li>\n\u003Cli data-sourcepos=\"12:1-13:0\">傾き\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"14:1-14:121\">\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fbc571d31-5f8b-f29d-2857-f4b7f08b258a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9b3dbcaa9fdf94d485bd1fbc89936c9b\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fbc571d31-5f8b-f29d-2857-f4b7f08b258a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9b3dbcaa9fdf94d485bd1fbc89936c9b\" alt=\"try2.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fbc571d31-5f8b-f29d-2857-f4b7f08b258a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e8f266dfcb6cbdcc59f51398ef57474d 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/bc571d31-5f8b-f29d-2857-f4b7f08b258a.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"16:1-16:11\">\n\u003Cspan id=\"コード\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%BC%E3%83%89\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コード\u003C/h1>\n\u003Cp data-sourcepos=\"17:1-17:142\">注意点として、ColorだけはTweenではなくColorTweenクラスをつかってTweenオブジェクトを生成するところです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"19:1-92:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">main.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'dart:math'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"c1\">// Make the Tweens static because they don't change.\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_opacityTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mf\">0.1\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_transformTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">90\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_colorTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">ColorTween\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">grey\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">pink\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Opacity\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">opacity:\u003C/span> \u003Cspan class=\"n\">_opacityTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n          \u003Cspan class=\"nl\">transform:\u003C/span> \u003Cspan class=\"n\">Matrix4\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">rotationZ\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">_transformTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">*\u003C/span> \u003Cspan class=\"n\">pi\u003C/span> \u003Cspan class=\"o\">/\u003C/span> \u003Cspan class=\"mi\">180\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">decoration:\u003C/span> \u003Cspan class=\"n\">BoxDecoration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">color:\u003C/span> \u003Cspan class=\"n\">_colorTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n            \u003Cspan class=\"nl\">borderRadius:\u003C/span> \u003Cspan class=\"n\">BorderRadius\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">circular\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mf\">16.0\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">bounceIn\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">});\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n","# はじめに\n　前回、Flutterのアニメーションについて学習しました。\n\nhttps://qiita.com/y5347M/items/c115932d3bbf15df0f1d\n\n\n応用として四角がかわいく（？）動くようにしました。\n変化する値としては以下の4つです。\n- サイズ\n- 透明度\n- 色\n- 傾き\n\n![try2.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/bc571d31-5f8b-f29d-2857-f4b7f08b258a.gif)\n\n# コード\n注意点として、ColorだけはTweenではなくColorTweenクラスをつかってTweenオブジェクトを生成するところです。\n\n```dart:main.dart\nimport 'package:flutter/material.dart';\nimport 'dart:math';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  // Make the Tweens static because they don't change.\n  static final _opacityTween = Tween\u003Cdouble>(begin: 0.1, end: 1);\n  static final _sizeTween = Tween\u003Cdouble>(begin: 0, end: 300);\n  static final _transformTween = Tween\u003Cdouble>(begin: 0, end: 90);\n  static final _colorTween = ColorTween(begin: Colors.grey, end: Colors.pink);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Opacity(\n        opacity: _opacityTween.evaluate(animation),\n        child: Container(\n          transform: Matrix4.rotationZ(_transformTween.evaluate(animation) * pi / 180),\n          margin: const EdgeInsets.symmetric(vertical: 10),\n          height: _sizeTween.evaluate(animation),\n          width: _sizeTween.evaluate(animation),\n          decoration: BoxDecoration(\n            color: _colorTween.evaluate(animation),\n            borderRadius: BorderRadius.circular(16.0),\n          ),\n        ),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = CurvedAnimation(parent: controller, curve: Curves.bounceIn)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n","2023-03-11T16:11:04+09:00","520e33348ec4c5a789bd",3,[107],{"name":70,"versions":108},[],"Flutterのアニメーションで四角を動かしてみる","https://qiita.com/y5347M/items/520e33348ec4c5a789bd",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},551,{"rendered_body":114,"body":115,"coediting":7,"comments_count":8,"created_at":116,"group":10,"id":117,"likes_count":118,"private":7,"reactions_count":8,"stocks_count":65,"tags":119,"title":122,"updated_at":123,"url":124,"user":125,"page_views_count":126,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:217\">Flutterが気になっていて学習していますが、なかなかアニメーションについて理解できない、できてもすぐ忘れてしまいます。そのため備忘録として記載します。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:97\">今回学習したのはFlutter公式サイトにあるAnimationのチュートリアルです。\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:59\">\u003Ciframe id=\"qiita-embed-content__25650066981108ac8e5e42ab81b2ac6e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__25650066981108ac8e5e42ab81b2ac6e\" data-content=\"https%3A%2F%2Fdocs.flutter.dev%2Fdevelopment%2Fui%2Fanimations%2Ftutorial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"9:1-9:42\">コードサンプルはこちらです。\u003C/p>\n\u003Cp data-sourcepos=\"11:1-11:45\">\u003Ciframe id=\"qiita-embed-content__2da53adcabd3204d6ee11614b30052ee\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2da53adcabd3204d6ee11614b30052ee\" data-content=\"https%3A%2F%2Fgithub.com%2Fy5347M%2Fanimations_tutorial\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"13:1-13:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"14:1-18:0\">\n\u003Cli data-sourcepos=\"14:1-14:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"15:1-15:42\">Android Studio Dolphin: 2021.3.1 Patch 1\u003C/li>\n\u003Cli data-sourcepos=\"16:1-16:24\">flutter: 3.6.0-0.1.pre\u003C/li>\n\u003Cli data-sourcepos=\"17:1-18:0\">Dart: 2.19.0\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"19:1-19:23\">\n\u003Cspan id=\"各クラスの概要\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%90%84%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E6%A6%82%E8%A6%81\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>各クラスの概要\u003C/h1>\n\u003Ch2 data-sourcepos=\"21:1-21:20\">\n\u003Cspan id=\"animation\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animation\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Animation\u003C/h2>\n\u003Cp data-sourcepos=\"22:1-23:286\">Animationオブジェクトは画面上になにが描画されているかは把握しません。抽象クラスで、現在の値とその状態を保持しています。\u003Cbr>\nAnimtaionオブジェクトは2つの値にある数値を一定の期間に渡って生成します。生成の仕方は線形、曲線、ステップ関数など自由に選択できます。制御の仕方によっては逆回転させたり、方向転換させたりできます。\u003C/p>\n\u003Cp data-sourcepos=\"25:1-25:174\">\u003Ccode>Animation&lt;double&gt;\u003C/code>が一般的な使用方法ですが、\u003Ccode>Animation&lt;Color&gt;\u003C/code>や\u003Ccode>Animation&lt;Size&gt;\u003C/code>のように、数値以外の型の間も補完することができます。\u003C/p>\n\u003Ch2 data-sourcepos=\"27:1-27:18\">\n\u003Cspan id=\"curvedanimation\" class=\"fragment\">\u003C/span>\u003Ca href=\"#curvedanimation\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>CurvedAnimation\u003C/h2>\n\u003Cp data-sourcepos=\"28:1-29:177\">CurvedAnimationオブジェクトはAnimationを継承するクラスです。\u003Cbr>\nAnimationオブジェクトが一定の間隔で数値を生成し続けるのに対し、CurvedAnimationは指定した非線形のカーブを描くように生成します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"31:1-33:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">CurvedAnimationを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">easeIn\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"35:1-36:63\">以下のサイトに各カーブがどのような曲線を描きながら数値が遷移するか説明されています。\u003Cbr>\n視覚的に見ることができるのでおすすめです。\u003C/p>\n\u003Cp data-sourcepos=\"38:1-38:59\">\u003Ciframe id=\"qiita-embed-content__eed381e3efadc8ccb45c9cc22558863e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__eed381e3efadc8ccb45c9cc22558863e\" data-content=\"https%3A%2F%2Fapi.flutter.dev%2Fflutter%2Fanimation%2FCurves-class.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"40:1-41:194\">自分で曲線の動きを作成することもできます。\u003Cbr>\nCurveクラスを継承したクラスを作成し、transformメソッドに動きを記載します。このインスタンスをCurvedAnimationを生成するときに引数に渡します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"42:1-50:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ShakeCurve.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">ShakeCurve\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">Curve\u003C/span> \u003Cspan class=\"p\">{\u003C/span>                \n                                                \n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">ShakeCurve\u003C/span>\u003Cspan class=\"p\">();\u003C/span>                           \n                                                \n  \u003Cspan class=\"nd\">@override\u003C/span>                                     \n  \u003Cspan class=\"kt\">double\u003C/span> \u003Cspan class=\"n\">transform\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kt\">double\u003C/span> \u003Cspan class=\"n\">t\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">sin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">t\u003C/span> \u003Cspan class=\"o\">*\u003C/span> \u003Cspan class=\"n\">pi\u003C/span> \u003Cspan class=\"o\">*\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>                                               \n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"52:1-52:24\">\n\u003Cspan id=\"animationcontroller\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animationcontroller\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Animation­Controller\u003C/h2>\n\u003Cp data-sourcepos=\"53:1-54:178\">Animation­ControllerはAnimationを継承したクラスです。\u003Cbr>\nハードウェアが新しいフレームの準備が整ったときに新しい値を生成します。デフォルトでは0.0~1.0までの数値を線形に生成します。\u003C/p>\n\u003Cp data-sourcepos=\"56:1-56:149\">以下のコードは、（私の理解では）2秒間かけて0.0~1.0までの値を生成するAnimation­Controllerを生成する方法です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"57:1-60:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">AnimationControllerを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n    \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"62:1-63:172\">Animation­ControllerはAnimationを継承したクラスなので、Animationオブジェクトが必要な場所ではどこでも使用することができます。\u003Cbr>\nAnimationControllerは動きを制御するためのメソッドが存在します。例えば\u003Ccode>.forward()\u003C/code>メソッドはアニメーションの動きを開始します。\u003C/p>\n\u003Cp data-sourcepos=\"65:1-65:345\">Animation­Controllerを作成する際にvsyncという引数を渡します。これのおかげで不必要なリソースを消費することを防ぎます。渡すクラスの定義に\u003Ccode>SingleTickerProviderStateMixin\u003C/code>を追加することでステートフルオブジェクトをTickerProviderとして使用することができます。\u003C/p>\n\u003Cp data-sourcepos=\"67:1-67:132\">正直この部分に関してチュートリアルでは理解ができなかったので以下のサイトを参照しました。\u003C/p>\n\u003Cp data-sourcepos=\"69:1-69:62\">\u003Ciframe id=\"qiita-embed-content__c57acdbceca09a9b46570189be6256de\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c57acdbceca09a9b46570189be6256de\" data-content=\"https%3A%2F%2Fitome.team%2Fblog%2F2019%2F12%2Fflutter-advent-calendar-day15%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"71:1-72:170\">ステートフルオブジェクトに\u003Ccode>with SingleTickerProviderStateMixin\u003C/code>をつけることでそのクラス自体が\u003Ccode>TickerProvider\u003C/code>となります。\u003Ccode>Ticker\u003C/code>はフレーム更新の管理を担ってくれるクラスです。\u003Cbr>\nAnimationControllerが一つの場合は単一のTickerを提供する\u003Ccode>SingleTickerProviderStateMixin\u003C/code>、複数の場合は\u003Ccode>TickerProviderStateMixin\u003C/code>を使用します。\u003C/p>\n\u003Ch2 data-sourcepos=\"74:1-74:8\">\n\u003Cspan id=\"tween\" class=\"fragment\">\u003C/span>\u003Ca href=\"#tween\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Tween\u003C/h2>\n\u003Cp data-sourcepos=\"76:1-77:61\">AnimationControllerが生成する数値のデフォルトは0.0~1.0となっていますが、それを変更したい場合にTweenクラスを使用します。\u003Cbr>\n以下の例では-200.0~0.0まで数値が変化します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"79:1-81:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Tweenを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">tween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"o\">-\u003C/span>\u003Cspan class=\"mi\">200\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"83:1-83:84\">Animationと同様、数値以外にもColorやSizeを渡すことができます。\u003C/p>\n\u003Cp data-sourcepos=\"85:1-85:242\">Tweenオブジェクトはステートレスなので状態を保存しません。その代わり、\u003Ccode>evaluate(Animation&lt;double&gt; animation)\u003C/code>メソッドを提供し、アニメーションの現在の値を受け取ることができます。\u003C/p>\n\u003Cp data-sourcepos=\"87:1-87:89\">TweenオブジェクトからAnimationを生成するには以下のようにします。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"88:1-92:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">TweenオブジェクトからAnimationを生成する一例\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n    \u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">milliseconds:\u003C/span> \u003Cspan class=\"mi\">500\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">int\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">alpha\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">IntTween\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">255\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"94:1-94:75\">CurvedAnimationを利用したい場合には以下のようにします。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"95:1-101:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">TweenオブジェクトからAnimationを生成する一例（CurvedAnimationを使用）\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n    \u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">milliseconds:\u003C/span> \u003Cspan class=\"mi\">500\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">curve\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n    \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">easeOut\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">int\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">alpha\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">IntTween\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">255\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">curve\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"103:1-103:33\">\n\u003Cspan id=\"アニメーションの通知\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E9%80%9A%E7%9F%A5\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アニメーションの通知\u003C/h2>\n\u003Cp data-sourcepos=\"104:1-106:137\">Animationオブジェクトは\u003Ccode>addListener()\u003C/code>メソッドと\u003Ccode>addStatusListener()\u003C/code>メソッドで定義されたListenerとStatusListenerを持つことができます。\u003Cbr>\nListenerは値が変化するたびに呼び出されます。値が変化するたびに画面表示を変えたい場合、setState()を使用します。\u003Cbr>\nStatusListenerはアニメーションの状態が開始・終了・進行・戻るなど、変化した場合に呼び出されます。\u003C/p>\n\u003Ch1 data-sourcepos=\"109:1-109:38\">\n\u003Cspan id=\"アニメーションのサンプル\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アニメーションのサンプル\u003C/h1>\n\u003Cp data-sourcepos=\"110:1-110:87\">以上の概要を踏まえてアニメーションのサンプルを作成します。\u003C/p>\n\u003Ch2 data-sourcepos=\"112:1-112:33\">\n\u003Cspan id=\"まずはただのロゴ表示\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%BE%E3%81%9A%E3%81%AF%E3%81%9F%E3%81%A0%E3%81%AE%E3%83%AD%E3%82%B4%E8%A1%A8%E7%A4%BA\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>まずはただのロゴ表示\u003C/h2>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"114:1-139:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate0\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"141:1-141:55\">何も動かないFlutterロゴが表示されます。\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fffbd868a-5754-f5b6-bda4-c836514a26af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=84bb7df1fada7bfef40d762ddcbec74a\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fffbd868a-5754-f5b6-bda4-c836514a26af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=84bb7df1fada7bfef40d762ddcbec74a\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fffbd868a-5754-f5b6-bda4-c836514a26af.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3858f08682068a1bd906db6fb7809c30 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/ffbd868a-5754-f5b6-bda4-c836514a26af.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"145:1-145:37\">\n\u003Cspan id=\"animationcontrollerを使用する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animationcontroller%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>AnimationControllerを使用する\u003C/h2>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"147:1-195:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate1\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addListener\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"n\">setState\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"c1\">// The state that has changed here is the animation object’s value.\u003C/span>\n        \u003Cspan class=\"p\">});\u003C/span>\n      \u003Cspan class=\"p\">});\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"197:1-197:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"198:1-207:0\">\n\u003Cli data-sourcepos=\"198:1-198:71\">Stateクラスに\u003Ccode>with SingleTickerProviderStateMixin\u003C/code>をつける。\u003C/li>\n\u003Cli data-sourcepos=\"199:1-199:80\">Stateクラスに\u003Ccode>Animation&lt;double&gt;\u003C/code>と\u003Ccode>AnimationController\u003C/code>を保持する。\u003C/li>\n\u003Cli data-sourcepos=\"200:1-200:158\">Stateクラスに\u003Ccode>initState()\u003C/code>メソッドを実装する。ステートフルウィジェットクラスが生成されたときに最初に動作する。\u003C/li>\n\u003Cli data-sourcepos=\"201:1-205:82\">\n\u003Ccode>initState()\u003C/code>メソッドでは\n\u003Cul data-sourcepos=\"202:5-205:82\">\n\u003Cli data-sourcepos=\"202:5-202:61\">AnimationControllerのインスタンス生成する。\u003C/li>\n\u003Cli data-sourcepos=\"203:5-203:78\">Tweenと作成したAnimationControllerからanimationを生成する。\u003C/li>\n\u003Cli data-sourcepos=\"204:5-204:139\">animationの\u003Ccode>addListner()\u003C/code>メソッドに\u003Ccode>setState()\u003C/code>メソッドを渡す-&gt;値の変更があるたびに画面に反映される。\u003C/li>\n\u003Cli data-sourcepos=\"205:5-205:82\">\n\u003Ccode>controller.forward()\u003C/code>メソッドでアニメーションを開始する。\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli data-sourcepos=\"206:1-207:0\">\n\u003Ccode>dispose()\u003C/code>メソッドを記載する。アニメーションは大量のリソースを消費するので、ウィジェットが終了したときにメモリリークが起きないように処理する。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"208:1-208:159\">AnimationControllerクラスはAnimationを継承しているのでAnimationCotrollerだけで動くのでは？と思いましたがダメでした。\u003C/p>\n\u003Cp data-sourcepos=\"210:1-211:125\">実行すると以下のようになります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F74dea46e-8e56-fe76-290c-4c3e748a1246.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a545b8ddbc9f8ddfee83e1cb09aff628\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F74dea46e-8e56-fe76-290c-4c3e748a1246.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a545b8ddbc9f8ddfee83e1cb09aff628\" alt=\"animate1.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F74dea46e-8e56-fe76-290c-4c3e748a1246.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=aab3d5df2b24109de8ab5ce0c0a2a935 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/74dea46e-8e56-fe76-290c-4c3e748a1246.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"213:1-213:49\">\n\u003Cspan id=\"animatedwidgetを使用して簡略化する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animatedwidget%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E7%B0%A1%E7%95%A5%E5%8C%96%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Animated­Widgetを使用して簡略化する\u003C/h2>\n\u003Cp data-sourcepos=\"214:1-215:264\">ここで概要には登場しなかったAnimated­Widgetが急に出現します。\u003Cbr>\nAnimated­Widgetは実際に表示するWidgetをStateクラスから分離することができます。わざわざ\u003Ccode>addListner()\u003C/code>メソッドを使用しないでも、Animated­Widgetにlistenしたいanimationを渡せば自動的に反映してくれます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"217:1-269:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate2\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"271:1-271:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"272:1-275:0\">\n\u003Cli data-sourcepos=\"272:1-272:198\">AnimatedWidgetを継承したAnimatedLogoクラスを作成する。buildメソッドを実装し、その中にアニメーションとして表示したいオブジェクトを記載します。\u003C/li>\n\u003Cli data-sourcepos=\"273:1-273:172\">\n\u003Ccode>addListner()\u003C/code>メソッドを使用しなくて良くなったので、Stateクラスの\u003Ccode>initState()\u003C/code>メソッドから\u003Ccode>addListener()\u003C/code>に関する処理を削除する。\u003C/li>\n\u003Cli data-sourcepos=\"274:1-275:0\">StateクラスのbuildメソッドではAnimatedLogoクラスを生成する。引数としてanimationを渡す。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"276:1-276:68\">animate1と実行するときの動きの違いはありません。\u003C/p>\n\u003Ch2 data-sourcepos=\"278:1-278:66\">\n\u003Cspan id=\"アニメーションの状態変化をモニタリングする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E7%8A%B6%E6%85%8B%E5%A4%89%E5%8C%96%E3%82%92%E3%83%A2%E3%83%8B%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アニメーションの状態変化をモニタリングする\u003C/h2>\n\u003Cp data-sourcepos=\"279:1-280:237\">\u003Ccode>addStatusListener()\u003C/code>メソッドを使用するとアニメーションの状態変化を受け取ることができると学習しました。\u003Cbr>\nアニメーションの値の遷移が終了するとき\u003Ccode>AnimationStatus.completed\u003C/code>にアニメーションを逆再生させ、アニメーションの値が初期値に戻った時に再度スタートさせる処理を書きます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"282:1-342:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate3\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"si\">$status\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"p\">));\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"344:1-344:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"345:1-346:0\">\n\u003Cli data-sourcepos=\"345:1-346:0\">Stateクラスのanimationの\u003Ccode>addStatusListener()\u003C/code>メソッドを記載する。listnerとしてstatusが\u003Ccode>AnimationStatus.completed：アニメーションの終了\u003C/code>になったらanimationの値の動きを逆転させ、さらにstatusが\u003Ccode>AnimationStatus.dismissed：アニメーションの開始前\u003C/code>になったらアニメーションの値を進行するという処理を渡します。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"347:1-348:125\">実行するとこのようになります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd4de28fa-848c-d1b7-37d7-b95236411017.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=83d3d9da8c3b6707cc5989f0cacf84f4\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd4de28fa-848c-d1b7-37d7-b95236411017.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=83d3d9da8c3b6707cc5989f0cacf84f4\" alt=\"animate3.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd4de28fa-848c-d1b7-37d7-b95236411017.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=09f63163bf8b882a8c9950d4582e2a7f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/d4de28fa-848c-d1b7-37d7-b95236411017.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"350:1-350:63\">\n\u003Cspan id=\"animatedbuilderを使用してリファクタリングする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#animatedbuilder%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6%E3%83%AA%E3%83%95%E3%82%A1%E3%82%AF%E3%82%BF%E3%83%AA%E3%83%B3%E3%82%B0%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>AnimatedBuilderを使用してリファクタリングする\u003C/h2>\n\u003Cp data-sourcepos=\"351:1-352:82\">animate3では、もしStateクラスのAnimationを変更した場合、AnimatedLogoの方もコードを修正しないといけなくなるという問題があります。\u003Cbr>\nそれを解決するため、責任を3つに分離する必要があります。\u003C/p>\n\u003Cul data-sourcepos=\"353:1-356:0\">\n\u003Cli data-sourcepos=\"353:1-353:35\">ロゴをレンダリングする\u003C/li>\n\u003Cli data-sourcepos=\"354:1-354:26\">Animationを定義する\u003C/li>\n\u003Cli data-sourcepos=\"355:1-356:0\">値の遷移をレンダリングする\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"357:1-357:63\">AnimatedBuilderを使用するとこれを実現できます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"359:1-444:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate4\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoWidget\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatelessWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoWidget\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n\u003Cspan class=\"c1\">// Leave out the height and width so it fills the animating parent\u003C/span>\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">GrowTransition\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatelessWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">GrowTransition\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">child\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animation\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">AnimatedBuilder\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">builder:\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">SizedBox\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">value\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n          \u003Cspan class=\"p\">);\u003C/span>\n        \u003Cspan class=\"p\">},\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">child\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"si\">$status\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"p\">));\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">GrowTransition\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoWidget\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"446:1-446:36\">変更点は以下の通りです。\u003C/p>\n\u003Cul data-sourcepos=\"447:1-450:0\">\n\u003Cli data-sourcepos=\"447:1-447:129\">LogoWidgetクラスを定義します。アニメーションとして表示したいウィジェットのみを返します。\u003C/li>\n\u003Cli data-sourcepos=\"448:1-448:279\">GrowTransitionクラスを定義します。このクラスが生成されるときにコンストラクタで表示するウィジェットとanimationを受け取ります。\u003Ccode>builder()\u003C/code>メソッド内でAnimatedBuilderを使用してアニメーションを生成します。\u003C/li>\n\u003Cli data-sourcepos=\"449:1-450:0\">Stateクラスの\u003Ccode>builder()\u003C/code>メソッド内ではGrowTransitionクラスにanimationとロゴを渡して生成します。\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"451:1-451:41\">実行結果はanimate3と同じです。\u003C/p>\n\u003Ch2 data-sourcepos=\"453:1-453:39\">\n\u003Cspan id=\"同時進行のアニメーション\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%90%8C%E6%99%82%E9%80%B2%E8%A1%8C%E3%81%AE%E3%82%A2%E3%83%8B%E3%83%A1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>同時進行のアニメーション\u003C/h2>\n\u003Cp data-sourcepos=\"454:1-454:124\">透明度とサイズのように、一度に複数のアニメーション(Tween)を生成したい場合があります。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"455:1-460:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n    \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">sizeAnimation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003Cspan class=\"n\">opacityAnimation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mf\">0.1\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">animate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"462:1-464:276\">しかしAnimatedWidgetは1つのアニメーションしか受け取れません。そのため、上記のように2つのアニメーションをStateクラスで生成しても行き場がありません。\u003Cbr>\nそのためアニメーションはTweenから生成していないものをAnimatedWidgetの引数に渡し、渡した先でそれぞれTweenを生成するようにします。\u003Cbr>\nこのとき、\u003Ccode>animation.value\u003C/code>ではTweenから生成していない値を受け取ることになるため、Tweenのevaluateメソッドを使用します。\u003Ccode>_sizeTween.evaluate(animation)\u003C/code>のようにしてanimationの現在の値をTweenを通して受け取ります。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"466:1-532:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">animate5\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">AnimatedLogo\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">AnimatedWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">required\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">})\u003C/span>\n      \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">listenable:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"c1\">// Make the Tweens static because they don't change.\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_opacityTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mf\">0.1\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Tween\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"nl\">begin:\u003C/span> \u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">end:\u003C/span> \u003Cspan class=\"mi\">300\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">listenable\u003C/span> \u003Cspan class=\"k\">as\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;;\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Center\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Opacity\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">opacity:\u003C/span> \u003Cspan class=\"n\">_opacityTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n        \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Container\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n          \u003Cspan class=\"nl\">margin:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">EdgeInsets\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">symmetric\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">vertical:\u003C/span> \u003Cspan class=\"mi\">10\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">height:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">width:\u003C/span> \u003Cspan class=\"n\">_sizeTween\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">evaluate\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">FlutterLogo\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">LogoApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_LogoAppState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_LogoAppState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">LogoApp\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">SingleTickerProviderStateMixin\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">Animation\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">double\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">late\u003C/span> \u003Cspan class=\"n\">AnimationController\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">initState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">initState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\n        \u003Cspan class=\"n\">AnimationController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">duration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Duration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">seconds:\u003C/span> \u003Cspan class=\"mi\">2\u003C/span>\u003Cspan class=\"p\">),\u003C/span> \u003Cspan class=\"nl\">vsync:\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n    \u003Cspan class=\"n\">animation\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">CurvedAnimation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">parent:\u003C/span> \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nl\">curve:\u003C/span> \u003Cspan class=\"n\">Curves\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">easeIn\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n      \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addStatusListener\u003C/span>\u003Cspan class=\"p\">((\u003C/span>\u003Cspan class=\"n\">status\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">completed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">reverse\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"o\">==\u003C/span> \u003Cspan class=\"n\">AnimationStatus\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dismissed\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n        \u003Cspan class=\"p\">}\u003C/span>\n      \u003Cspan class=\"p\">});\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">forward\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">AnimatedLogo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">animation:\u003C/span> \u003Cspan class=\"n\">animation\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"n\">dispose\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">controller\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">dispose\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"534:1-535:125\">実行すると以下の通りとなります。animate3やanimate4とは異なり、サイズだけでなく透明度も変化しています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8f9bb0dcd3c52950d312ac6f70b0451\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d8f9bb0dcd3c52950d312ac6f70b0451\" alt=\"animate5.gif\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=83e24f8b43d676db1995dc45eac7b8a3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"537:1-537:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"538:1-538:247\">Flutterのアニメーションについて学習してきました。画面表示側の処理には詳しくありませんが、アプリを起動した際のロゴ表示や、スクロールした際の表示などに応用できそうです。\u003C/p>\n","# 前提\nFlutterが気になっていて学習していますが、なかなかアニメーションについて理解できない、できてもすぐ忘れてしまいます。そのため備忘録として記載します。\n\n今回学習したのはFlutter公式サイトにあるAnimationのチュートリアルです。\n\nhttps://docs.flutter.dev/development/ui/animations/tutorial\n\n\nコードサンプルはこちらです。\n\nhttps://github.com/y5347M/animations_tutorial\n\n# 環境\n- macOS: 12.6\n- Android Studio Dolphin: 2021.3.1 Patch 1\n- flutter: 3.6.0-0.1.pre\n- Dart: 2.19.0\n\n# 各クラスの概要\n\n## Animation\u003Cdouble>\nAnimationオブジェクトは画面上になにが描画されているかは把握しません。抽象クラスで、現在の値とその状態を保持しています。\nAnimtaionオブジェクトは2つの値にある数値を一定の期間に渡って生成します。生成の仕方は線形、曲線、ステップ関数など自由に選択できます。制御の仕方によっては逆回転させたり、方向転換させたりできます。\n\n`Animation\u003Cdouble>`が一般的な使用方法ですが、`Animation\u003CColor>`や`Animation\u003CSize>`のように、数値以外の型の間も補完することができます。\n\n## CurvedAnimation\nCurvedAnimationオブジェクトはAnimation\u003Cdouble>を継承するクラスです。\nAnimationオブジェクトが一定の間隔で数値を生成し続けるのに対し、CurvedAnimationは指定した非線形のカーブを描くように生成します。\n\n```dart:CurvedAnimationを生成する一例\nanimation = CurvedAnimation(parent: controller, curve: Curves.easeIn);\n```\n\n以下のサイトに各カーブがどのような曲線を描きながら数値が遷移するか説明されています。\n視覚的に見ることができるのでおすすめです。\n\nhttps://api.flutter.dev/flutter/animation/Curves-class.html\n\n自分で曲線の動きを作成することもできます。\nCurveクラスを継承したクラスを作成し、transformメソッドに動きを記載します。このインスタンスをCurvedAnimationを生成するときに引数に渡します。\n```dart:ShakeCurve.dart\nclass ShakeCurve extends Curve {                \n                                                \n  const ShakeCurve();                           \n                                                \n  @override                                     \n  double transform(double t) => sin(t * pi * 2);\n}                                               \n```\n\n## Animation­Controller\nAnimation­ControllerはAnimation\u003Cdouble>を継承したクラスです。\nハードウェアが新しいフレームの準備が整ったときに新しい値を生成します。デフォルトでは0.0~1.0までの数値を線形に生成します。\n\n以下のコードは、（私の理解では）2秒間かけて0.0~1.0までの値を生成するAnimation­Controllerを生成する方法です。\n```dart:AnimationControllerを生成する一例\ncontroller =\n    AnimationController(duration: const Duration(seconds: 2), vsync: this);\n```\n\nAnimation­ControllerはAnimation\u003Cdouble>を継承したクラスなので、Animationオブジェクトが必要な場所ではどこでも使用することができます。\nAnimationControllerは動きを制御するためのメソッドが存在します。例えば`.forward()`メソッドはアニメーションの動きを開始します。\n\nAnimation­Controllerを作成する際にvsyncという引数を渡します。これのおかげで不必要なリソースを消費することを防ぎます。渡すクラスの定義に`SingleTickerProviderStateMixin`を追加することでステートフルオブジェクトをTickerProviderとして使用することができます。\n\n正直この部分に関してチュートリアルでは理解ができなかったので以下のサイトを参照しました。\n\nhttps://itome.team/blog/2019/12/flutter-advent-calendar-day15/\n\nステートフルオブジェクトに`with SingleTickerProviderStateMixin`をつけることでそのクラス自体が`TickerProvider`となります。`Ticker`はフレーム更新の管理を担ってくれるクラスです。\nAnimationControllerが一つの場合は単一のTickerを提供する`SingleTickerProviderStateMixin`、複数の場合は`TickerProviderStateMixin`を使用します。\n\n## Tween\n\nAnimationControllerが生成する数値のデフォルトは0.0~1.0となっていますが、それを変更したい場合にTweenクラスを使用します。\n以下の例では-200.0~0.0まで数値が変化します。\n\n```dart:Tweenを生成する一例\ntween = Tween\u003Cdouble>(begin: -200, end: 0);\n```\n\nAnimationと同様、数値以外にもColorやSizeを渡すことができます。\n\nTweenオブジェクトはステートレスなので状態を保存しません。その代わり、`evaluate(Animation\u003Cdouble> animation)`メソッドを提供し、アニメーションの現在の値を受け取ることができます。\n\nTweenオブジェクトからAnimationを生成するには以下のようにします。\n```dart:TweenオブジェクトからAnimationを生成する一例\nAnimationController controller = AnimationController(\n    duration: const Duration(milliseconds: 500), vsync: this);\nAnimation\u003Cint> alpha = IntTween(begin: 0, end: 255).animate(controller);\n```\n\nCurvedAnimationを利用したい場合には以下のようにします。\n```dart:TweenオブジェクトからAnimationを生成する一例（CurvedAnimationを使用）\nAnimationController controller = AnimationController(\n    duration: const Duration(milliseconds: 500), vsync: this);\nfinal Animation\u003Cdouble> curve =\n    CurvedAnimation(parent: controller, curve: Curves.easeOut);\nAnimation\u003Cint> alpha = IntTween(begin: 0, end: 255).animate(curve);\n```\n\n## アニメーションの通知\nAnimationオブジェクトは`addListener()`メソッドと`addStatusListener()`メソッドで定義されたListenerとStatusListenerを持つことができます。\nListenerは値が変化するたびに呼び出されます。値が変化するたびに画面表示を変えたい場合、setState()を使用します。\nStatusListenerはアニメーションの状態が開始・終了・進行・戻るなど、変化した場合に呼び出されます。\n\n\n# アニメーションのサンプル\n以上の概要を踏まえてアニメーションのサンプルを作成します。\n\n## まずはただのロゴ表示\n\n```dart:animate0\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> {\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: 300,\n        width: 300,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n```\n\n何も動かないFlutterロゴが表示されます。\n\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/ffbd868a-5754-f5b6-bda4-c836514a26af.png\">\n\n## AnimationControllerを使用する\n\n```dart:animate1\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller)\n      ..addListener(() {\n        setState(() {\n          // The state that has changed here is the animation object’s value.\n        });\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- Stateクラスに`with SingleTickerProviderStateMixin`をつける。\n- Stateクラスに`Animation\u003Cdouble>`と`AnimationController`を保持する。\n- Stateクラスに`initState()`メソッドを実装する。ステートフルウィジェットクラスが生成されたときに最初に動作する。\n- `initState()`メソッドでは\n    - AnimationControllerのインスタンス生成する。\n    - Tweenと作成したAnimationControllerからanimationを生成する。\n    - animationの`addListner()`メソッドに`setState()`メソッドを渡す->値の変更があるたびに画面に反映される。\n    - `controller.forward()`メソッドでアニメーションを開始する。\n- `dispose()`メソッドを記載する。アニメーションは大量のリソースを消費するので、ウィジェットが終了したときにメモリリークが起きないように処理する。\n\nAnimationControllerクラスはAnimation\u003Cdouble>を継承しているのでAnimationCotrollerだけで動くのでは？と思いましたがダメでした。\n\n実行すると以下のようになります。\n![animate1.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/74dea46e-8e56-fe76-290c-4c3e748a1246.gif)\n\n## Animated­Widgetを使用して簡略化する\nここで概要には登場しなかったAnimated­Widgetが急に出現します。\nAnimated­Widgetは実際に表示するWidgetをStateクラスから分離することができます。わざわざ`addListner()`メソッドを使用しないでも、Animated­Widgetにlistenしたいanimationを渡せば自動的に反映してくれます。\n\n```dart:animate2\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller);\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- AnimatedWidgetを継承したAnimatedLogoクラスを作成する。buildメソッドを実装し、その中にアニメーションとして表示したいオブジェクトを記載します。\n- `addListner()`メソッドを使用しなくて良くなったので、Stateクラスの`initState()`メソッドから`addListener()`に関する処理を削除する。\n- StateクラスのbuildメソッドではAnimatedLogoクラスを生成する。引数としてanimationを渡す。\n\nanimate1と実行するときの動きの違いはありません。\n\n## アニメーションの状態変化をモニタリングする\n`addStatusListener()`メソッドを使用するとアニメーションの状態変化を受け取ることができると学習しました。\nアニメーションの値の遷移が終了するとき`AnimationStatus.completed`にアニメーションを逆再生させ、アニメーションの値が初期値に戻った時に再度スタートさせる処理を書きます。\n\n```dart:animate3\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Container(\n        margin: const EdgeInsets.symmetric(vertical: 10),\n        height: animation.value,\n        width: animation.value,\n        child: const FlutterLogo(),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      })\n      ..addStatusListener((status) => print('$status'));\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- Stateクラスのanimationの`addStatusListener()`メソッドを記載する。listnerとしてstatusが`AnimationStatus.completed：アニメーションの終了`になったらanimationの値の動きを逆転させ、さらにstatusが`AnimationStatus.dismissed：アニメーションの開始前`になったらアニメーションの値を進行するという処理を渡します。\n\n実行するとこのようになります。\n![animate3.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/d4de28fa-848c-d1b7-37d7-b95236411017.gif)\n\n## AnimatedBuilderを使用してリファクタリングする\nanimate3では、もしStateクラスのAnimationを変更した場合、AnimatedLogoの方もコードを修正しないといけなくなるという問題があります。\nそれを解決するため、責任を3つに分離する必要があります。\n- ロゴをレンダリングする\n- Animationを定義する\n- 値の遷移をレンダリングする\n\nAnimatedBuilderを使用するとこれを実現できます。\n\n```dart:animate4\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass LogoWidget extends StatelessWidget {\n  const LogoWidget({super.key});\n\n// Leave out the height and width so it fills the animating parent\n  @override\n  Widget build(BuildContext context) {\n    return Container(\n      margin: const EdgeInsets.symmetric(vertical: 10),\n      child: const FlutterLogo(),\n    );\n  }\n}\n\nclass GrowTransition extends StatelessWidget {\n  const GrowTransition(\n      {required this.child, required this.animation, super.key});\n\n  final Widget child;\n  final Animation\u003Cdouble> animation;\n\n  @override\n  Widget build(BuildContext context) {\n    return Center(\n      child: AnimatedBuilder(\n        animation: animation,\n        builder: (context, child) {\n          return SizedBox(\n            height: animation.value,\n            width: animation.value,\n            child: child,\n          );\n        },\n        child: child,\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      })\n      ..addStatusListener((status) => print('$status'));\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) {\n    return GrowTransition(\n      animation: animation,\n      child: const LogoWidget(),\n    );\n  }\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n変更点は以下の通りです。\n- LogoWidgetクラスを定義します。アニメーションとして表示したいウィジェットのみを返します。\n- GrowTransitionクラスを定義します。このクラスが生成されるときにコンストラクタで表示するウィジェットとanimationを受け取ります。`builder()`メソッド内でAnimatedBuilderを使用してアニメーションを生成します。\n- Stateクラスの`builder()`メソッド内ではGrowTransitionクラスにanimationとロゴを渡して生成します。\n\n実行結果はanimate3と同じです。\n\n## 同時進行のアニメーション\n透明度とサイズのように、一度に複数のアニメーション(Tween)を生成したい場合があります。\n```dart\ncontroller =\n    AnimationController(duration: const Duration(seconds: 2), vsync: this);\nsizeAnimation = Tween\u003Cdouble>(begin: 0, end: 300).animate(controller);\nopacityAnimation = Tween\u003Cdouble>(begin: 0.1, end: 1).animate(controller);\n```\n\nしかしAnimatedWidgetは1つのアニメーションしか受け取れません。そのため、上記のように2つのアニメーションをStateクラスで生成しても行き場がありません。\nそのためアニメーションはTweenから生成していないものをAnimatedWidgetの引数に渡し、渡した先でそれぞれTweenを生成するようにします。\nこのとき、`animation.value`ではTweenから生成していない値を受け取ることになるため、Tweenのevaluateメソッドを使用します。`_sizeTween.evaluate(animation)`のようにしてanimationの現在の値をTweenを通して受け取ります。\n\n```dart:animate5\nimport 'package:flutter/material.dart';\n\nvoid main() => runApp(const LogoApp());\n\nclass AnimatedLogo extends AnimatedWidget {\n  const AnimatedLogo({super.key, required Animation\u003Cdouble> animation})\n      : super(listenable: animation);\n\n  // Make the Tweens static because they don't change.\n  static final _opacityTween = Tween\u003Cdouble>(begin: 0.1, end: 1);\n  static final _sizeTween = Tween\u003Cdouble>(begin: 0, end: 300);\n\n  @override\n  Widget build(BuildContext context) {\n    final animation = listenable as Animation\u003Cdouble>;\n    return Center(\n      child: Opacity(\n        opacity: _opacityTween.evaluate(animation),\n        child: Container(\n          margin: const EdgeInsets.symmetric(vertical: 10),\n          height: _sizeTween.evaluate(animation),\n          width: _sizeTween.evaluate(animation),\n          child: const FlutterLogo(),\n        ),\n      ),\n    );\n  }\n}\n\nclass LogoApp extends StatefulWidget {\n  const LogoApp({super.key});\n\n  @override\n  State\u003CLogoApp> createState() => _LogoAppState();\n}\n\nclass _LogoAppState extends State\u003CLogoApp> with SingleTickerProviderStateMixin {\n  late Animation\u003Cdouble> animation;\n  late AnimationController controller;\n\n  @override\n  void initState() {\n    super.initState();\n    controller =\n        AnimationController(duration: const Duration(seconds: 2), vsync: this);\n    animation = CurvedAnimation(parent: controller, curve: Curves.easeIn)\n      ..addStatusListener((status) {\n        if (status == AnimationStatus.completed) {\n          controller.reverse();\n        } else if (status == AnimationStatus.dismissed) {\n          controller.forward();\n        }\n      });\n    controller.forward();\n  }\n\n  @override\n  Widget build(BuildContext context) => AnimatedLogo(animation: animation);\n\n  @override\n  void dispose() {\n    controller.dispose();\n    super.dispose();\n  }\n}\n```\n\n実行すると以下の通りとなります。animate3やanimate4とは異なり、サイズだけでなく透明度も変化しています。\n![animate5.gif](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/15596e1a-88d5-ec65-eaaa-7a9c2e35e60a.gif)\n\n# さいごに\nFlutterのアニメーションについて学習してきました。画面表示側の処理には詳しくありませんが、アプリを起動した際のロゴ表示や、スクロールした際の表示などに応用できそうです。\n","2023-03-11T15:15:52+09:00","c115932d3bbf15df0f1d",4,[120],{"name":70,"versions":121},[],"Flutterのアニメーションのチュートリアル","2023-03-11T16:32:15+09:00","https://qiita.com/y5347M/items/c115932d3bbf15df0f1d",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},6041,{"rendered_body":128,"body":129,"coediting":7,"comments_count":8,"created_at":130,"group":10,"id":131,"likes_count":65,"private":7,"reactions_count":8,"stocks_count":8,"tags":132,"title":145,"updated_at":146,"url":147,"user":148,"page_views_count":149,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-3:268\">プロジェクトをテストする中でどうしてもアプリ日時を変更したいときがあると思います。\u003Cbr>\nアプリを起動するコンテナの日時を変更しても実現はできますが、HTTPS通信をする際にエラーが発生することがありました。そのためClockクラスを利用して日時変更をする方法を試したのでメモです。\u003C/p>\n\u003Cp data-sourcepos=\"5:1-5:42\">コードサンプルはこちらです。\u003C/p>\n\u003Cp data-sourcepos=\"7:1-7:45\">\u003Ciframe id=\"qiita-embed-content__7607be51b4c2d12fcf1633d22eb82d28\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__7607be51b4c2d12fcf1633d22eb82d28\" data-content=\"https%3A%2F%2Fgithub.com%2Fy5347M%2Fclock-config-sample\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"9:1-9:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"10:1-15:0\">\n\u003Cli data-sourcepos=\"10:1-10:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:45\">IntelliJ IDEA: 2022.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:13\">Gradle: 7.5\u003C/li>\n\u003Cli data-sourcepos=\"13:1-13:22\">Java: temurin 17.0.3\u003C/li>\n\u003Cli data-sourcepos=\"14:1-15:0\">Spring Boot: 2.7.10-SNAPSHOT\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"16:1-16:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"18:1-18:30\">\n\u003Cspan id=\"プロジェクトの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロジェクトの作成\u003C/h2>\n\u003Ch4 data-sourcepos=\"20:1-20:49\">\n\u003Cspan id=\"spring-initializrでプロジェクト作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#spring-initializr%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>spring initializrでプロジェクト作成\u003C/h4>\n\u003Cp data-sourcepos=\"21:1-23:139\">\u003Ca href=\"https://start.spring.io/\" rel=\"nofollow noopener\" target=\"_blank\">https://start.spring.io/\u003C/a>でプロジェクトの雛形を作成します。\u003Cbr>\n以下の画像のような構成にしています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3452ce5e-d040-3c3d-dc55-8a4575a56f47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=996da8961649fa834573bc2b6baa045b\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3452ce5e-d040-3c3d-dc55-8a4575a56f47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=996da8961649fa834573bc2b6baa045b\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3452ce5e-d040-3c3d-dc55-8a4575a56f47.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=17fcf8fa82d1eaf4f752ece6a5a9089a 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3452ce5e-d040-3c3d-dc55-8a4575a56f47.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"25:1-25:104\">GENERATEボタンを押してダウンロードしてきます。それをIDEツールで開きます。\u003C/p>\n\u003Ch4 data-sourcepos=\"27:1-27:32\">\n\u003Cspan id=\"コントローラー作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コントローラー作成\u003C/h4>\n\u003Cp data-sourcepos=\"29:1-30:127\">\u003Ccode>http://localhost:8080/api/datetime\u003C/code>にアクセスすることでレスポンスが返却されるAPIを作成しました。\u003Cbr>\n\u003Ccode>LocalDateTime.now()\u003C/code>の代わりに今回作成する\u003Ccode>CustomLocalDateTime.customLocalDateTime()\u003C/code>等を使用しています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"32:1-54:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">DatetimeController.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@RestController\u003C/span>\n\u003Cspan class=\"nd\">@RequestMapping\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"/api/datetime\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">DatetimeController\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Data\u003C/span>\n    \u003Cspan class=\"nd\">@Builder\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">Response\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span> \u003Cspan class=\"n\">localDateTime\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n        \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">LocalDate\u003C/span> \u003Cspan class=\"n\">localDate\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n        \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">LocalTime\u003C/span> \u003Cspan class=\"n\">localTime\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@GetMapping\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"nc\">Response\u003C/span> \u003Cspan class=\"nf\">getCurrentDatetime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Response\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">builder\u003C/span>\u003Cspan class=\"o\">()\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">localDateTime\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">customLocalDateTime\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">localDate\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">customLocalDate\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">localTime\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">customLocalTime\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">build\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"56:1-56:31\">\n\u003Cspan id=\"clockconfigクラス作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#clockconfig%E3%82%AF%E3%83%A9%E3%82%B9%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ClockConfigクラス作成\u003C/h4>\n\u003Cp data-sourcepos=\"57:1-59:64\">Configクラスを作成します。\u003Cbr>\nシステム起動時にappilication.ymlから値を読み取り、時間指定されていればその時間を反映したClock、そうでなければシステム日時を反映したClockを返却します。\u003Cbr>\nあらかじめZoneは\u003Ccode>Asia/Tokyo\u003C/code>を指定しておきます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"61:1-81:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">ClockConfig.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@Configuration\u003C/span>\n\u003Cspan class=\"nd\">@Slf4j\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Value\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"${time-travel.specified-time}\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"nd\">@Bean\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"nc\">Clock\u003C/span> \u003Cspan class=\"nf\">clock\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">if\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">ObjectUtils\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">isEmpty\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">))\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n            \u003Cspan class=\"n\">log\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">info\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Using default clock\"\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n            \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Clock\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">system\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">ZoneId\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">of\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Asia/Tokyo\"\u003C/span>\u003Cspan class=\"o\">));\u003C/span>\n        \u003Cspan class=\"o\">}\u003C/span> \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n            \u003Cspan class=\"n\">log\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">info\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Using custom clock: {}\"\u003C/span>\u003Cspan class=\"o\">,\u003C/span> \u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n            \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Clock\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">fixed\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">Instant\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">parse\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">specifiedTime\u003C/span>\u003Cspan class=\"o\">),\u003C/span> \u003Cspan class=\"nc\">ZoneId\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">of\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"Asia/Tokyo\"\u003C/span>\u003Cspan class=\"o\">));\u003C/span>\n        \u003Cspan class=\"o\">}\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"83:1-83:57\">applicaiton.ymlには以下の設定を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"84:1-87:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">time-travel\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">specified-time\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"89:1-89:39\">\n\u003Cspan id=\"customlocaldatetimeクラス作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#customlocaldatetime%E3%82%AF%E3%83%A9%E3%82%B9%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>CustomLocalDateTimeクラス作成\u003C/h4>\n\u003Cp data-sourcepos=\"90:1-90:195\">beanとして用意したClockを各Component上でDIしてもいいのですが、管理が煩雑になります。そのため時間を管理するUtilクラスを作成して利用します。\u003C/p>\n\u003Cp data-sourcepos=\"92:1-92:122\">staticであるUtilクラスにconfigをセットするため、\u003Ccode>setClockConfig\u003C/code>メソッドを用意しておきます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"94:1-117:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">CustomLocalDateTime.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">setClockConfig\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clockConfig\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nf\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span> \u003Cspan class=\"nf\">customLocalDateTime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">now\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clock\u003C/span>\u003Cspan class=\"o\">());\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">LocalDate\u003C/span> \u003Cspan class=\"nf\">customLocalDate\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">LocalDate\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">now\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clock\u003C/span>\u003Cspan class=\"o\">());\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">LocalTime\u003C/span> \u003Cspan class=\"nf\">customLocalTime\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">LocalTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">now\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">clock\u003C/span>\u003Cspan class=\"o\">());\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"119:1-119:44\">\n\u003Cspan id=\"staticcontextinitializerクラス作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#staticcontextinitializer%E3%82%AF%E3%83%A9%E3%82%B9%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>StaticContextInitializerクラス作成\u003C/h4>\n\u003Cp data-sourcepos=\"120:1-120:220\">staticであるUtilクラスにconfigをセットするため、アプリケーション起動時に動作するようStaticContextInitializerクラスを準備します。参考にしたのは以下のサイトです。\u003C/p>\n\u003Cp data-sourcepos=\"122:1-122:93\">\u003Ciframe id=\"qiita-embed-content__b17b2cc4247f01b069adc90feede35cc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__b17b2cc4247f01b069adc90feede35cc\" data-content=\"https%3A%2F%2Fbetter-coding.com%2Fjava-spring-boot-how-to-autowire-bean-to-a-static-field-of-a-class%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"124:1-136:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">StaticContextInitializer.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@Component\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">StaticContextInitializer\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Autowired\u003C/span>\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">ClockConfig\u003C/span> \u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"nd\">@PostConstruct\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">init\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"nc\">CustomLocalDateTime\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">setClockConfig\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">clockConfig\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"139:1-139:9\">\n\u003Cspan id=\"実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実行\u003C/h2>\n\u003Ch4 data-sourcepos=\"141:1-141:35\">\n\u003Cspan id=\"日時を指定しない場合\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%97%A5%E6%99%82%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%AA%E3%81%84%E5%A0%B4%E5%90%88\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>日時を指定しない場合\u003C/h4>\n\u003Cp data-sourcepos=\"142:1-142:57\">applicaiton.ymlには以下の設定を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"143:1-146:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">time-travel\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">specified-time\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"148:1-149:89\">アプリケーションを起動します。\u003Cbr>\nログにはデフォルトのClockを使用するという内容が表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"150:1-152:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">log\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">2023-03-05 11:34:07.851  INFO 9299 --- [           main] c.e.c.config.ClockConfig                 : Using default clock\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"154:1-155:57\">\u003Ccode>http://localhost:8080/api/datetime\u003C/code>にアクセスします。\u003Cbr>\nレスポンスには現在日時が表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"156:1-158:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">レスポンス\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">{\"localDateTime\":\"2023-03-05T11:35:16.674985\",\"localDate\":\"2023-03-05\",\"localTime\":\"11:35:16.675263\"}\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"160:1-160:32\">\n\u003Cspan id=\"日時を指定する場合\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%97%A5%E6%99%82%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>日時を指定する場合\u003C/h4>\n\u003Cp data-sourcepos=\"161:1-161:57\">applicaiton.ymlには以下の設定を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"162:1-165:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">time-travel\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">specified-time\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">2025-01-01T12:00:00.000Z\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"167:1-168:95\">アプリケーションを起動します。\u003Cbr>\nログには指定された日時のClockを使用するという内容が表示されます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"169:1-171:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">log\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">2023-03-05 11:38:07.522  INFO 9373 --- [           main] c.e.c.config.ClockConfig                 : Using custom clock: 2025-01-01T12:00:00.000Z\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"173:1-175:248\">\u003Ccode>http://localhost:8080/api/datetime\u003C/code>にアクセスします。\u003Cbr>\nレスポンスには指定された日時が表示されます。\u003Cbr>\n注意が必要なのは、指定した時間はUTCで表示されるのはJSTとなる点です。こちらは各プロジェクト内で統一してください。変更する場合はClockConfigクラスのゾーンを変更してください。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"176:1-178:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">レスポンス\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">{\"localDateTime\":\"2025-01-01T21:00:00\",\"localDate\":\"2025-01-01\",\"localTime\":\"21:00:00\"}\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch1 data-sourcepos=\"180:1-180:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"181:1-182:54\">アプリ内の日時を変更してテストすることが多いと思います。一つの例として参考にしていただけると幸いです。\u003Cbr>\n他の方法があればぜひご共有ください！\u003C/p>\n","# 前提\nプロジェクトをテストする中でどうしてもアプリ日時を変更したいときがあると思います。\nアプリを起動するコンテナの日時を変更しても実現はできますが、HTTPS通信をする際にエラーが発生することがありました。そのためClockクラスを利用して日時変更をする方法を試したのでメモです。\n\nコードサンプルはこちらです。\n\nhttps://github.com/y5347M/clock-config-sample\n\n# 環境\n- macOS: 12.6\n- IntelliJ IDEA: 2022.2.3 (Community Edition)\n- Gradle: 7.5\n- Java: temurin 17.0.3\n- Spring Boot: 2.7.10-SNAPSHOT\n\n# 手順\n\n## プロジェクトの作成\n\n#### spring initializrでプロジェクト作成\n[https://start.spring.io/](https://start.spring.io/)でプロジェクトの雛形を作成します。\n以下の画像のような構成にしています。\n\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3452ce5e-d040-3c3d-dc55-8a4575a56f47.png\">\n\nGENERATEボタンを押してダウンロードしてきます。それをIDEツールで開きます。\n\n#### コントローラー作成\n\n`http://localhost:8080/api/datetime`にアクセスすることでレスポンスが返却されるAPIを作成しました。\n`LocalDateTime.now()`の代わりに今回作成する`CustomLocalDateTime.customLocalDateTime()`等を使用しています。\n\n```java:DatetimeController.java\n@RestController\n@RequestMapping(\"/api/datetime\")\npublic class DatetimeController {\n\n    @Data\n    @Builder\n    public static class Response {\n        private LocalDateTime localDateTime;\n        private LocalDate localDate;\n        private LocalTime localTime;\n    }\n\n    @GetMapping\n    public Response getCurrentDatetime() {\n        return Response.builder()\n                .localDateTime(CustomLocalDateTime.customLocalDateTime())\n                .localDate(CustomLocalDateTime.customLocalDate())\n                .localTime(CustomLocalDateTime.customLocalTime())\n                .build();\n    }\n}\n```\n\n#### ClockConfigクラス作成\nConfigクラスを作成します。\nシステム起動時にappilication.ymlから値を読み取り、時間指定されていればその時間を反映したClock、そうでなければシステム日時を反映したClockを返却します。\nあらかじめZoneは`Asia/Tokyo`を指定しておきます。\n\n```java:ClockConfig.java\n@Configuration\n@Slf4j\npublic class ClockConfig {\n\n    @Value(\"${time-travel.specified-time}\")\n    private String specifiedTime;\n\n    @Bean\n    public Clock clock() {\n        if(ObjectUtils.isEmpty(specifiedTime)) {\n            log.info(\"Using default clock\");\n            return Clock.system(ZoneId.of(\"Asia/Tokyo\"));\n        } else {\n            log.info(\"Using custom clock: {}\", specifiedTime);\n            return Clock.fixed(Instant.parse(specifiedTime), ZoneId.of(\"Asia/Tokyo\"));\n        }\n    }\n\n}\n```\n\napplicaiton.ymlには以下の設定を追加します。\n```yml:application.yml\ntime-travel:\n  specified-time: \n```\n\n#### CustomLocalDateTimeクラス作成\nbeanとして用意したClockを各Component上でDIしてもいいのですが、管理が煩雑になります。そのため時間を管理するUtilクラスを作成して利用します。\n\nstaticであるUtilクラスにconfigをセットするため、`setClockConfig`メソッドを用意しておきます。\n\n```java:CustomLocalDateTime.java\npublic class CustomLocalDateTime {\n\n    private static ClockConfig clockConfig;\n\n    public static void setClockConfig(ClockConfig clockConfig) {\n        CustomLocalDateTime.clockConfig = clockConfig;\n    }\n\n    private CustomLocalDateTime() {}\n\n    public static LocalDateTime customLocalDateTime() {\n        return LocalDateTime.now(clockConfig.clock());\n    }\n\n    public static LocalDate customLocalDate() {\n        return LocalDate.now(clockConfig.clock());\n    }\n\n    public static LocalTime customLocalTime() {\n        return LocalTime.now(clockConfig.clock());\n    }\n}\n```\n\n#### StaticContextInitializerクラス作成\nstaticであるUtilクラスにconfigをセットするため、アプリケーション起動時に動作するようStaticContextInitializerクラスを準備します。参考にしたのは以下のサイトです。\n\nhttps://better-coding.com/java-spring-boot-how-to-autowire-bean-to-a-static-field-of-a-class/\n\n```java:StaticContextInitializer.java\n@Component\npublic class StaticContextInitializer {\n\n    @Autowired\n    private ClockConfig clockConfig;\n\n    @PostConstruct\n    public void init() {\n        CustomLocalDateTime.setClockConfig(clockConfig);\n    }\n}\n```\n\n\n## 実行\n\n#### 日時を指定しない場合\napplicaiton.ymlには以下の設定を追加します。\n```yml:application.yml\ntime-travel:\n  specified-time: \n```\n\nアプリケーションを起動します。\nログにはデフォルトのClockを使用するという内容が表示されます。\n```console:log\n2023-03-05 11:34:07.851  INFO 9299 --- [           main] c.e.c.config.ClockConfig                 : Using default clock\n```\n\n`http://localhost:8080/api/datetime`にアクセスします。\nレスポンスには現在日時が表示されます。\n```console:レスポンス\n{\"localDateTime\":\"2023-03-05T11:35:16.674985\",\"localDate\":\"2023-03-05\",\"localTime\":\"11:35:16.675263\"}\n```\n\n#### 日時を指定する場合\napplicaiton.ymlには以下の設定を追加します。\n```yml:application.yml\ntime-travel:\n  specified-time: 2025-01-01T12:00:00.000Z\n```\n\nアプリケーションを起動します。\nログには指定された日時のClockを使用するという内容が表示されます。\n```console:log\n2023-03-05 11:38:07.522  INFO 9373 --- [           main] c.e.c.config.ClockConfig                 : Using custom clock: 2025-01-01T12:00:00.000Z\n```\n\n`http://localhost:8080/api/datetime`にアクセスします。\nレスポンスには指定された日時が表示されます。\n注意が必要なのは、指定した時間はUTCで表示されるのはJSTとなる点です。こちらは各プロジェクト内で統一してください。変更する場合はClockConfigクラスのゾーンを変更してください。\n```console:レスポンス\n{\"localDateTime\":\"2025-01-01T21:00:00\",\"localDate\":\"2025-01-01\",\"localTime\":\"21:00:00\"}\n```\n\n# さいごに\nアプリ内の日時を変更してテストすることが多いと思います。一つの例として参考にしていただけると幸いです。\n他の方法があればぜひご共有ください！\n\n","2023-03-05T11:43:31+09:00","5c679fa1d351fc8ef02b",[133,136,139,142],{"name":134,"versions":135},"Java",[],{"name":137,"versions":138},"テスト",[],{"name":140,"versions":141},"clock",[],{"name":143,"versions":144},"SpringBoot",[],"Spring Boot内の現在日時を変更する","2023-03-05T11:50:06+09:00","https://qiita.com/y5347M/items/5c679fa1d351fc8ef02b",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},4237,{"rendered_body":151,"body":152,"coediting":7,"comments_count":8,"created_at":153,"group":10,"id":154,"likes_count":65,"private":7,"reactions_count":8,"stocks_count":65,"tags":155,"title":167,"updated_at":168,"url":169,"user":170,"page_views_count":171,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:72\">今回はこちらの記事を参考にさせていただきました！\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:56\">\u003Ciframe id=\"qiita-embed-content__89d5af2039b597287987bd2b2a73b44e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__89d5af2039b597287987bd2b2a73b44e\" data-content=\"https%3A%2F%2Fzenn.dev%2Fflutteruniv_dev%2Farticles%2Fefae4bf6d457e1\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:157\">上記記事ではChatGPTを使用しているのですが、同じAPIを使うのではなく、画像生成APIを使って画像を生成してみます。\u003C/p>\n\u003Ch1 data-sourcepos=\"9:1-9:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"10:1-14:0\">\n\u003Cli data-sourcepos=\"10:1-10:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:43\">Android Studio Dolphin | 2021.3.1 Patch 1\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:24\">flutter: 3.6.0-0.1.pre\u003C/li>\n\u003Cli data-sourcepos=\"13:1-14:0\">Dart: 2.19.0\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"15:1-15:38\">\n\u003Cspan id=\"openaiの画像生成apiについて\" class=\"fragment\">\u003C/span>\u003Ca href=\"#openai%E3%81%AE%E7%94%BB%E5%83%8F%E7%94%9F%E6%88%90api%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>OpenAIの画像生成APIについて\u003C/h1>\n\u003Cp data-sourcepos=\"17:1-17:46\">\u003Ciframe id=\"qiita-embed-content__ad0bacde991b54fe5c8f385021073f9a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ad0bacde991b54fe5c8f385021073f9a\" data-content=\"https%3A%2F%2Fplatform.openai.com%2Fdocs%2Fguides%2Fimages\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"19:1-20:108\">リクエストの仕方によっていくつか使用方法があります。\u003Cbr>\n今回は文字列を送信して、それを元に生成した画像のURLを返却してもらいます。\u003C/p>\n\u003Cp data-sourcepos=\"22:1-22:109\">以下はリンク先のマニュアルに記載されている、curlでリクエストする方法です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"Generate an image\" data-sourcepos=\"23:1-32:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>curl https://api.openai.com/v1/images/generations \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"34:1-34:57\">$OPENAI_API_KEYが必要となるため取得します。\u003C/p>\n\u003Col data-sourcepos=\"36:1-44:0\">\n\u003Cli data-sourcepos=\"36:1-38:0\">\n\u003Cp data-sourcepos=\"36:4-37:143\">まず\u003Ca href=\"https://auth0.openai.com/u/login/identifier?state=hKFo2SByZ1JLZVg1dE1yOWo5VlFNcHBzbkJfT3JqU2w5eGFhS6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIDBRN0Q2QThVVVFJVUs5Vmpwdm1HRmlNbkFpN3FUWnlzo2NpZNkgRFJpdnNubTJNdTQyVDNLT3BxZHR3QjNOWXZpSFl6d0Q\" rel=\"nofollow noopener\" target=\"_blank\">こちら\u003C/a>から会員登録してください。メールアドレスの他に、GoogleアカウントまたはMicrosoftアカウントが使用できます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F944c5737-90c4-dc77-c070-c0bb3c890bb0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b3b2d2ae9712b482a6e0437456098fa5\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F944c5737-90c4-dc77-c070-c0bb3c890bb0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b3b2d2ae9712b482a6e0437456098fa5\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F944c5737-90c4-dc77-c070-c0bb3c890bb0.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e634d0e984bf9a5c565ed4d117f7efdd 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/944c5737-90c4-dc77-c070-c0bb3c890bb0.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli data-sourcepos=\"39:1-41:0\">\n\u003Cp data-sourcepos=\"39:4-40:143\">右上のアイコンを押してView API Keysメニューを開きます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F267de751-7065-197e-a334-0eb0c5ecc5d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f8068229a4049d06bc69a1f233abb2e1\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F267de751-7065-197e-a334-0eb0c5ecc5d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f8068229a4049d06bc69a1f233abb2e1\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F267de751-7065-197e-a334-0eb0c5ecc5d1.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f9aaafe1e2870e5632cf5690aaf69c20 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/267de751-7065-197e-a334-0eb0c5ecc5d1.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003C/li>\n\u003Cli data-sourcepos=\"42:1-44:0\">\n\u003Cp data-sourcepos=\"42:4-43:143\">Create New Secretボタンを押せばAPIキーを生成することができます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e80d99aaeacce02f9e66f7eacfa99fe\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=5e80d99aaeacce02f9e66f7eacfa99fe\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4d75d1f88005b5bca7135d45461793c9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003C/li>\n\u003C/ol>\n\u003Cp data-sourcepos=\"45:1-46:139\">ちなみに\u003Ca href=\"https://platform.openai.com/account/usage\" rel=\"nofollow noopener\" target=\"_blank\">Usageページ\u003C/a>を見ると無料でAPIを使用できる期間等を見ることができます。使いすぎないようにご注意ください。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc1dfadb7-61c5-fbd4-f617-33a8c98f297c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29efa1c9b893891bac1c9179b1650f18\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc1dfadb7-61c5-fbd4-f617-33a8c98f297c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=29efa1c9b893891bac1c9179b1650f18\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc1dfadb7-61c5-fbd4-f617-33a8c98f297c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=594045b0f976dd0ae51dbdbc35cdcfb2 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c1dfadb7-61c5-fbd4-f617-33a8c98f297c.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"49:1-49:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch3 data-sourcepos=\"51:1-51:38\">\n\u003Cspan id=\"flutterプロジェクトを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#flutter%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Flutterプロジェクトを作成\u003C/h3>\n\u003Cp data-sourcepos=\"52:1-52:66\">まずは適当にプロジェクトを作成してください。\u003C/p>\n\u003Ch3 data-sourcepos=\"54:1-54:39\">\n\u003Cspan id=\"pubspecymlにdependenciesを追加\" class=\"fragment\">\u003C/span>\u003Ca href=\"#pubspecyml%E3%81%ABdependencies%E3%82%92%E8%BF%BD%E5%8A%A0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>pubspec.ymlにdependenciesを追加\u003C/h3>\n\u003Cp data-sourcepos=\"55:1-55:103\">今回はdioというパッケージを使用します。HTTP通信を行うために利用します。\u003C/p>\n\u003Cp data-sourcepos=\"57:1-57:28\">\u003Ciframe id=\"qiita-embed-content__2f6cbf0c66c4ddd4becbf8b2c11b6900\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2f6cbf0c66c4ddd4becbf8b2c11b6900\" data-content=\"https%3A%2F%2Fpub.dev%2Fpackages%2Fdio\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"59:1-69:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">pubspec.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nl\">dependencies:\u003C/span>\n  \u003Cspan class=\"nl\">flutter:\u003C/span>\n    \u003Cspan class=\"nl\">sdk:\u003C/span> \u003Cspan class=\"n\">flutter\u003C/span>\n\n\n  \u003Cspan class=\"ss\">#\u003C/span> \u003Cspan class=\"n\">The\u003C/span> \u003Cspan class=\"n\">following\u003C/span> \u003Cspan class=\"n\">adds\u003C/span> \u003Cspan class=\"n\">the\u003C/span> \u003Cspan class=\"n\">Cupertino\u003C/span> \u003Cspan class=\"n\">Icons\u003C/span> \u003Cspan class=\"n\">font\u003C/span> \u003Cspan class=\"n\">to\u003C/span> \u003Cspan class=\"n\">your\u003C/span> \u003Cspan class=\"n\">application\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"ss\">#\u003C/span> \u003Cspan class=\"n\">Use\u003C/span> \u003Cspan class=\"k\">with\u003C/span> \u003Cspan class=\"n\">the\u003C/span> \u003Cspan class=\"n\">CupertinoIcons\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">for\u003C/span> \u003Cspan class=\"n\">iOS\u003C/span> \u003Cspan class=\"n\">style\u003C/span> \u003Cspan class=\"n\">icons\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"nl\">cupertino_icons:\u003C/span> \u003Cspan class=\"o\">^\u003C/span>\u003Cspan class=\"mf\">1.0\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"mi\">2\u003C/span>\n  \u003Cspan class=\"nl\">dio:\u003C/span> \u003Cspan class=\"o\">^\u003C/span>\u003Cspan class=\"mf\">4.0\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"mi\">6\u003C/span> \u003Cspan class=\"ss\">#\u003C/span> \u003Cspan class=\"err\">この行を追加\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"71:1-71:189\">IDEによっては自動でダウンロードしてくれますが、そうでない場合はプロジェクトのルートディレクトリ配下でコマンドを叩いてください。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"73:1-75:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">console\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">flutter pub get\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch3 data-sourcepos=\"77:1-77:25\">\n\u003Cspan id=\"ファイルを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ファイルを作成\u003C/h3>\n\u003Cp data-sourcepos=\"79:1-79:96\">アプリのメインロジック。ただ画像生成ページを呼んでいるだけです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"80:1-103:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">main.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:open_api/open_api/image_generation_api_page.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"n\">runApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">MyApp\u003C/span>\u003Cspan class=\"p\">());\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">MyApp\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatelessWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">MyApp\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">key\u003C/span>\u003Cspan class=\"p\">});\u003C/span>\n\n  \u003Cspan class=\"c1\">// This widget is the root of your application.\u003C/span>\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">MaterialApp\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">title:\u003C/span> \u003Cspan class=\"s\">'Flutter Demo'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"nl\">theme:\u003C/span> \u003Cspan class=\"n\">ThemeData\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">primarySwatch:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">blue\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"nl\">home:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">ImageGenerationAPIPage\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"105:1-106:81\">画像生成ページです。\u003Cbr>\nボタンは送信ボタンのようなアイコンを使用してみました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"dart\" data-sourcepos=\"107:1-178:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">image_generation_api_page.dart\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:dio/dio.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"s\">'package:flutter/material.dart'\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">ImageGenerationAPIPage\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">StatefulWidget\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">ImageGenerationAPIPage\u003C/span>\u003Cspan class=\"p\">({\u003C/span>\u003Cspan class=\"n\">Key\u003C/span>\u003Cspan class=\"o\">?\u003C/span> \u003Cspan class=\"n\">key\u003C/span>\u003Cspan class=\"p\">})\u003C/span> \u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"k\">super\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">key:\u003C/span> \u003Cspan class=\"n\">key\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">_ImageGenerationAPIPageState\u003C/span> \u003Cspan class=\"n\">createState\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"o\">=\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">_ImageGenerationAPIPageState\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">_ImageGenerationAPIPageState\u003C/span> \u003Cspan class=\"kd\">extends\u003C/span> \u003Cspan class=\"n\">State\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">ImageGenerationAPIPage\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">imageUrl\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s\">''\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n  \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">textForGenerationImageController\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">TextEditingController\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n\n  \u003Cspan class=\"nd\">@override\u003C/span>\n  \u003Cspan class=\"n\">Widget\u003C/span> \u003Cspan class=\"n\">build\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">BuildContext\u003C/span> \u003Cspan class=\"n\">context\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">Scaffold\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n      \u003Cspan class=\"nl\">appBar:\u003C/span> \u003Cspan class=\"n\">AppBar\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">title:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Text\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'Image Generation'\u003C/span>\u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n      \u003Cspan class=\"nl\">body:\u003C/span> \u003Cspan class=\"n\">Column\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"nl\">children:\u003C/span> \u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"n\">Widget\u003C/span>\u003Cspan class=\"p\">&gt;[\u003C/span>\n          \u003Cspan class=\"n\">Expanded\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">child:\u003C/span> \u003Cspan class=\"n\">Image\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">network\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">imageUrl\u003C/span>\u003Cspan class=\"p\">)),\u003C/span>\n          \u003Cspan class=\"n\">TextField\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"nl\">autofocus:\u003C/span> \u003Cspan class=\"kc\">true\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">style:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">TextStyle\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n              \u003Cspan class=\"nl\">fontSize:\u003C/span> \u003Cspan class=\"mf\">20.0\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n              \u003Cspan class=\"nl\">color:\u003C/span> \u003Cspan class=\"n\">Colors\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">black\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"p\">),\u003C/span>\n            \u003Cspan class=\"nl\">controller:\u003C/span> \u003Cspan class=\"n\">textForGenerationImageController\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"nl\">decoration:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">InputDecoration\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n              \u003Cspan class=\"nl\">border:\u003C/span> \u003Cspan class=\"n\">InputBorder\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">none\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n              \u003Cspan class=\"nl\">hintText:\u003C/span> \u003Cspan class=\"s\">'Type text to generate image!'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"p\">),\u003C/span>\n          \u003Cspan class=\"n\">IconButton\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nl\">onPressed:\u003C/span> \u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"kd\">async\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n            \u003Cspan class=\"kt\">String\u003C/span> \u003Cspan class=\"n\">url\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"k\">await\u003C/span> \u003Cspan class=\"n\">generateImageFromText\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">textForGenerationImageController\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">text\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n            \u003Cspan class=\"n\">setState\u003C/span>\u003Cspan class=\"p\">(()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n              \u003Cspan class=\"n\">imageUrl\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">url\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n            \u003Cspan class=\"p\">});\u003C/span>\n          \u003Cspan class=\"p\">},\u003C/span> \u003Cspan class=\"nl\">icon:\u003C/span> \u003Cspan class=\"kd\">const\u003C/span> \u003Cspan class=\"n\">Icon\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">Icons\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">send\u003C/span>\u003Cspan class=\"p\">)),\u003C/span>\n        \u003Cspan class=\"p\">],\u003C/span>\n      \u003Cspan class=\"p\">),\u003C/span>\n    \u003Cspan class=\"p\">);\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"n\">Future\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"kt\">String\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"n\">generateImageFromText\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kt\">String\u003C/span> \u003Cspan class=\"n\">text\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"kd\">async\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kt\">String\u003C/span> \u003Cspan class=\"n\">apiKey\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s\">'XXXXXXXXXXXXXXXXXXXX'\u003C/span>\u003Cspan class=\"p\">;\u003C/span> \u003Cspan class=\"c1\">// ここをAPIキーに差し替え\u003C/span>\n    \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">dio\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">Dio\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"n\">dio\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">options\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">headers\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"s\">'Content-Type'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"s\">'application/json'\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">'Authorization'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"s\">'Bearer \u003C/span>\u003Cspan class=\"si\">$apiKey\u003C/span>\u003Cspan class=\"s\">'\u003C/span>\u003Cspan class=\"p\">};\u003C/span>\n\n    \u003Cspan class=\"k\">try\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n      \u003Cspan class=\"n\">Response\u003C/span> \u003Cspan class=\"n\">response\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"k\">await\u003C/span> \u003Cspan class=\"n\">dio\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">post\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"s\">'https://api.openai.com/v1/images/generations'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nl\">data:\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n          \u003Cspan class=\"s\">'prompt'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"n\">text\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n          \u003Cspan class=\"s\">'n'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n          \u003Cspan class=\"s\">'size'\u003C/span>\u003Cspan class=\"o\">:\u003C/span> \u003Cspan class=\"s\">'1024x1024'\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"p\">},\u003C/span>\n      \u003Cspan class=\"p\">);\u003C/span>\n      \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"n\">generatedImageUrl\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">response\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">data\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">'data'\u003C/span>\u003Cspan class=\"p\">][\u003C/span>\u003Cspan class=\"mi\">0\u003C/span>\u003Cspan class=\"p\">][\u003C/span>\u003Cspan class=\"s\">'url'\u003C/span>\u003Cspan class=\"p\">];\u003C/span>\n      \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">'generatedImageUrl:'\u003C/span> \u003Cspan class=\"o\">+\u003C/span> \u003Cspan class=\"n\">generatedImageUrl\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n      \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">generatedImageUrl\u003C/span>\u003Cspan class=\"p\">;\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span> \u003Cspan class=\"k\">catch\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n      \u003Cspan class=\"n\">print\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"p\">);\u003C/span>\n      \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">toString\u003C/span>\u003Cspan class=\"p\">();\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"180:1-180:200\">レスポンスではAPIが生成した画像へのURLが返却されます。それをsetStateメソッドでStateful Widgetのメンバ変数にセットすることで、画像を表示します。\u003C/p>\n\u003Cp data-sourcepos=\"182:1-183:139\">最初は画像へのURLがないのでエラーになっています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9d509b05379f921bdfc870c6dba439b0\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9d509b05379f921bdfc870c6dba439b0\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f6bccf2c21fba4386026736a26f04be3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"185:1-186:51\">「a white cat」と入力して送信ボタンを押します。\u003Cbr>\nしばらくすると画像が表示されます。\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F29a21da7-2bf9-90f1-e159-1ea1ea914738.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6f7920e8aa27991f01cccec374415494\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F29a21da7-2bf9-90f1-e159-1ea1ea914738.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6f7920e8aa27991f01cccec374415494\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F29a21da7-2bf9-90f1-e159-1ea1ea914738.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=60dc63127d2fb5fbdf168d3c6c6c7d82 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/29a21da7-2bf9-90f1-e159-1ea1ea914738.png\" loading=\"lazy\">\u003C/a>\n\u003Cp data-sourcepos=\"190:1-190:51\">もう一回押すと違う猫ちゃんが…！！\u003C/p>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc9ac2024-f561-befc-504d-82ea44d44850.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5e3dce3f6b8c7a3e7509c7fd4ac1667\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc9ac2024-f561-befc-504d-82ea44d44850.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f5e3dce3f6b8c7a3e7509c7fd4ac1667\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc9ac2024-f561-befc-504d-82ea44d44850.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=9382af53dc82fa27090dcf8d471a6438 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c9ac2024-f561-befc-504d-82ea44d44850.png\" loading=\"lazy\">\u003C/a>\n\u003Ch1 data-sourcepos=\"194:1-194:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"195:1-198:139\">利用すること自体は他の一般的なAPIとあまり変わりはないようです。\u003Cbr>\nただ生成できるものがすごいので、色々なサービスに組み込んだり、アイディア出しにも使ったりできそうです。\u003Cbr>\n例えばCMでお馴染みの（古い？）「蛍のいる渋谷」を見てみましょう。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F871e6474-139f-f93e-4f29-57a34f648c64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b94f0083cfafc9d67dcd0e8963df4b46\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F871e6474-139f-f93e-4f29-57a34f648c64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b94f0083cfafc9d67dcd0e8963df4b46\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F871e6474-139f-f93e-4f29-57a34f648c64.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c92119a682d9a3901c9487a5b235b20f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/871e6474-139f-f93e-4f29-57a34f648c64.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"200:1-200:60\">人と蛍が共存している感じがありますね…！\u003C/p>\n","# 前提\n今回はこちらの記事を参考にさせていただきました！\n\nhttps://zenn.dev/flutteruniv_dev/articles/efae4bf6d457e1\n\n上記記事ではChatGPTを使用しているのですが、同じAPIを使うのではなく、画像生成APIを使って画像を生成してみます。\n\n\n# 環境\n- macOS: 12.6\n- Android Studio Dolphin | 2021.3.1 Patch 1\n- flutter: 3.6.0-0.1.pre\n- Dart: 2.19.0\n\n# OpenAIの画像生成APIについて\n\nhttps://platform.openai.com/docs/guides/images\n\nリクエストの仕方によっていくつか使用方法があります。\n今回は文字列を送信して、それを元に生成した画像のURLを返却してもらいます。\n\n以下はリンク先のマニュアルに記載されている、curlでリクエストする方法です。\n```Generate an image\ncurl https://api.openai.com/v1/images/generations \\\n  -H 'Content-Type: application/json' \\\n  -H \"Authorization: Bearer $OPENAI_API_KEY\" \\\n  -d '{\n    \"prompt\": \"a white siamese cat\",\n    \"n\": 1,\n    \"size\": \"1024x1024\"\n  }'\n```\n\n$OPENAI_API_KEYが必要となるため取得します。\n\n1. まず[こちら](https://auth0.openai.com/u/login/identifier?state=hKFo2SByZ1JLZVg1dE1yOWo5VlFNcHBzbkJfT3JqU2w5eGFhS6Fur3VuaXZlcnNhbC1sb2dpbqN0aWTZIDBRN0Q2QThVVVFJVUs5Vmpwdm1HRmlNbkFpN3FUWnlzo2NpZNkgRFJpdnNubTJNdTQyVDNLT3BxZHR3QjNOWXZpSFl6d0Q)から会員登録してください。メールアドレスの他に、GoogleアカウントまたはMicrosoftアカウントが使用できます。\n    \u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/944c5737-90c4-dc77-c070-c0bb3c890bb0.png\">\n\n2. 右上のアイコンを押してView API Keysメニューを開きます。\n    \u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/267de751-7065-197e-a334-0eb0c5ecc5d1.png\">\n\n3. Create New Secretボタンを押せばAPIキーを生成することができます。\n    \u003Cimg width=\"800\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5b66a51b-7af9-6d14-d7a4-edcbe84983b4.png\">\n\nちなみに[Usageページ](https://platform.openai.com/account/usage)を見ると無料でAPIを使用できる期間等を見ることができます。使いすぎないようにご注意ください。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c1dfadb7-61c5-fbd4-f617-33a8c98f297c.png\">\n\n\n# 手順\n\n### Flutterプロジェクトを作成\nまずは適当にプロジェクトを作成してください。\n\n### pubspec.ymlにdependenciesを追加\n今回はdioというパッケージを使用します。HTTP通信を行うために利用します。\n\nhttps://pub.dev/packages/dio\n\n```dart:pubspec.yml\ndependencies:\n  flutter:\n    sdk: flutter\n\n\n  # The following adds the Cupertino Icons font to your application.\n  # Use with the CupertinoIcons class for iOS style icons.\n  cupertino_icons: ^1.0.2\n  dio: ^4.0.6 # この行を追加\n```\n\nIDEによっては自動でダウンロードしてくれますが、そうでない場合はプロジェクトのルートディレクトリ配下でコマンドを叩いてください。\n\n```console:console\nflutter pub get\n```\n\n### ファイルを作成\n\nアプリのメインロジック。ただ画像生成ページを呼んでいるだけです。\n```dart:main.dart\nimport 'package:flutter/material.dart';\nimport 'package:open_api/open_api/image_generation_api_page.dart';\n\nvoid main() {\n  runApp(const MyApp());\n}\n\nclass MyApp extends StatelessWidget {\n  const MyApp({super.key});\n\n  // This widget is the root of your application.\n  @override\n  Widget build(BuildContext context) {\n    return MaterialApp(\n      title: 'Flutter Demo',\n      theme: ThemeData(\n        primarySwatch: Colors.blue,\n      ),\n      home: const ImageGenerationAPIPage(),\n    );\n  }\n}\n```\n\n画像生成ページです。\nボタンは送信ボタンのようなアイコンを使用してみました。\n```dart:image_generation_api_page.dart\nimport 'package:dio/dio.dart';\nimport 'package:flutter/material.dart';\n\nclass ImageGenerationAPIPage extends StatefulWidget {\n  const ImageGenerationAPIPage({Key? key}) : super(key: key);\n\n  @override\n  _ImageGenerationAPIPageState createState() => _ImageGenerationAPIPageState();\n}\n\nclass _ImageGenerationAPIPageState extends State\u003CImageGenerationAPIPage> {\n  var imageUrl = '';\n  var textForGenerationImageController = TextEditingController();\n\n  @override\n  Widget build(BuildContext context) {\n    return Scaffold(\n      appBar: AppBar(\n        title: const Text('Image Generation'),\n      ),\n      body: Column(\n        children: \u003CWidget>[\n          Expanded(\n            child: Image.network(imageUrl)),\n          TextField(\n            autofocus: true,\n            style: const TextStyle(\n              fontSize: 20.0,\n              color: Colors.black,\n            ),\n            controller: textForGenerationImageController,\n            decoration: const InputDecoration(\n              border: InputBorder.none,\n              hintText: 'Type text to generate image!',\n            ),\n          ),\n          IconButton(onPressed: () async {\n            String url = await generateImageFromText(textForGenerationImageController.text);\n            setState(() {\n              imageUrl = url;\n            });\n          }, icon: const Icon(Icons.send)),\n        ],\n      ),\n    );\n  }\n\n  Future\u003CString> generateImageFromText(String text) async {\n    String apiKey = 'XXXXXXXXXXXXXXXXXXXX'; // ここをAPIキーに差し替え\n    var dio = Dio();\n    dio.options.headers = {'Content-Type': 'application/json', 'Authorization': 'Bearer $apiKey'};\n\n    try {\n      Response response = await dio.post(\n        'https://api.openai.com/v1/images/generations',\n        data: {\n          'prompt': text,\n          'n': 1,\n          'size': '1024x1024',\n        },\n      );\n      var generatedImageUrl = response.data['data'][0]['url'];\n      print('generatedImageUrl:' + generatedImageUrl);\n      return generatedImageUrl;\n    } catch (e) {\n      print(e);\n      return e.toString();\n    }\n  }\n}\n```\n\nレスポンスではAPIが生成した画像へのURLが返却されます。それをsetStateメソッドでStateful Widgetのメンバ変数にセットすることで、画像を表示します。\n\n最初は画像へのURLがないのでエラーになっています。\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/271162ee-ec3e-7b4d-b5f9-ea0fcf03ec70.png\">\n\n「a white cat」と入力して送信ボタンを押します。\nしばらくすると画像が表示されます。\n\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/29a21da7-2bf9-90f1-e159-1ea1ea914738.png\">\n\nもう一回押すと違う猫ちゃんが…！！\n\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c9ac2024-f561-befc-504d-82ea44d44850.png\">\n\n# さいごに\n利用すること自体は他の一般的なAPIとあまり変わりはないようです。\nただ生成できるものがすごいので、色々なサービスに組み込んだり、アイディア出しにも使ったりできそうです。\n例えばCMでお馴染みの（古い？）「蛍のいる渋谷」を見てみましょう。\n\u003Cimg width=\"400\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/871e6474-139f-f93e-4f29-57a34f648c64.png\">\n\n人と蛍が共存している感じがありますね…！\n","2023-02-10T00:48:09+09:00","c3a0dc9a63f3bb7140d6",[156,159,162,164],{"name":157,"versions":158},"Dart",[],{"name":160,"versions":161},"AI",[],{"name":70,"versions":163},[],{"name":165,"versions":166},"OpenAI",[],"OpenAIの画像生成APIをFlutterから呼んで画像を生成してみる","2023-02-10T01:10:57+09:00","https://qiita.com/y5347M/items/c3a0dc9a63f3bb7140d6",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},2190,{"rendered_body":173,"body":174,"coediting":7,"comments_count":8,"created_at":175,"group":10,"id":176,"likes_count":8,"private":7,"reactions_count":8,"stocks_count":8,"tags":177,"title":187,"updated_at":175,"url":188,"user":189,"page_views_count":190,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:113\">以下のURLの手順に沿ってAWS SAM CLIをインストールしたときにエラーでハマりました。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:114\">\u003Ciframe id=\"qiita-embed-content__9fedd1ea785eeb54ad463d5c26570f31\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9fedd1ea785eeb54ad463d5c26570f31\" data-content=\"https%3A%2F%2Fdocs.aws.amazon.com%2Fserverless-application-model%2Flatest%2Fdeveloperguide%2Fserverless-sam-cli-install-mac.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"6:1-6:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"7:1-8:0\">\n\u003Cli data-sourcepos=\"7:1-8:0\">macOS: 12.6\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"9:1-9:17\">\n\u003Cspan id=\"エラー内容\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E5%86%85%E5%AE%B9\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>エラー内容\u003C/h1>\n\u003Cp data-sourcepos=\"10:1-10:45\">実行したコマンドはこちらです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"11:1-13:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">brew install aws-sam-cli\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"15:1-15:42\">そしてこれがエラー内容です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"16:1-27:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">Error: python@3.8: the bottle needs the Apple Command Line Tools to be installed.\n  You can install them, if desired, with:\n    xcode-select --install\n\nYou can try to install from source with:\n  brew install --build-from-source python@3.8\nPlease note building from source is unsupported. You will encounter build\nfailures with some formulae. If you experience any issues please create pull\nrequests instead of asking for help on Homebrew's GitHub, Twitter or any other\nofficial channels.\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"29:1-30:33\">\u003Ccode>xcode-select --install\u003C/code>を使用すると膨大な時間がかかると思ったので、python3.8をインストールすることにしました。\u003Cbr>\n結果的に成功しました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"32:1-45:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"gp\">(base) XXX $\u003C/span>\u003Cspan class=\"w\"> \u003C/span>brew \u003Cspan class=\"nb\">install \u003C/span>aws-sam-cli\n\u003Cspan class=\"gp\">==&gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>Downloading https://github.com/aws/aws-sam-cli/releases/download/v1.60.0//aws-sam-cli-1.60.0.sie\n\u003Cspan class=\"gp\">==&gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/92\n\u003Cspan class=\"gp\">#\u003C/span>\u003Cspan class=\"c\">####################################################################### 100.0%\u003C/span>\n\u003Cspan class=\"gp\">==&gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>Installing aws-sam-cli from aws/tap\n\u003Cspan class=\"gp\">==&gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>Pouring aws-sam-cli-1.60.0.sierra.bottle.tar.gz\n\u003Cspan class=\"go\">🍺  /usr/local/Cellar/aws-sam-cli/1.60.0: 4,644 files, 112.3MB\n\u003C/span>\u003Cspan class=\"gp\">==&gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>Running \u003Cspan class=\"sb\">`\u003C/span>brew cleanup aws-sam-cli\u003Cspan class=\"sb\">`\u003C/span>...\n\u003Cspan class=\"go\">Disable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.\nHide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).\n\u003C/span>\u003Cspan class=\"gp\">(base) XXX $\u003C/span>\u003Cspan class=\"w\"> \u003C/span>sam \u003Cspan class=\"nt\">--version\u003C/span>\n\u003Cspan class=\"go\">SAM CLI, version 1.60.0\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n","# 前提\n以下のURLの手順に沿ってAWS SAM CLIをインストールしたときにエラーでハマりました。\n\nhttps://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-cli-install-mac.html\n\n# 環境\n- macOS: 12.6\n\n# エラー内容\n実行したコマンドはこちらです。\n```console\nbrew install aws-sam-cli\n```\n\nそしてこれがエラー内容です。\n```console\nError: python@3.8: the bottle needs the Apple Command Line Tools to be installed.\n  You can install them, if desired, with:\n    xcode-select --install\n\nYou can try to install from source with:\n  brew install --build-from-source python@3.8\nPlease note building from source is unsupported. You will encounter build\nfailures with some formulae. If you experience any issues please create pull\nrequests instead of asking for help on Homebrew's GitHub, Twitter or any other\nofficial channels.\n```\n\n`xcode-select --install`を使用すると膨大な時間がかかると思ったので、python3.8をインストールすることにしました。\n結果的に成功しました。\n\n```console\n(base) XXX $ brew install aws-sam-cli\n==> Downloading https://github.com/aws/aws-sam-cli/releases/download/v1.60.0//aws-sam-cli-1.60.0.sie\n==> Downloading from https://objects.githubusercontent.com/github-production-release-asset-2e65be/92\n######################################################################## 100.0%\n==> Installing aws-sam-cli from aws/tap\n==> Pouring aws-sam-cli-1.60.0.sierra.bottle.tar.gz\n🍺  /usr/local/Cellar/aws-sam-cli/1.60.0: 4,644 files, 112.3MB\n==> Running `brew cleanup aws-sam-cli`...\nDisable this behaviour by setting HOMEBREW_NO_INSTALL_CLEANUP.\nHide these hints with HOMEBREW_NO_ENV_HINTS (see `man brew`).\n(base) XXX $ sam --version\nSAM CLI, version 1.60.0\n```\n","2022-10-16T11:31:44+09:00","be9b64181234187063f9",[178,181,184],{"name":179,"versions":180},"AWS",[],{"name":182,"versions":183},"awscli",[],{"name":185,"versions":186},"AWSSAM",[],"AWS SAM CLIをbrew installしたときに発生したエラーを解決する","https://qiita.com/y5347M/items/be9b64181234187063f9",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1259,{"rendered_body":192,"body":193,"coediting":7,"comments_count":8,"created_at":194,"group":10,"id":195,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":8,"tags":196,"title":209,"updated_at":194,"url":210,"user":211,"page_views_count":212,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-3:168\">業務でこんな処理を実装する気がするので、簡単に予習してみます。\u003Cbr>\n今回は動くか検証のみなので、ローカルで起動したJavaアプリケーション（Spring Boot）からSQSにメッセージを送信してみます。\u003C/p>\n\u003Cp data-sourcepos=\"5:1-5:204\">本当はlambdaからrdsへ登録・更新する処理を実装したかったのですが、それはまた別の機会に。（なのでSQSやlambdaの名前がmergeXXXXみたいになってます。）\u003C/p>\n\u003Cp data-sourcepos=\"7:1-7:134\">\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3a229f2f-f2b9-d425-1c1e-6ec78dd46b8e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15dafb81334fc1728ef3da0e222a3c96\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3a229f2f-f2b9-d425-1c1e-6ec78dd46b8e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=15dafb81334fc1728ef3da0e222a3c96\" alt=\"lambda-sqs.drawio.png\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3a229f2f-f2b9-d425-1c1e-6ec78dd46b8e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7d38a601e5eeafb45970f315e3a6ac46 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3a229f2f-f2b9-d425-1c1e-6ec78dd46b8e.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"9:1-9:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"10:1-14:0\">\n\u003Cli data-sourcepos=\"10:1-10:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:45\">IntelliJ IDEA: 2022.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:13\">Gradle: 7.5\u003C/li>\n\u003Cli data-sourcepos=\"13:1-14:0\">Java: temurin 17.0.3\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"15:1-15:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"17:1-17:30\">\n\u003Cspan id=\"プロジェクトの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロジェクトの作成\u003C/h2>\n\u003Ch4 data-sourcepos=\"19:1-19:49\">\n\u003Cspan id=\"spring-initializrでプロジェクト作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#spring-initializr%E3%81%A7%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>spring initializrでプロジェクト作成\u003C/h4>\n\u003Cp data-sourcepos=\"20:1-22:139\">\u003Ca href=\"https://start.spring.io/\" rel=\"nofollow noopener\" target=\"_blank\">https://start.spring.io/\u003C/a>でプロジェクトの雛形を作成します。\u003Cbr>\n以下の画像のような構成にしています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc2e5604c-71a3-5af3-dea0-c307670cd33e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d98e201b5eaaae94ec3d9dd575ac2702\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc2e5604c-71a3-5af3-dea0-c307670cd33e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=d98e201b5eaaae94ec3d9dd575ac2702\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fc2e5604c-71a3-5af3-dea0-c307670cd33e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5a79e2e30a94c1df8322cba476596b22 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c2e5604c-71a3-5af3-dea0-c307670cd33e.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"24:1-24:104\">GENERATEボタンを押してダウンロードしてきます。それをIDEツールで開きます。\u003C/p>\n\u003Ch4 data-sourcepos=\"26:1-26:26\">\n\u003Cspan id=\"buildgradleの設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#buildgradle%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>build.gradleの設定\u003C/h4>\n\u003Cp data-sourcepos=\"27:1-28:59\">\u003Ccode>com.amazonaws:aws-java-sdk-bom\u003C/code>と\u003Ccode>com.amazonaws:aws-java-sdk-sqs\u003C/code>を設定します。\u003Cbr>\nこの時点ではどちらも1.12.320が最新でした。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"gradle\" data-sourcepos=\"30:1-65:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"n\">plugins\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\t\u003Cspan class=\"n\">id\u003C/span> \u003Cspan class=\"s1\">'org.springframework.boot'\u003C/span> \u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"s1\">'2.7.5-SNAPSHOT'\u003C/span>\n\t\u003Cspan class=\"n\">id\u003C/span> \u003Cspan class=\"s1\">'io.spring.dependency-management'\u003C/span> \u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"s1\">'1.0.14.RELEASE'\u003C/span>\n\t\u003Cspan class=\"n\">id\u003C/span> \u003Cspan class=\"s1\">'java'\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"n\">group\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s1\">'com.example'\u003C/span>\n\u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s1\">'0.0.1-SNAPSHOT'\u003C/span>\n\u003Cspan class=\"n\">sourceCompatibility\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s1\">'17'\u003C/span>\n\n\u003Cspan class=\"n\">configurations\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\t\u003Cspan class=\"n\">compileOnly\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\t\t\u003Cspan class=\"n\">extendsFrom\u003C/span> \u003Cspan class=\"n\">annotationProcessor\u003C/span>\n\t\u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"k\">repositories\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\t\u003Cspan class=\"n\">mavenCentral\u003C/span>\u003Cspan class=\"o\">()\u003C/span>\n\t\u003Cspan class=\"n\">maven\u003C/span> \u003Cspan class=\"o\">{\u003C/span> \u003Cspan class=\"n\">url\u003C/span> \u003Cspan class=\"s1\">'https://repo.spring.io/milestone'\u003C/span> \u003Cspan class=\"o\">}\u003C/span>\n\t\u003Cspan class=\"n\">maven\u003C/span> \u003Cspan class=\"o\">{\u003C/span> \u003Cspan class=\"n\">url\u003C/span> \u003Cspan class=\"s1\">'https://repo.spring.io/snapshot'\u003C/span> \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"k\">dependencies\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\t\u003Cspan class=\"n\">implementation\u003C/span> \u003Cspan class=\"s1\">'org.springframework.boot:spring-boot-starter-web'\u003C/span>\n\t\u003Cspan class=\"n\">implementation\u003C/span> \u003Cspan class=\"s1\">'com.amazonaws:aws-java-sdk-bom:1.12.320'\u003C/span>\n\t\u003Cspan class=\"n\">implementation\u003C/span> \u003Cspan class=\"s1\">'com.amazonaws:aws-java-sdk-sqs:1.12.320'\u003C/span>\n\t\u003Cspan class=\"n\">compileOnly\u003C/span> \u003Cspan class=\"s1\">'org.projectlombok:lombok'\u003C/span>\n\t\u003Cspan class=\"n\">annotationProcessor\u003C/span> \u003Cspan class=\"s1\">'org.projectlombok:lombok'\u003C/span>\n\t\u003Cspan class=\"n\">testImplementation\u003C/span> \u003Cspan class=\"s1\">'org.springframework.boot:spring-boot-starter-test'\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"n\">tasks\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">named\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s1\">'test'\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\t\u003Cspan class=\"n\">useJUnitPlatform\u003C/span>\u003Cspan class=\"o\">()\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"67:1-67:18\">\n\u003Cspan id=\"aws側の設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#aws%E5%81%B4%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>AWS側の設定\u003C/h2>\n\u003Ch4 data-sourcepos=\"69:1-69:29\">\n\u003Cspan id=\"iamユーザーの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#iam%E3%83%A6%E3%83%BC%E3%82%B6%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>IAMユーザーの作成\u003C/h4>\n\u003Cp data-sourcepos=\"70:1-71:81\">事前にJavaからアクセスするためのIAMユーザーを作成し、アクセスキーとシークレットキーをダウンロードしておきます。\u003Cbr>\nそのIAMユーザーを使用してコンロールでSQS等を作成します。\u003C/p>\n\u003Ch4 data-sourcepos=\"73:1-73:29\">\n\u003Cspan id=\"sqsのキューを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#sqs%E3%81%AE%E3%82%AD%E3%83%A5%E3%83%BC%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>SQSのキューを作成\u003C/h4>\n\u003Cp data-sourcepos=\"74:1-76:139\">コンソールでSQSのキューを作成します\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ffe5c311d-d5d2-9077-65ea-c8da1384a74b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f70120e0d433d10d74b81821cc6ce68e\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ffe5c311d-d5d2-9077-65ea-c8da1384a74b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f70120e0d433d10d74b81821cc6ce68e\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ffe5c311d-d5d2-9077-65ea-c8da1384a74b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0df5bd8dd26b1ad87c9881abf84bce2c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/fe5c311d-d5d2-9077-65ea-c8da1384a74b.png\" loading=\"lazy\">\u003C/a>\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F7663fdfc-7dec-45bc-23f0-77f2b40e4916.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d6a3c834d222df6c6e400f07b6642db\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F7663fdfc-7dec-45bc-23f0-77f2b40e4916.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=1d6a3c834d222df6c6e400f07b6642db\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F7663fdfc-7dec-45bc-23f0-77f2b40e4916.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c5a4a24e3768579fadab54b67050de8f 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/7663fdfc-7dec-45bc-23f0-77f2b40e4916.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"78:1-78:20\">\n\u003Cspan id=\"lambdaを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#lambda%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>lambdaを作成\u003C/h4>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F30d1c6db-925c-0f01-8c5e-5607cc2638c5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb4e8a1a1ef9b1286378de43f73f75f7\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F30d1c6db-925c-0f01-8c5e-5607cc2638c5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=bb4e8a1a1ef9b1286378de43f73f75f7\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F30d1c6db-925c-0f01-8c5e-5607cc2638c5.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=e4bab109f2118370ae19051923d94a77 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/30d1c6db-925c-0f01-8c5e-5607cc2638c5.png\" loading=\"lazy\">\u003C/a>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff92d2a1e-aabe-7d80-b418-582c7cc4447e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ea4a0fcca585c578a715e3d6d4d2c2f3\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff92d2a1e-aabe-7d80-b418-582c7cc4447e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ea4a0fcca585c578a715e3d6d4d2c2f3\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff92d2a1e-aabe-7d80-b418-582c7cc4447e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=47b0760a1e7dc53ee47ae759fda78597 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/f92d2a1e-aabe-7d80-b418-582c7cc4447e.png\" loading=\"lazy\">\u003C/a>\n\u003Ch4 data-sourcepos=\"82:1-82:32\">\n\u003Cspan id=\"iamロールを作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#iam%E3%83%AD%E3%83%BC%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>IAMロールを作成する\u003C/h4>\n\u003Cp data-sourcepos=\"83:1-85:244\">lambdaからSQSを読み取りするのでIAMロールを作成します。\u003Cbr>\nこちらを参考にさせていただきました。\u003Cbr>\n\u003Ca href=\"https://www.stsd.co.jp/dev-blog/send_and_receive_amazon_sqs_messages_from_java.html#:~:text=SQS%E3%81%AB%E3%81%AFJava%E3%81%A7,%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%80%8D%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.stsd.co.jp/dev-blog/send_and_receive_amazon_sqs_messages_from_java.html#:~:text=SQS%E3%81%AB%E3%81%AFJava%E3%81%A7,%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%80%8D%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\u003C/a>\u003C/p>\n\u003Cul data-sourcepos=\"87:1-90:0\">\n\u003Cli data-sourcepos=\"87:1-87:24\">ロール名：for-sqs\u003C/li>\n\u003Cli data-sourcepos=\"88:1-88:30\">ポリシー名：sqs-policy\u003C/li>\n\u003Cli data-sourcepos=\"89:1-90:0\">ポリシー\u003C/li>\n\u003C/ul>\n\u003Cdiv class=\"code-frame\" data-lang=\"json\" data-sourcepos=\"91:1-107:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"nl\">\"Version\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"s2\">\"2012-10-17\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"nl\">\"Statement\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"w\">\n        \u003C/span>\u003Cspan class=\"p\">{\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"nl\">\"Sid\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"s2\">\"VisualEditor0\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"nl\">\"Effect\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"s2\">\"Allow\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"nl\">\"Action\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"sqs:DeleteMessage\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"sqs:ReceiveMessage\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\u003Cspan class=\"w\">\n                \u003C/span>\u003Cspan class=\"s2\">\"sqs:GetQueueAttributes\"\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"p\">],\u003C/span>\u003Cspan class=\"w\">\n            \u003C/span>\u003Cspan class=\"nl\">\"Resource\"\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"w\"> \u003C/span>\u003Cspan class=\"s2\">\"*\"\u003C/span>\u003Cspan class=\"w\">\n        \u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n    \u003C/span>\u003Cspan class=\"p\">]\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003Cspan class=\"p\">}\u003C/span>\u003Cspan class=\"w\">\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"109:1-109:127\">またロールにAWSLambdaBasicExecutionRoleをアタッチしておくと、CloudWatchログにログを書き込めます。\u003C/p>\n\u003Ch4 data-sourcepos=\"111:1-111:35\">\n\u003Cspan id=\"lambdaにiamロールの設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#lambda%E3%81%ABiam%E3%83%AD%E3%83%BC%E3%83%AB%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>lambdaにIAMロールの設定\u003C/h4>\n\u003Cp data-sourcepos=\"112:1-113:139\">コンロールのlambdaのページを開き、設定タブ &gt; アクセス権限 &gt; 実行ロール　&gt; 編集ボタンで設定します。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9381367d-9a6d-807a-d60e-767a49a9310f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=db6a488729dd5a79c202b6d793efc7fe\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9381367d-9a6d-807a-d60e-767a49a9310f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=db6a488729dd5a79c202b6d793efc7fe\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9381367d-9a6d-807a-d60e-767a49a9310f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f164003c8f2eca30894bbe230164c96c 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/9381367d-9a6d-807a-d60e-767a49a9310f.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"115:1-115:38\">\n\u003Cspan id=\"sqsでlambdaトリガーを設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#sqs%E3%81%A7lambda%E3%83%88%E3%83%AA%E3%82%AC%E3%83%BC%E3%82%92%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>SQSでLambdaトリガーを設定\u003C/h4>\n\u003Cp data-sourcepos=\"116:1-117:139\">SQSのページで作成したキューを選択し、Lambdaトリガータブからlambdaを設定します。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F223d2b08-00ab-8432-b331-d2fc2f9b065b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cfa876dbeea9ea23e63dfbb1dd9645e0\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F223d2b08-00ab-8432-b331-d2fc2f9b065b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cfa876dbeea9ea23e63dfbb1dd9645e0\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F223d2b08-00ab-8432-b331-d2fc2f9b065b.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c72f9159a06715f6666cfd3bc35bc763 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/223d2b08-00ab-8432-b331-d2fc2f9b065b.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"120:1-120:42\">これでaws側の設定は完了です。\u003C/p>\n\u003Ch2 data-sourcepos=\"122:1-122:9\">\n\u003Cspan id=\"実装\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A3%85\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実装\u003C/h2>\n\u003Ch4 data-sourcepos=\"124:1-124:14\">\n\u003Cspan id=\"sqsclient\" class=\"fragment\">\u003C/span>\u003Ca href=\"#sqsclient\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>SqsClient\u003C/h4>\n\u003Cp data-sourcepos=\"125:1-126:92\">こちらを参考にしました。\u003Cbr>\n\u003Ca href=\"https://docs.aws.amazon.com/ja_jp/sdk-for-java/v1/developer-guide/examples-sqs-messages.html\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.aws.amazon.com/ja_jp/sdk-for-java/v1/developer-guide/examples-sqs-messages.html\u003C/a>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"Java\" data-sourcepos=\"128:1-178:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">SqsClient.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">package\u003C/span> \u003Cspan class=\"nn\">com.example.lambdasqssample.aws\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.auth.AWSStaticCredentialsProvider\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.regions.Regions\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.services.sqs.AmazonSQS\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.services.sqs.AmazonSQSClientBuilder\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.services.sqs.model.AmazonSQSException\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.services.sqs.model.CreateQueueRequest\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.services.sqs.model.SendMessageRequest\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.stereotype.Component\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"nd\">@Component\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">SqsClient\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"no\">QUEUE_NAME\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"s\">\"merge-data-sqs\"\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"nf\">getQueueUrl\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"kt\">var\u003C/span> \u003Cspan class=\"n\">sqs\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">getSqs\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n        \u003Cspan class=\"kt\">var\u003C/span> \u003Cspan class=\"n\">create_request\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"k\">new\u003C/span> \u003Cspan class=\"nc\">CreateQueueRequest\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"no\">QUEUE_NAME\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addAttributesEntry\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"DelaySeconds\"\u003C/span>\u003Cspan class=\"o\">,\u003C/span> \u003Cspan class=\"s\">\"60\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">addAttributesEntry\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"MessageRetentionPeriod\"\u003C/span>\u003Cspan class=\"o\">,\u003C/span> \u003Cspan class=\"s\">\"86400\"\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n\n        \u003Cspan class=\"k\">try\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n            \u003Cspan class=\"n\">sqs\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">createQueue\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">create_request\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n        \u003Cspan class=\"o\">}\u003C/span> \u003Cspan class=\"k\">catch\u003C/span> \u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">AmazonSQSException\u003C/span> \u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n            \u003Cspan class=\"k\">if\u003C/span> \u003Cspan class=\"o\">(!\u003C/span>\u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">getErrorCode\u003C/span>\u003Cspan class=\"o\">().\u003C/span>\u003Cspan class=\"na\">equals\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"QueueAlreadyExists\"\u003C/span>\u003Cspan class=\"o\">))\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n                \u003Cspan class=\"k\">throw\u003C/span> \u003Cspan class=\"n\">e\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n            \u003Cspan class=\"o\">}\u003C/span>\n        \u003Cspan class=\"o\">}\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"n\">sqs\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">getQueueUrl\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"no\">QUEUE_NAME\u003C/span>\u003Cspan class=\"o\">).\u003C/span>\u003Cspan class=\"na\">getQueueUrl\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">sendMessage\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"n\">queueUrl\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"kt\">var\u003C/span> \u003Cspan class=\"n\">sqs\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">getSqs\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n        \u003Cspan class=\"kt\">var\u003C/span> \u003Cspan class=\"n\">send_msg_request\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"k\">new\u003C/span> \u003Cspan class=\"nc\">SendMessageRequest\u003C/span>\u003Cspan class=\"o\">()\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">withQueueUrl\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">queueUrl\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">withMessageBody\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"hello world\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">withDelaySeconds\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"mi\">5\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n        \u003Cspan class=\"n\">sqs\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">sendMessage\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">send_msg_request\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"nc\">AmazonSQS\u003C/span> \u003Cspan class=\"nf\">getSqs\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">AmazonSQSClientBuilder\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">standard\u003C/span>\u003Cspan class=\"o\">()\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">withCredentials\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"k\">new\u003C/span> \u003Cspan class=\"nc\">AWSStaticCredentialsProvider\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">Credentials\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">get\u003C/span>\u003Cspan class=\"o\">()))\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">withRegion\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">Regions\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">AP_NORTHEAST_1\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">getName\u003C/span>\u003Cspan class=\"o\">())\u003C/span>\n                \u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">build\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"code-frame\" data-lang=\"Java\" data-sourcepos=\"180:1-209:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Credentials.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">package\u003C/span> \u003Cspan class=\"nn\">com.example.lambdasqssample.aws\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.auth.AWSCredentials\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.amazonaws.auth.BasicAWSCredentials\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.beans.factory.annotation.Value\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.stereotype.Component\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"nd\">@Component\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">Credentials\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"no\">ACCESS_KEY\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"no\">SECRET_KEY\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"nd\">@Value\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"${aws.access-key}\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">setAccessKey\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"n\">accessKey\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">ACCESS_KEY\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">accessKey\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@Value\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"${aws.secret-key}\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kt\">void\u003C/span> \u003Cspan class=\"nf\">setSecretKey\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"n\">secretKey\u003C/span>\u003Cspan class=\"o\">)\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">SECRET_KEY\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">secretKey\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">static\u003C/span> \u003Cspan class=\"nc\">AWSCredentials\u003C/span> \u003Cspan class=\"nf\">get\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"k\">new\u003C/span> \u003Cspan class=\"nf\">BasicAWSCredentials\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"no\">ACCESS_KEY\u003C/span>\u003Cspan class=\"o\">,\u003C/span> \u003Cspan class=\"no\">SECRET_KEY\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"210:1-210:71\">ACCESS_KEYとSECRET_KEYはapplication.ymlで設定しておきます。\u003C/p>\n\u003Ch4 data-sourcepos=\"212:1-212:20\">\n\u003Cspan id=\"実行クラス\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A1%8C%E3%82%AF%E3%83%A9%E3%82%B9\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実行クラス\u003C/h4>\n\u003Cp data-sourcepos=\"213:1-213:65\">QueueのUrlを受け取り、メッセージを送信します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"java\" data-sourcepos=\"214:1-238:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">SampleController.java\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"kn\">package\u003C/span> \u003Cspan class=\"nn\">com.example.lambdasqssample.Controller\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">com.example.lambdasqssample.aws.SqsClient\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">lombok.RequiredArgsConstructor\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.bind.annotation.GetMapping\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.bind.annotation.RequestMapping\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\u003Cspan class=\"kn\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.bind.annotation.RestController\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n\u003Cspan class=\"nd\">@RestController\u003C/span>\n\u003Cspan class=\"nd\">@RequestMapping\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"/api/v1/sample\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n\u003Cspan class=\"nd\">@RequiredArgsConstructor\u003C/span>\n\u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">SampleController\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n\n    \u003Cspan class=\"kd\">private\u003C/span> \u003Cspan class=\"kd\">final\u003C/span> \u003Cspan class=\"nc\">SqsClient\u003C/span> \u003Cspan class=\"n\">sqsClient\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n\n    \u003Cspan class=\"nd\">@GetMapping\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"s\">\"/result\"\u003C/span>\u003Cspan class=\"o\">)\u003C/span>\n    \u003Cspan class=\"kd\">public\u003C/span> \u003Cspan class=\"kt\">boolean\u003C/span> \u003Cspan class=\"nf\">getResult\u003C/span>\u003Cspan class=\"o\">()\u003C/span> \u003Cspan class=\"o\">{\u003C/span>\n        \u003Cspan class=\"kt\">var\u003C/span> \u003Cspan class=\"n\">queue\u003C/span> \u003Cspan class=\"o\">=\u003C/span> \u003Cspan class=\"n\">sqsClient\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">getQueueUrl\u003C/span>\u003Cspan class=\"o\">();\u003C/span>\n        \u003Cspan class=\"n\">sqsClient\u003C/span>\u003Cspan class=\"o\">.\u003C/span>\u003Cspan class=\"na\">sendMessage\u003C/span>\u003Cspan class=\"o\">(\u003C/span>\u003Cspan class=\"n\">queue\u003C/span>\u003Cspan class=\"o\">);\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"kc\">true\u003C/span>\u003Cspan class=\"o\">;\u003C/span>\n    \u003Cspan class=\"o\">}\u003C/span>\n\n\u003Cspan class=\"o\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"239:1-239:33\">これで実装は完了です。\u003C/p>\n\u003Ch2 data-sourcepos=\"241:1-241:9\">\n\u003Cspan id=\"実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実行\u003C/h2>\n\u003Cp data-sourcepos=\"242:1-244:139\">アプリケーションをビルド・実行します。\u003Cbr>\n今回はpostmanを使用して\u003Ccode>http://localhost:8080/api/v1/sample/result\u003C/code>にGETします。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F55181993-ed75-b898-e461-6f609eeaee42.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f221196d76e8f7d1094b957ee0be99de\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F55181993-ed75-b898-e461-6f609eeaee42.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=f221196d76e8f7d1094b957ee0be99de\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F55181993-ed75-b898-e461-6f609eeaee42.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b91ae4761053fcabb691c510a646b1d1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/55181993-ed75-b898-e461-6f609eeaee42.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"246:1-247:139\">CloudWatchログを見ると、アクセスするたびに実行されていることがわかります。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Feb9aaece-5e01-4e88-8db3-7ee9986f0afd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=48923ede9bbd488114c93baa32eae111\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Feb9aaece-5e01-4e88-8db3-7ee9986f0afd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=48923ede9bbd488114c93baa32eae111\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Feb9aaece-5e01-4e88-8db3-7ee9986f0afd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=b3820bccc9d24be7f60dc4fe9e797c89 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/eb9aaece-5e01-4e88-8db3-7ee9986f0afd.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"249:1-249:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"250:1-250:135\">まだlambdaで具体的な処理を実行していないですが、とりあえず動くことを確認できた第一歩でした。\u003C/p>\n","# 前提\n業務でこんな処理を実装する気がするので、簡単に予習してみます。\n今回は動くか検証のみなので、ローカルで起動したJavaアプリケーション（Spring Boot）からSQSにメッセージを送信してみます。\n\n本当はlambdaからrdsへ登録・更新する処理を実装したかったのですが、それはまた別の機会に。（なのでSQSやlambdaの名前がmergeXXXXみたいになってます。）\n\n![lambda-sqs.drawio.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3a229f2f-f2b9-d425-1c1e-6ec78dd46b8e.png)\n\n# 環境\n- macOS: 12.6\n- IntelliJ IDEA: 2022.2.3 (Community Edition)\n- Gradle: 7.5\n- Java: temurin 17.0.3\n\n# 手順\n\n## プロジェクトの作成\n\n#### spring initializrでプロジェクト作成\n[https://start.spring.io/](https://start.spring.io/)でプロジェクトの雛形を作成します。\n以下の画像のような構成にしています。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/c2e5604c-71a3-5af3-dea0-c307670cd33e.png\">\n\nGENERATEボタンを押してダウンロードしてきます。それをIDEツールで開きます。\n\n#### build.gradleの設定\n`com.amazonaws:aws-java-sdk-bom`と`com.amazonaws:aws-java-sdk-sqs`を設定します。\nこの時点ではどちらも1.12.320が最新でした。\n\n```gradle:build.gradle\nplugins {\n\tid 'org.springframework.boot' version '2.7.5-SNAPSHOT'\n\tid 'io.spring.dependency-management' version '1.0.14.RELEASE'\n\tid 'java'\n}\n\ngroup = 'com.example'\nversion = '0.0.1-SNAPSHOT'\nsourceCompatibility = '17'\n\nconfigurations {\n\tcompileOnly {\n\t\textendsFrom annotationProcessor\n\t}\n}\n\nrepositories {\n\tmavenCentral()\n\tmaven { url 'https://repo.spring.io/milestone' }\n\tmaven { url 'https://repo.spring.io/snapshot' }\n}\n\ndependencies {\n\timplementation 'org.springframework.boot:spring-boot-starter-web'\n\timplementation 'com.amazonaws:aws-java-sdk-bom:1.12.320'\n\timplementation 'com.amazonaws:aws-java-sdk-sqs:1.12.320'\n\tcompileOnly 'org.projectlombok:lombok'\n\tannotationProcessor 'org.projectlombok:lombok'\n\ttestImplementation 'org.springframework.boot:spring-boot-starter-test'\n}\n\ntasks.named('test') {\n\tuseJUnitPlatform()\n}\n```\n\n## AWS側の設定\n\n#### IAMユーザーの作成\n事前にJavaからアクセスするためのIAMユーザーを作成し、アクセスキーとシークレットキーをダウンロードしておきます。\nそのIAMユーザーを使用してコンロールでSQS等を作成します。\n\n#### SQSのキューを作成\nコンソールでSQSのキューを作成します\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/fe5c311d-d5d2-9077-65ea-c8da1384a74b.png\">\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/7663fdfc-7dec-45bc-23f0-77f2b40e4916.png\">\n\n#### lambdaを作成\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/30d1c6db-925c-0f01-8c5e-5607cc2638c5.png\">\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/f92d2a1e-aabe-7d80-b418-582c7cc4447e.png\">\n\n#### IAMロールを作成する\nlambdaからSQSを読み取りするのでIAMロールを作成します。\nこちらを参考にさせていただきました。\nhttps://www.stsd.co.jp/dev-blog/send_and_receive_amazon_sqs_messages_from_java.html#:~:text=SQS%E3%81%AB%E3%81%AFJava%E3%81%A7,%E3%82%A2%E3%82%AF%E3%82%B7%E3%83%A7%E3%83%B3%E3%80%8D%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%BE%E3%81%99%E3%80%82\n\n- ロール名：for-sqs\n- ポリシー名：sqs-policy\n- ポリシー\n\n```json\n{\n    \"Version\": \"2012-10-17\",\n    \"Statement\": [\n        {\n            \"Sid\": \"VisualEditor0\",\n            \"Effect\": \"Allow\",\n            \"Action\": [\n                \"sqs:DeleteMessage\",\n                \"sqs:ReceiveMessage\",\n                \"sqs:GetQueueAttributes\"\n            ],\n            \"Resource\": \"*\"\n        }\n    ]\n}\n```\n\nまたロールにAWSLambdaBasicExecutionRoleをアタッチしておくと、CloudWatchログにログを書き込めます。\n\n#### lambdaにIAMロールの設定\nコンロールのlambdaのページを開き、設定タブ > アクセス権限 > 実行ロール　> 編集ボタンで設定します。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/9381367d-9a6d-807a-d60e-767a49a9310f.png\">\n\n#### SQSでLambdaトリガーを設定\nSQSのページで作成したキューを選択し、Lambdaトリガータブからlambdaを設定します。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/223d2b08-00ab-8432-b331-d2fc2f9b065b.png\">\n\n\nこれでaws側の設定は完了です。\n\n## 実装\n\n#### SqsClient\nこちらを参考にしました。\nhttps://docs.aws.amazon.com/ja_jp/sdk-for-java/v1/developer-guide/examples-sqs-messages.html\n\n```Java:SqsClient.java\npackage com.example.lambdasqssample.aws;\n\nimport com.amazonaws.auth.AWSStaticCredentialsProvider;\nimport com.amazonaws.regions.Regions;\nimport com.amazonaws.services.sqs.AmazonSQS;\nimport com.amazonaws.services.sqs.AmazonSQSClientBuilder;\nimport com.amazonaws.services.sqs.model.AmazonSQSException;\nimport com.amazonaws.services.sqs.model.CreateQueueRequest;\nimport com.amazonaws.services.sqs.model.SendMessageRequest;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class SqsClient {\n\n    private static final String QUEUE_NAME = \"merge-data-sqs\";\n\n    public String getQueueUrl() {\n        var sqs = getSqs();\n        var create_request = new CreateQueueRequest(QUEUE_NAME)\n                .addAttributesEntry(\"DelaySeconds\", \"60\")\n                .addAttributesEntry(\"MessageRetentionPeriod\", \"86400\");\n\n        try {\n            sqs.createQueue(create_request);\n        } catch (AmazonSQSException e) {\n            if (!e.getErrorCode().equals(\"QueueAlreadyExists\")) {\n                throw e;\n            }\n        }\n        return sqs.getQueueUrl(QUEUE_NAME).getQueueUrl();\n    }\n\n    public void sendMessage(String queueUrl) {\n        var sqs = getSqs();\n        var send_msg_request = new SendMessageRequest()\n                .withQueueUrl(queueUrl)\n                .withMessageBody(\"hello world\")\n                .withDelaySeconds(5);\n        sqs.sendMessage(send_msg_request);\n    }\n\n    private AmazonSQS getSqs() {\n        return AmazonSQSClientBuilder\n                .standard()\n                .withCredentials(new AWSStaticCredentialsProvider(Credentials.get()))\n                .withRegion(Regions.AP_NORTHEAST_1.getName())\n                .build();\n    }\n}\n```\n\n```Java:Credentials.java\npackage com.example.lambdasqssample.aws;\n\nimport com.amazonaws.auth.AWSCredentials;\nimport com.amazonaws.auth.BasicAWSCredentials;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\n@Component\npublic class Credentials {\n\n    private static String ACCESS_KEY;\n\n    private static String SECRET_KEY;\n\n    @Value(\"${aws.access-key}\")\n    public void setAccessKey(String accessKey) {\n        this.ACCESS_KEY = accessKey;\n    }\n\n    @Value(\"${aws.secret-key}\")\n    public void setSecretKey(String secretKey) {\n        this.SECRET_KEY = secretKey;\n    }\n\n    public static AWSCredentials get() {\n        return new BasicAWSCredentials(ACCESS_KEY, SECRET_KEY);\n    }\n}\n```\nACCESS_KEYとSECRET_KEYはapplication.ymlで設定しておきます。\n\n#### 実行クラス\nQueueのUrlを受け取り、メッセージを送信します。\n```java:SampleController.java\npackage com.example.lambdasqssample.Controller;\n\nimport com.example.lambdasqssample.aws.SqsClient;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.web.bind.annotation.GetMapping;\nimport org.springframework.web.bind.annotation.RequestMapping;\nimport org.springframework.web.bind.annotation.RestController;\n\n@RestController\n@RequestMapping(\"/api/v1/sample\")\n@RequiredArgsConstructor\npublic class SampleController {\n\n    private final SqsClient sqsClient;\n\n    @GetMapping(\"/result\")\n    public boolean getResult() {\n        var queue = sqsClient.getQueueUrl();\n        sqsClient.sendMessage(queue);\n        return true;\n    }\n\n}\n```\nこれで実装は完了です。\n\n## 実行\nアプリケーションをビルド・実行します。\n今回はpostmanを使用して`http://localhost:8080/api/v1/sample/result`にGETします。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/55181993-ed75-b898-e461-6f609eeaee42.png\">\n\nCloudWatchログを見ると、アクセスするたびに実行されていることがわかります。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/eb9aaece-5e01-4e88-8db3-7ee9986f0afd.png\">\n\n# さいごに\nまだlambdaで具体的な処理を実行していないですが、とりあえず動くことを確認できた第一歩でした。\n\n","2022-10-15T17:08:00+09:00","5f5fa349a86326ac1c5c",[197,199,201,204,207],{"name":134,"versions":198},[],{"name":179,"versions":200},[],{"name":202,"versions":203},"lambda",[],{"name":205,"versions":206},"sqs",[],{"name":143,"versions":208},[],"JavaプロジェクトからSQSにキューを送信してlambdaをキックする","https://qiita.com/y5347M/items/5f5fa349a86326ac1c5c",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},3088,{"rendered_body":214,"body":215,"coediting":7,"comments_count":8,"created_at":216,"group":10,"id":217,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":12,"tags":218,"title":223,"updated_at":216,"url":224,"user":225,"page_views_count":226,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-3:129\">GitHub Actionsを作成する際、動作確認してからPRを出すと思います。\u003Cbr>\n毎回GitHubにプッシュして試すより、自分の端末で試したいなというときはactが使えるそうです。\u003C/p>\n\u003Ch1 data-sourcepos=\"5:1-5:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"6:1-8:0\">\n\u003Cli data-sourcepos=\"6:1-6:13\">macOS: 12.6\u003C/li>\n\u003Cli data-sourcepos=\"7:1-8:0\">IntelliJ IDEA: 2021.2.3 (Community Edition)\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"9:1-9:17\">\n\u003Cspan id=\"actについて\" class=\"fragment\">\u003C/span>\u003Ca href=\"#act%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Actについて\u003C/h1>\n\u003Cp data-sourcepos=\"10:1-10:29\">\u003Ciframe id=\"qiita-embed-content__88a6ab10de5bd1d3e16a40a0d35f3e42\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__88a6ab10de5bd1d3e16a40a0d35f3e42\" data-content=\"https%3A%2F%2Fgithub.com%2Fnektos%2Fact\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cblockquote data-sourcepos=\"12:1-12:312\">\n\u003Cp data-sourcepos=\"12:2-12:312\">Rather than having to commit/push every time you want to test out the changes you are making to your \u003Ccode>.github/workflows/\u003C/code> files (or for any changes to embedded GitHub actions), you can use act to run the actions locally. The environment variables and filesystem are all configured to match what GitHub provides`\u003C/p>\n\u003C/blockquote>\n\u003Cp data-sourcepos=\"14:1-14:314\">\u003Ccode>.github/workflows/\u003C/code>や埋め込まれているGitHub Actionsの変更をテストするたびにコミット/プッシュする代わりに、actをローカルで実行できます。環境変数やファイルシステムはすべてGitHubが提供するものと一致するように構成されています。\u003C/p>\n\u003Ch1 data-sourcepos=\"16:1-16:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"17:1-17:9\">\n\u003Cspan id=\"準備\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%BA%96%E5%82%99\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>準備\u003C/h2>\n\u003Ch4 data-sourcepos=\"18:1-18:32\">\n\u003Cspan id=\"dockerをインストール\" class=\"fragment\">\u003C/span>\u003Ca href=\"#docker%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>dockerをインストール\u003C/h4>\n\u003Cp data-sourcepos=\"19:1-19:231\">actはdockerを利用してワークフローを実行します。現在はpodmanをはじめとした、他のコンテナは利用できないそうです。そのため、まずはdockerをインストールしてください。\u003C/p>\n\u003Cul data-sourcepos=\"21:1-24:0\">\n\u003Cli data-sourcepos=\"21:1-21:58\">Mac:\u003Ca href=\"https://docs.docker.com/desktop/install/mac-install/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.docker.com/desktop/install/mac-install/\u003C/a>\n\u003C/li>\n\u003Cli data-sourcepos=\"22:1-22:66\">Windows:\u003Ca href=\"https://docs.docker.com/desktop/install/windows-install/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.docker.com/desktop/install/windows-install/\u003C/a>\n\u003C/li>\n\u003Cli data-sourcepos=\"23:1-24:0\">Linux:\u003Ca href=\"https://docs.docker.com/desktop/install/linux-install/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.docker.com/desktop/install/linux-install/\u003C/a>\n\u003C/li>\n\u003C/ul>\n\u003Ch4 data-sourcepos=\"25:1-25:77\">\n\u003Cspan id=\"パッケージマネージャーを使用してactをインストール\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%91%E3%83%83%E3%82%B1%E3%83%BC%E3%82%B8%E3%83%9E%E3%83%8D%E3%83%BC%E3%82%B8%E3%83%A3%E3%83%BC%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%A6act%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>パッケージマネージャーを使用してactをインストール\u003C/h4>\n\u003Cp data-sourcepos=\"26:1-26:105\">以下のパッケージマネージャーを利用してactをインストールできるようです。\u003C/p>\n\u003Cul data-sourcepos=\"27:1-33:0\">\n\u003Cli data-sourcepos=\"27:1-27:23\">Homebrew(Linux/macOS)\u003C/li>\n\u003Cli data-sourcepos=\"28:1-28:17\">MacPorts(maxOS)\u003C/li>\n\u003Cli data-sourcepos=\"29:1-29:21\">Chocolatey(Windows)\u003C/li>\n\u003Cli data-sourcepos=\"30:1-30:16\">Scoop(Windows)\u003C/li>\n\u003Cli data-sourcepos=\"31:1-31:13\">COPR(Linux)\u003C/li>\n\u003Cli data-sourcepos=\"32:1-33:0\">Nix(Linux/macOS)\u003C/li>\n\u003C/ul>\n\u003Cp data-sourcepos=\"34:1-35:56\">他にはBashスクリプトを利用した方法や、手動インストールをする方法もありました。\u003Cbr>\n今回はHomebrewでインストールしてみます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"36:1-38:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">brew install act\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch4 data-sourcepos=\"40:1-40:47\">\n\u003Cspan id=\"サンプルレポジトリをクローン\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B5%E3%83%B3%E3%83%97%E3%83%AB%E3%83%AC%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E3%82%92%E3%82%AF%E3%83%AD%E3%83%BC%E3%83%B3\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>サンプルレポジトリをクローン\u003C/h4>\n\u003Cp data-sourcepos=\"41:1-42:44\">サンプル用にレポジトリが用意されていたのでクローンしておきます。\u003Cbr>\n\u003Ca href=\"https://github.com/cplee/github-actions-demo\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/cplee/github-actions-demo\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"44:1-44:18\">\n\u003Cspan id=\"試してみる\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E8%A9%A6%E3%81%97%E3%81%A6%E3%81%BF%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>試してみる\u003C/h2>\n\u003Ch4 data-sourcepos=\"46:1-46:35\">\n\u003Cspan id=\"コマンド構成について\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%9E%E3%83%B3%E3%83%89%E6%A7%8B%E6%88%90%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コマンド構成について\u003C/h4>\n\u003Cblockquote data-sourcepos=\"47:2-49:82\">\n\u003Cp data-sourcepos=\"47:3-49:82\">\u003Ccode>act [&lt;event&gt;] [options]\u003C/code>\u003Cbr>\nIf no event name passed, will default to \"on: push\"\u003Cbr>\nIf actions handles only one event it will be used as default instead of \"on: push\"\u003C/p>\n\u003C/blockquote>\n\u003Cp data-sourcepos=\"51:1-51:99\">eventに何も記述しない場合、\u003Ccode>on: push\u003C/code>がデフォルトで指定されるようです。\u003C/p>\n\u003Ch4 data-sourcepos=\"53:1-53:43\">\n\u003Cspan id=\"実行可能なgithub-actionsを見る\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A1%8C%E5%8F%AF%E8%83%BD%E3%81%AAgithub-actions%E3%82%92%E8%A6%8B%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実行可能なGitHub Actionsを見る\u003C/h4>\n\u003Cp data-sourcepos=\"54:1-54:103\">\u003Ccode>act -l\u003C/code>コマンドを実行すると、実行可能なGitHub Actionsを見ることができます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"55:1-59:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>(base) XXXX github-actions-demo-master % act -l\nStage  Job ID  Job name  Workflow name  Workflow file  Events\n0      test    test      CI             main.yml       push\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"61:1-61:87\">\u003Ccode>.github/workflows/main.yml\u003C/code>のon句を書き換えると、結果が変わります。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"62:1-65:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">.github/workflows/main.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">CI\u003C/span>\n\u003Cspan class=\"na\">on\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"pi\">[\u003C/span>\u003Cspan class=\"nv\">push\u003C/span>\u003Cspan class=\"pi\">,\u003C/span> \u003Cspan class=\"nv\">release\u003C/span>\u003Cspan class=\"pi\">]\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"67:1-71:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">(base) XXXX github-actions-demo-master % act -l\nStage  Job ID  Job name  Workflow name  Workflow file  Events      \n0      test    test      CI             main.yml       push,release\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch4 data-sourcepos=\"73:1-73:11\">\n\u003Cspan id=\"実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>実行\u003C/h4>\n\u003Cp data-sourcepos=\"74:1-74:199\">\u003Ccode>.github/workflows/main.yml\u003C/code>を見てみると、ubuntu上にソースをチェックアウトしてきてnodeをセットアップをし、\u003Ccode>npm install\u003C/code>と\u003Ccode>npm test\u003C/code>が実行されるようです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"75:1-88:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">.github/workflows/main.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">CI\u003C/span>\n\u003Cspan class=\"na\">on\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">push\u003C/span>\n\n\u003Cspan class=\"na\">jobs\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">test\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n    \u003Cspan class=\"na\">runs-on\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">ubuntu-latest\u003C/span>\n    \u003Cspan class=\"na\">steps\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n    \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">uses\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">actions/checkout@v2\u003C/span>\n    \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">uses\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">actions/setup-node@v1\u003C/span>\n    \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">npm install\u003C/span>\n    \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"na\">run\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">npm test\u003C/span>\n\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"90:1-90:235\">実行してみます。最初は実行するにあたり使用するデフォルトのイメージを指定しろという指示が表示されます。とりあえずnodeだけで良いので、\u003Ccode>Micro size image\u003C/code>を選択します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"91:1-99:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">(base) XXXX github-actions-demo-master % act push\n? Please choose the default image you want to use with act:\n\n  - Large size image: +20GB Docker image, includes almost all tools used on GitHub Actions (IMPORTANT: currently only ubuntu-18.04 platform is available)\n  - Medium size image: ~500MB, includes only necessary tools to bootstrap actions and aims to be compatible with all actions\n  - Micro size image: &lt;200MB, contains only NodeJS required to bootstrap actions, doesn't work with all actions\n\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"101:1-101:84\">ログは長いので省略しますが、テストが成功していそうです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"102:1-119:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">[CI/test]   🐳  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n| \n\u003C/span>\u003Cspan class=\"gp\">| &gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>github-actions-demo@1.0.0 \u003Cspan class=\"nb\">test\u003C/span> /Users/XXXX/Documents/develop/github-actions-demo-master\n\u003Cspan class=\"gp\">| &gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>mocha ./tests \u003Cspan class=\"nt\">--recursive\u003C/span>\n\u003Cspan class=\"go\">| \n| \n| \n|   GET /\n|     ✓ should respond with hello world\n| \n| \n|   1 passing (27ms)\n| \n[CI/test]   ✅  Success - Main npm test\n[CI/test] 🏁  Job succeeded\n\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch1 data-sourcepos=\"121:1-121:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"122:1-122:147\">都度コミットして検証するより、はるかにストレスがなくなりそうです。積極的に使ってみたいと思います。\u003C/p>\n","# 前提\nGitHub Actionsを作成する際、動作確認してからPRを出すと思います。\n毎回GitHubにプッシュして試すより、自分の端末で試したいなというときはactが使えるそうです。\n\n# 環境\n- macOS: 12.6\n- IntelliJ IDEA: 2021.2.3 (Community Edition)\n\n# Actについて\nhttps://github.com/nektos/act\n\n>Rather than having to commit/push every time you want to test out the changes you are making to your `.github/workflows/` files (or for any changes to embedded GitHub actions), you can use act to run the actions locally. The environment variables and filesystem are all configured to match what GitHub provides`\n\n`.github/workflows/`や埋め込まれているGitHub Actionsの変更をテストするたびにコミット/プッシュする代わりに、actをローカルで実行できます。環境変数やファイルシステムはすべてGitHubが提供するものと一致するように構成されています。\n\n# 手順\n## 準備\n#### dockerをインストール\nactはdockerを利用してワークフローを実行します。現在はpodmanをはじめとした、他のコンテナは利用できないそうです。そのため、まずはdockerをインストールしてください。\n\n- Mac:https://docs.docker.com/desktop/install/mac-install/\n- Windows:https://docs.docker.com/desktop/install/windows-install/\n- Linux:https://docs.docker.com/desktop/install/linux-install/\n\n#### パッケージマネージャーを使用してactをインストール\n以下のパッケージマネージャーを利用してactをインストールできるようです。\n- Homebrew(Linux/macOS)\n- MacPorts(maxOS)\n- Chocolatey(Windows)\n- Scoop(Windows)\n- COPR(Linux)\n- Nix(Linux/macOS)\n\n他にはBashスクリプトを利用した方法や、手動インストールをする方法もありました。\n今回はHomebrewでインストールしてみます。\n```console\nbrew install act\n```\n\n#### サンプルレポジトリをクローン\nサンプル用にレポジトリが用意されていたのでクローンしておきます。\nhttps://github.com/cplee/github-actions-demo\n\n## 試してみる\n\n#### コマンド構成について\n >`act [\u003Cevent>] [options]`\nIf no event name passed, will default to \"on: push\"\nIf actions handles only one event it will be used as default instead of \"on: push\"\n\neventに何も記述しない場合、`on: push`がデフォルトで指定されるようです。\n\n#### 実行可能なGitHub Actionsを見る\n`act -l`コマンドを実行すると、実行可能なGitHub Actionsを見ることができます。\n```\n(base) XXXX github-actions-demo-master % act -l\nStage  Job ID  Job name  Workflow name  Workflow file  Events\n0      test    test      CI             main.yml       push\n```\n\n`.github/workflows/main.yml`のon句を書き換えると、結果が変わります。\n```yml:.github/workflows/main.yml\nname: CI\non: [push, release]\n```\n\n```console\n(base) XXXX github-actions-demo-master % act -l\nStage  Job ID  Job name  Workflow name  Workflow file  Events      \n0      test    test      CI             main.yml       push,release\n```\n\n#### 実行\n`.github/workflows/main.yml`を見てみると、ubuntu上にソースをチェックアウトしてきてnodeをセットアップをし、`npm install`と`npm test`が実行されるようです。\n```yml:.github/workflows/main.yml\nname: CI\non: push\n\njobs:\n  test:\n    runs-on: ubuntu-latest\n    steps:\n    - uses: actions/checkout@v2\n    - uses: actions/setup-node@v1\n    - run: npm install\n    - run: npm test\n\n```\n\n実行してみます。最初は実行するにあたり使用するデフォルトのイメージを指定しろという指示が表示されます。とりあえずnodeだけで良いので、`Micro size image`を選択します。\n```console\n(base) XXXX github-actions-demo-master % act push\n? Please choose the default image you want to use with act:\n\n  - Large size image: +20GB Docker image, includes almost all tools used on GitHub Actions (IMPORTANT: currently only ubuntu-18.04 platform is available)\n  - Medium size image: ~500MB, includes only necessary tools to bootstrap actions and aims to be compatible with all actions\n  - Micro size image: \u003C200MB, contains only NodeJS required to bootstrap actions, doesn't work with all actions\n\n```\n\nログは長いので省略しますが、テストが成功していそうです。\n```console\n[CI/test]   🐳  docker exec cmd=[bash --noprofile --norc -e -o pipefail /var/run/act/workflow/3] user= workdir=\n| \n| > github-actions-demo@1.0.0 test /Users/XXXX/Documents/develop/github-actions-demo-master\n| > mocha ./tests --recursive\n| \n| \n| \n|   GET /\n|     ✓ should respond with hello world\n| \n| \n|   1 passing (27ms)\n| \n[CI/test]   ✅  Success - Main npm test\n[CI/test] 🏁  Job succeeded\n\n```\n\n# さいごに\n都度コミットして検証するより、はるかにストレスがなくなりそうです。積極的に使ってみたいと思います。\n\n\n\n","2022-10-03T11:14:51+09:00","f08fe6a5e939c7a7079a",[219,221],{"name":43,"versions":220},[],{"name":53,"versions":222},[],"GitHub ActionsをローカルPC上で試せるactを使ってみた","https://qiita.com/y5347M/items/f08fe6a5e939c7a7079a",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1410,{"rendered_body":228,"body":229,"coediting":7,"comments_count":8,"created_at":230,"group":10,"id":231,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":65,"tags":232,"title":242,"updated_at":230,"url":243,"user":244,"page_views_count":245,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:108\">せっかくKotlinに触れ始めたので、ブラウザ自動テストを作成したいと思います。\u003C/p>\n\u003Ch1 data-sourcepos=\"4:1-4:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"5:1-10:0\">\n\u003Cli data-sourcepos=\"5:1-5:15\">macOS: 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"6:1-6:45\">IntelliJ IDEA: 2021.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"7:1-7:21\">Kotlin JVM: 1.6.21\u003C/li>\n\u003Cli data-sourcepos=\"8:1-8:15\">Gradle: 7.4.2\u003C/li>\n\u003Cli data-sourcepos=\"9:1-10:0\">Java: temurin 17.0.3\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"11:1-11:22\">\n\u003Cspan id=\"selenideについて\" class=\"fragment\">\u003C/span>\u003Ca href=\"#selenide%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Selenideについて\u003C/h1>\n\u003Cp data-sourcepos=\"12:1-12:297\">\u003Ciframe id=\"qiita-embed-content__ef26ecbbf1858a580edfba7019f8e3b6\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ef26ecbbf1858a580edfba7019f8e3b6\" data-content=\"https%3A%2F%2Fwww.ossnews.jp%2Foss_info%2FSelenide%23%3A%7E%3Atext%3DSelenide%28%25E3%2582%25BB%25E3%2583%25AC%25E3%2583%258B%25E3%2583%2589%252F%25E3%2582%25BB%25E3%2583%25AC%25E3%2583%258A%25E3%2582%25A4%25E3%2583%2589%29%25E3%2581%25A8%2C%25E3%2583%2586%25E3%2582%25B9%25E3%2583%2588%25E8%2587%25AA%25E5%258B%2595%25E5%258C%2596%25E3%2583%2595%25E3%2583%25AC%25E3%2583%25BC%25E3%2583%25A0%25E3%2583%25AF%25E3%2583%25BC%25E3%2582%25AF%25E3%2581%25A7%25E3%2581%2599%25E3%2580%2582\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cblockquote data-sourcepos=\"14:1-14:383\">\n\u003Cp data-sourcepos=\"14:2-14:383\">Selenide(セレニド/セレナイド)とは、「Selenium WebDriver」を利用したテスト自動化フレームワークです。　Selenideは、読みやすく保守しやすい自動テストをJavaで記述できるフレームワークです。「シンプルAPI」「Ajaxサポート」「強力なセレクター」「簡単な設定」などの特徴があります。`\u003C/p>\n\u003C/blockquote>\n\u003Ch1 data-sourcepos=\"17:1-17:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"18:1-18:45\">\n\u003Cspan id=\"新しいプロジェクトを作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%96%B0%E3%81%97%E3%81%84%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>新しいプロジェクトを作成する\u003C/h2>\n\u003Cp data-sourcepos=\"19:1-19:77\">まずはIntelliJを利用して新規プロジェクトを作成します。\u003C/p>\n\u003Ch4 data-sourcepos=\"21:1-21:29\">\n\u003Cspan id=\"プロジェクト作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロジェクト作成\u003C/h4>\n\u003Cp data-sourcepos=\"22:1-22:57\">IntelliJで\u003Ccode>File &gt; New &gt; Project...\u003C/code>を選択します。\u003C/p>\n\u003Ch4 data-sourcepos=\"24:1-24:26\">\n\u003Cspan id=\"設定を入力する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E8%A8%AD%E5%AE%9A%E3%82%92%E5%85%A5%E5%8A%9B%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>設定を入力する\u003C/h4>\n\u003Cp data-sourcepos=\"25:1-26:139\">以下の情報を入力します。その後Nextボタンをクリックします。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1bcbfb15-ee78-a171-0bd6-715b79a73391.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=24cb6643535d9c09e4d2b786f58c89fa\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1bcbfb15-ee78-a171-0bd6-715b79a73391.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=24cb6643535d9c09e4d2b786f58c89fa\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1bcbfb15-ee78-a171-0bd6-715b79a73391.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2a25b5c89a45fa395356804367817666 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1bcbfb15-ee78-a171-0bd6-715b79a73391.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cul data-sourcepos=\"27:2-31:0\">\n\u003Cli data-sourcepos=\"27:2-27:25\">Name:\u003Ccode>selenide-sample\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"28:2-28:33\">Project Template:\u003Ccode>Application\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"29:2-29:31\">Build System:\u003Ccode>Gradle Kotlin\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"30:2-31:0\">Project JDK:\u003Ccode>temurin-17\u003C/code>\n\u003C/li>\n\u003C/ul>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3d3d121a-dfd6-aa1c-7236-276b16b68636.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b05ab0427727b6e662e2a0aa4a40253d\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3d3d121a-dfd6-aa1c-7236-276b16b68636.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b05ab0427727b6e662e2a0aa4a40253d\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3d3d121a-dfd6-aa1c-7236-276b16b68636.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=3733362109f2868ec28c180860068cbf 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3d3d121a-dfd6-aa1c-7236-276b16b68636.png\" loading=\"lazy\">\u003C/a>\nTarget JVM versionは`1.8`では良くない気がしますが、選択肢が13までしかなかったので一旦このままにしておきます。\nFinishボタンをクリックするとプロジェクトが作成されます。\n\u003Ch2 data-sourcepos=\"36:1-36:19\">\n\u003Cspan id=\"gradleの設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#gradle%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Gradleの設定\u003C/h2>\n\u003Cp data-sourcepos=\"37:1-37:60\">以降は以下のサイトを参考にしていきます。\u003C/p>\n\u003Cp data-sourcepos=\"39:1-39:37\">\u003Ciframe id=\"qiita-embed-content__1229aa15f94de6d49ccddc452f83871d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1229aa15f94de6d49ccddc452f83871d\" data-content=\"https%3A%2F%2Fselenide.org%2Fquick-start.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"41:1-41:60\">\u003Ccode>build.gradle.kts\u003C/code>のdependenciesに一行追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"42:1-46:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">dependencies\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"nf\">testImplementation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"com.codeborne:selenide:6.6.6\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"48:1-48:57\">ついでに色々バージョン関連を整えます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"49:1-76:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.jetbrains.kotlin.gradle.tasks.KotlinCompile\u003C/span>\n\n\u003Cspan class=\"nf\">plugins\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"nf\">kotlin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"jvm\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"s\">\"1.6.21\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"n\">group\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"com.example\"\u003C/span>\n\u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"1.0-SNAPSHOT\"\u003C/span>\n\u003Cspan class=\"n\">java\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">sourceCompatibility\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">JavaVersion\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">VERSION_17\u003C/span>\n\n\u003Cspan class=\"nf\">repositories\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"nf\">mavenCentral\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"nf\">dependencies\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"nf\">testImplementation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">kotlin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"test\"\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n    \u003Cspan class=\"nf\">testImplementation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"com.codeborne:selenide:6.6.6\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"n\">tasks\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">test\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"nf\">useJUnitPlatform\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"n\">tasks\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">withType\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">KotlinCompile\u003C/span>\u003Cspan class=\"p\">&gt;()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">kotlinOptions\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">jvmTarget\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"17\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"78:1-78:54\">gradleでライブラリを引っ張ってきます。\u003C/p>\n\u003Ch2 data-sourcepos=\"80:1-80:21\">\n\u003Cspan id=\"テストを書く\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テストを書く\u003C/h2>\n\u003Cp data-sourcepos=\"81:1-81:144\">SelenideのQuickStartにGoogle検索のサンプルがあるとのことだったので、そちらを参考にして作成してみました。\u003C/p>\n\u003Cp data-sourcepos=\"83:1-83:126\">\u003Ciframe id=\"qiita-embed-content__c883b393be39f9ff295e5b04d9c699bc\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c883b393be39f9ff295e5b04d9c699bc\" data-content=\"https%3A%2F%2Fgithub.com%2Fselenide-examples%2Fgoogle%2Fblob%2Fmaster%2Ftest%2Forg%2Fselenide%2Fexamples%2Fgoogle%2Fselenide_page_object%2FGoogleTest.java\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch4 data-sourcepos=\"85:1-85:32\">\n\u003Cspan id=\"テストクラスの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テストクラスの作成\u003C/h4>\n\u003Cp data-sourcepos=\"86:1-86:43\">\u003Ccode>com/example/selenium_sample/GoogleTest.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"87:1-108:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">GoogleTest.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.selenium_sample\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.CollectionCondition.sizeGreaterThan\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Condition.*\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Selenide.*\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.openqa.selenium.By\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">GoogleTest\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Search\u003C/span> \u003Cspan class=\"k\">in\u003C/span> \u003Cspan class=\"nc\">Google`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">open\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"https://duckduckgo.com\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"err\">`$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">By\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">name\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"q\"\u003C/span>\u003Cspan class=\"p\">)).\u003C/span>\u003Cspan class=\"nf\">`val`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"selenide java\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">pressEnter\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n\n        \u003Cspan class=\"err\">`$$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\".results .result\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">shouldHave\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">sizeGreaterThan\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n        \u003Cspan class=\"err\">`$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"#r1-0\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">shouldHave\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">text\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"Selenide: concise UI tests in Java\"\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"109:1-110:139\">コード内の\u003Ccode>#\u003C/code>や\u003Ccode>.\u003C/code>でidやclassを指定しています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5c67712b-64d9-2109-7fa9-15bcfcfaa4f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6dc7f40ceff72297dde11e3739095c6c\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5c67712b-64d9-2109-7fa9-15bcfcfaa4f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=6dc7f40ceff72297dde11e3739095c6c\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5c67712b-64d9-2109-7fa9-15bcfcfaa4f7.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=c12db2fc7ab3bd795cca290fbad86e28 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5c67712b-64d9-2109-7fa9-15bcfcfaa4f7.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"112:1-112:20\">\n\u003Cspan id=\"テスト実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テスト実行\u003C/h4>\n\u003Cp data-sourcepos=\"113:1-113:114\">画面が立ち上がり、実際の検索結果が表示されました。ただテストは失敗しました。\u003C/p>\n\u003Cp data-sourcepos=\"115:1-116:66\">思ったより検索結果が取れなかった、とかでしょうか。\u003Cbr>\n今回はサンプルなので、こちらはあきらめます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"117:1-122:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">console\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"gp\">List size mismatch: expected: &gt;\u003C/span>\u003Cspan class=\"w\"> \u003C/span>1, actual: 1, collection: .results .result\n\u003Cspan class=\"go\">Elements: [\n\u003C/span>\u003Cspan class=\"gp\">\t&lt;div class=\"result result--more\" id=\"rld-1\"&gt;\u003C/span>結果をさらに表示&lt;/div&gt;\n\u003Cspan class=\"go\">]\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"124:1-124:18\">\n\u003Cspan id=\"エラー解決\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A8%E3%83%A9%E3%83%BC%E8%A7%A3%E6%B1%BA\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>エラー解決\u003C/h2>\n\u003Cp data-sourcepos=\"125:1-125:108\">テストは実行されているのですが、コンソールに以下のエラーが発生しました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"126:1-128:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">console\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">SLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"130:1-130:32\">\n\u003Cspan id=\"buildgradlektsを修正\" class=\"fragment\">\u003C/span>\u003Ca href=\"#buildgradlekts%E3%82%92%E4%BF%AE%E6%AD%A3\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>\u003Ccode>build.gradle.kts\u003C/code>を修正\u003C/h4>\n\u003Cp data-sourcepos=\"131:1-131:36\">こちらを参考にしました。\u003C/p>\n\u003Cp data-sourcepos=\"133:1-133:104\">\u003Ciframe id=\"qiita-embed-content__99f3b871bde4750d51f7a0935c2f6ad8\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__99f3b871bde4750d51f7a0935c2f6ad8\" data-content=\"https%3A%2F%2Fstackoverflow.com%2Fquestions%2F7421612%2Fslf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"135:1-135:40\">dependenciesに2行追加しました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"136:1-141:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">dependencies\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"nf\">testImplementation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"org.slf4j:slf4j-api:2.0.0-alpha7\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"nf\">testImplementation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"org.slf4j:slf4j-simple:2.0.0-alpha7\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"143:1-143:57\">結果、エラーは表示されなくなりました。\u003C/p>\n\u003Ch2 data-sourcepos=\"145:1-145:48\">\n\u003Cspan id=\"テスト終了後にブラウザが消える\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E7%B5%82%E4%BA%86%E5%BE%8C%E3%81%AB%E3%83%96%E3%83%A9%E3%82%A6%E3%82%B6%E3%81%8C%E6%B6%88%E3%81%88%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テスト終了後にブラウザが消える\u003C/h2>\n\u003Cp data-sourcepos=\"146:1-146:171\">テスト終了後ブラウザが消えてしまっては動作を確認しにくいですね。テスト終了後、ブラウザを残しておきたいと思います。\u003C/p>\n\u003Ch4 data-sourcepos=\"148:1-148:29\">\n\u003Cspan id=\"configurationの設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#configuration%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>\u003Ccode>Configuration\u003C/code>の設定\u003C/h4>\n\u003Cp data-sourcepos=\"149:1-150:71\">どうやら\u003Ccode>com.codeborne.selenide.Configuration\u003C/code>クラスのプロパティを設定することでテストの動作を変えることができそうです。\u003Cbr>\nそれらしいプロパティ\u003Ccode>holdBrowserOpen\u003C/code>を見つけました。\u003C/p>\n\u003Cp data-sourcepos=\"152:1-152:52\">Javadocにはこのように書かれています。\u003C/p>\n\u003Cblockquote data-sourcepos=\"153:1-153:258\">\n\u003Cp data-sourcepos=\"153:2-153:258\">If holdBrowserOpen is true, browser window stays open after running tests. It may be useful for debugging. Can be configured either programmatically, via selenide.properties file or by system property \"-Dselenide.holdBrowserOpen=true\". Default value: false.\u003C/p>\n\u003C/blockquote>\n\u003Cp data-sourcepos=\"155:1-155:324\">このプロパティをtrueにしておくと、テスト終了後もブラウザを開いたままにします。これはデバッグに役立つかもしれません。プログラムからも、\u003Ccode>selenide.properties\u003C/code>からも、またJVM引数からも設定することができます。デフォルトはfalseです。\u003C/p>\n\u003Ch4 data-sourcepos=\"157:1-157:69\">\n\u003Cspan id=\"テスト実行前にこのプロパティをtrueにしておく\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E8%A1%8C%E5%89%8D%E3%81%AB%E3%81%93%E3%81%AE%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92true%E3%81%AB%E3%81%97%E3%81%A6%E3%81%8A%E3%81%8F\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テスト実行前にこのプロパティをtrueにしておく\u003C/h4>\n\u003Cp data-sourcepos=\"158:1-158:66\">テストクラスを以下のように変更してみました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"159:1-188:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">GoogleTest.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.selenium_sample\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.CollectionCondition.sizeGreaterThan\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Condition.*\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Configuration\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Selenide.*\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.BeforeEach![スクリーンショット\u003C/span> \u003Cspan class=\"mi\">2022\u003C/span>\u003Cspan class=\"p\">-\u003C/span>\u003Cspan class=\"mi\">07\u003C/span>\u003Cspan class=\"p\">-\u003C/span>\u003Cspan class=\"mi\">03\u003C/span> \u003Cspan class=\"mf\">22.51.13\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">png\u003C/span>\u003Cspan class=\"p\">](\u003C/span>\u003Cspan class=\"n\">https\u003C/span>\u003Cspan class=\"p\">:\u003C/span>\u003Cspan class=\"c1\">//qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/8d44122b-27da-a846-03a1-27dba95bd0ae.png)\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.openqa.selenium.By\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">GoogleTest\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@BeforeEach\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Set\u003C/span> \u003Cspan class=\"nc\">Configure\u003C/span> \u003Cspan class=\"nc\">Before\u003C/span> \u003Cspan class=\"nc\">Test`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"nc\">Configuration\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">holdBrowserOpen\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">true\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Search\u003C/span> \u003Cspan class=\"k\">in\u003C/span> \u003Cspan class=\"nc\">Google`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">open\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"https://duckduckgo.com\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"err\">`$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">By\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">name\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"q\"\u003C/span>\u003Cspan class=\"p\">)).\u003C/span>\u003Cspan class=\"nf\">`val`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"selenide java\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">pressEnter\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n\n        \u003Cspan class=\"err\">`$$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\".results .result\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">shouldHave\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">sizeGreaterThan\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n        \u003Cspan class=\"err\">`$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"#r1-0\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">shouldHave\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">text\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"Selenide: concise UI tests in Java\"\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"190:1-191:139\">今度はブラウザが消えずに残ってくれました👏\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1da35738-b271-3cc0-df9b-7fbda1155745.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cad65b4d532e3c1ae9d7a70c085d624d\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1da35738-b271-3cc0-df9b-7fbda1155745.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cad65b4d532e3c1ae9d7a70c085d624d\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1da35738-b271-3cc0-df9b-7fbda1155745.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=24f6431d34513a83ecb8be3b38cfabbf 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1da35738-b271-3cc0-df9b-7fbda1155745.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"193:1-193:33\">\n\u003Cspan id=\"chrome以外で動かしたい\" class=\"fragment\">\u003C/span>\u003Ca href=\"#chrome%E4%BB%A5%E5%A4%96%E3%81%A7%E5%8B%95%E3%81%8B%E3%81%97%E3%81%9F%E3%81%84\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Chrome以外で動かしたい\u003C/h2>\n\u003Cp data-sourcepos=\"194:1-195:206\">Chrome以外のブラウザでテストをしたいということもあると思います。そのときはどうすれば良いでしょうか。\u003Cbr>\nこちらも\u003Ccode>com.codeborne.selenide.Configuration\u003C/code>クラスのプロパティを設定することで変更が可能なようです。\u003Ccode>browser\u003C/code>プロパティには以下のように記載があります。\u003C/p>\n\u003Cblockquote data-sourcepos=\"196:1-196:227\">\n\u003Cp data-sourcepos=\"196:3-196:227\">Which browser to use. Can be configured either programmatically, via selenide.properties file or by system property \"-Dselenide.browser=ie\". Supported values: \"chrome\", \"firefox\", \"ie\", \"opera\", \"edge\" Default value: \"chrome\"\u003C/p>\n\u003C/blockquote>\n\u003Cp data-sourcepos=\"198:1-198:268\">どのブラウザをしようするか、プログラムからも、\u003Ccode>selenide.properties\u003C/code>からも、またJVM引数からも設定することができます。サポートされている値は\u003Ccode>chrome\u003C/code>/\u003Ccode>firefox\u003C/code>/\u003Ccode>ie\u003C/code>/\u003Ccode>opera\u003C/code>/\u003Ccode>edge\u003C/code>で、デフォルトは\u003Ccode>chrome\u003C/code>。\u003C/p>\n\u003Cp data-sourcepos=\"200:1-200:84\">こちらをsafariに変更してみます。定数も用意されていました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"202:1-233:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">GoogleTest.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.selenium_sample\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Browser\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Browsers\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.CollectionCondition.sizeGreaterThan\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Condition.*\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Configuration\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.codeborne.selenide.Selenide.*\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.BeforeEach\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.openqa.selenium.By\u003C/span>\n\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">GoogleTest\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@BeforeEach\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Set\u003C/span> \u003Cspan class=\"nc\">Configure\u003C/span> \u003Cspan class=\"nc\">Before\u003C/span> \u003Cspan class=\"nc\">Test`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"nc\">Configuration\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">holdBrowserOpen\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">true\u003C/span>\n        \u003Cspan class=\"nc\">Configuration\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">browser\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">Browsers\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">SAFARI\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Search\u003C/span> \u003Cspan class=\"k\">in\u003C/span> \u003Cspan class=\"nc\">Google`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"k\">open\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"https://duckduckgo.com\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"err\">`$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">By\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">name\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"q\"\u003C/span>\u003Cspan class=\"p\">)).\u003C/span>\u003Cspan class=\"nf\">`val`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"selenide java\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">pressEnter\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n\n        \u003Cspan class=\"err\">`$$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\".results .result\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">shouldHave\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">sizeGreaterThan\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n        \u003Cspan class=\"err\">`$`\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"#r1-0\"\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">shouldHave\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nf\">text\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"Selenide: concise UI tests in Java\"\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"235:1-235:51\">ただこのままでは動きませんでした。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"console\" data-sourcepos=\"236:1-238:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">console\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"go\">Could not start a new session. Possible causes are invalid address of the remote server or browser start-up failure.\n\u003C/span>\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"240:1-240:23\">\n\u003Cspan id=\"safari側の設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#safari%E5%81%B4%E3%81%AE%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>safari側の設定\u003C/h4>\n\u003Cp data-sourcepos=\"241:1-242:139\">リモートオートメーションを許可にチェックを入れます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F2580da55-3616-c280-0444-9c8dd0c668bf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b23f7c4eb1d69c87b5bf92e8a542ffee\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F2580da55-3616-c280-0444-9c8dd0c668bf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=b23f7c4eb1d69c87b5bf92e8a542ffee\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F2580da55-3616-c280-0444-9c8dd0c668bf.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=68749ccd7672be9ea198344ecabff6c4 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/2580da55-3616-c280-0444-9c8dd0c668bf.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"244:1-244:26\">\n\u003Cspan id=\"再度テスト実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%86%8D%E5%BA%A6%E3%83%86%E3%82%B9%E3%83%88%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>再度テスト実行\u003C/h4>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F4b7b0685-c15a-1040-eb4b-0ff7ebe027a6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=93cbeaf03b82a0dd944f8265fe8a5afc\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F4b7b0685-c15a-1040-eb4b-0ff7ebe027a6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=93cbeaf03b82a0dd944f8265fe8a5afc\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F4b7b0685-c15a-1040-eb4b-0ff7ebe027a6.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2a3f2e4f80ec67ca3fcadbf50fcb635e 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/4b7b0685-c15a-1040-eb4b-0ff7ebe027a6.png\" loading=\"lazy\">\u003C/a>\n\u003Cp data-sourcepos=\"247:1-249:129\">safariの場合、デフォルトでwebdriverが存在するようです。（パス:\u003Cbr>\n\u003Ccode>/usr/bin/safaridriver\u003C/code>）。\u003Cbr>\n他のブラウザを使用する場合は、自分でダウンロードする等の手間が発生するかもしれません。\u003C/p>\n\u003Cp data-sourcepos=\"251:1-251:59\">seleniumのこのページが参考になりそうです。\u003C/p>\n\u003Cp data-sourcepos=\"253:1-253:84\">\u003Ciframe id=\"qiita-embed-content__a89a2be74220a7961def76da4f68172d\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__a89a2be74220a7961def76da4f68172d\" data-content=\"https%3A%2F%2Fwww.selenium.dev%2Fja%2Fdocumentation%2Fwebdriver%2Fgetting_started%2Finstall_drivers%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"255:1-255:14\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h1>\n\u003Cp data-sourcepos=\"256:1-256:297\">テストを起動するだけでしたら簡単ですね。ただ、ページオブジェクト等を用意してさらに綺麗にしていくとなると最初は大変かもしれません。しかし、手動でテストをくりかえすよりかは良いのではないかと思います。\u003C/p>\n","# 前提\nせっかくKotlinに触れ始めたので、ブラウザ自動テストを作成したいと思います。\n\n# 環境\n- macOS: 11.6.4\n- IntelliJ IDEA: 2021.2.3 (Community Edition)\n- Kotlin JVM: 1.6.21 \n- Gradle: 7.4.2\n- Java: temurin 17.0.3\n\n# Selenideについて\nhttps://www.ossnews.jp/oss_info/Selenide#:~:text=Selenide(%E3%82%BB%E3%83%AC%E3%83%8B%E3%83%89%2F%E3%82%BB%E3%83%AC%E3%83%8A%E3%82%A4%E3%83%89)%E3%81%A8,%E3%83%86%E3%82%B9%E3%83%88%E8%87%AA%E5%8B%95%E5%8C%96%E3%83%95%E3%83%AC%E3%83%BC%E3%83%A0%E3%83%AF%E3%83%BC%E3%82%AF%E3%81%A7%E3%81%99%E3%80%82\n\n>Selenide(セレニド/セレナイド)とは、「Selenium WebDriver」を利用したテスト自動化フレームワークです。　Selenideは、読みやすく保守しやすい自動テストをJavaで記述できるフレームワークです。「シンプルAPI」「Ajaxサポート」「強力なセレクター」「簡単な設定」などの特徴があります。`\n\n\n# 手順\n## 新しいプロジェクトを作成する\nまずはIntelliJを利用して新規プロジェクトを作成します。\n\n#### プロジェクト作成\nIntelliJで`File > New > Project...`を選択します。\n\n#### 設定を入力する\n以下の情報を入力します。その後Nextボタンをクリックします。\n\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1bcbfb15-ee78-a171-0bd6-715b79a73391.png\">\n - Name:`selenide-sample`\n - Project Template:`Application`\n - Build System:`Gradle Kotlin`\n - Project JDK:`temurin-17`\n\n\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3d3d121a-dfd6-aa1c-7236-276b16b68636.png\">\nTarget JVM versionは`1.8`では良くない気がしますが、選択肢が13までしかなかったので一旦このままにしておきます。\nFinishボタンをクリックするとプロジェクトが作成されます。\n\n##  Gradleの設定\n以降は以下のサイトを参考にしていきます。\n\nhttps://selenide.org/quick-start.html\n\n`build.gradle.kts`のdependenciesに一行追加します。\n```build.gradle.kts\ndependencies {\n  testImplementation(\"com.codeborne:selenide:6.6.6\")\n}\n```\n\nついでに色々バージョン関連を整えます。\n```build.gradle.kts\nimport org.jetbrains.kotlin.gradle.tasks.KotlinCompile\n\nplugins {\n    kotlin(\"jvm\") version \"1.6.21\"\n}\n\ngroup = \"com.example\"\nversion = \"1.0-SNAPSHOT\"\njava.sourceCompatibility = JavaVersion.VERSION_17\n\nrepositories {\n    mavenCentral()\n}\n\ndependencies {\n    testImplementation(kotlin(\"test\"))\n    testImplementation(\"com.codeborne:selenide:6.6.6\")\n}\n\ntasks.test {\n    useJUnitPlatform()\n}\n\ntasks.withType\u003CKotlinCompile>() {\n    kotlinOptions.jvmTarget = \"17\"\n}\n```\n\ngradleでライブラリを引っ張ってきます。\n\n## テストを書く\nSelenideのQuickStartにGoogle検索のサンプルがあるとのことだったので、そちらを参考にして作成してみました。\n\nhttps://github.com/selenide-examples/google/blob/master/test/org/selenide/examples/google/selenide_page_object/GoogleTest.java\n\n#### テストクラスの作成\n`com/example/selenium_sample/GoogleTest.kt`\n```kotlin:GoogleTest.kt\npackage com.example.selenium_sample\n\nimport com.codeborne.selenide.CollectionCondition.sizeGreaterThan\nimport com.codeborne.selenide.Condition.*\nimport com.codeborne.selenide.Selenide.*\nimport org.junit.jupiter.api.Test\nimport org.openqa.selenium.By\n\nclass GoogleTest {\n\n    @Test\n    fun `Search in Google`() {\n        open(\"https://duckduckgo.com\")\n        `$`(By.name(\"q\")).`val`(\"selenide java\").pressEnter()\n\n        `$$`(\".results .result\").shouldHave(sizeGreaterThan(1))\n        `$`(\"#r1-0\").shouldHave(text(\"Selenide: concise UI tests in Java\"))\n    }\n\n}\n```\nコード内の`#`や`.`でidやclassを指定しています。\n\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5c67712b-64d9-2109-7fa9-15bcfcfaa4f7.png\">\n\n#### テスト実行\n画面が立ち上がり、実際の検索結果が表示されました。ただテストは失敗しました。\n\n思ったより検索結果が取れなかった、とかでしょうか。\n今回はサンプルなので、こちらはあきらめます。\n```console:console\nList size mismatch: expected: > 1, actual: 1, collection: .results .result\nElements: [\n\t\u003Cdiv class=\"result result--more\" id=\"rld-1\">結果をさらに表示\u003C/div>\n]\n```\n\n## エラー解決\nテストは実行されているのですが、コンソールに以下のエラーが発生しました。\n```console:console\nSLF4J: Failed to load class \"org.slf4j.impl.StaticLoggerBinder\".\n```\n\n#### `build.gradle.kts`を修正\nこちらを参考にしました。\n\nhttps://stackoverflow.com/questions/7421612/slf4j-failed-to-load-class-org-slf4j-impl-staticloggerbinder\n\ndependenciesに2行追加しました。\n```build.gradle.kts\ndependencies {\n    testImplementation(\"org.slf4j:slf4j-api:2.0.0-alpha7\")\n    testImplementation(\"org.slf4j:slf4j-simple:2.0.0-alpha7\")\n}\n```\n\n結果、エラーは表示されなくなりました。\n\n## テスト終了後にブラウザが消える\nテスト終了後ブラウザが消えてしまっては動作を確認しにくいですね。テスト終了後、ブラウザを残しておきたいと思います。\n\n#### `Configuration`の設定\nどうやら`com.codeborne.selenide.Configuration`クラスのプロパティを設定することでテストの動作を変えることができそうです。\nそれらしいプロパティ`holdBrowserOpen`を見つけました。\n\nJavadocにはこのように書かれています。\n>If holdBrowserOpen is true, browser window stays open after running tests. It may be useful for debugging. Can be configured either programmatically, via selenide.properties file or by system property \"-Dselenide.holdBrowserOpen=true\". Default value: false.\n\nこのプロパティをtrueにしておくと、テスト終了後もブラウザを開いたままにします。これはデバッグに役立つかもしれません。プログラムからも、`selenide.properties`からも、またJVM引数からも設定することができます。デフォルトはfalseです。\n\n#### テスト実行前にこのプロパティをtrueにしておく\nテストクラスを以下のように変更してみました。\n```kotlin:GoogleTest.kt\npackage com.example.selenium_sample\n\nimport com.codeborne.selenide.CollectionCondition.sizeGreaterThan\nimport com.codeborne.selenide.Condition.*\nimport com.codeborne.selenide.Configuration\nimport com.codeborne.selenide.Selenide.*\nimport org.junit.jupiter.api.BeforeEach![スクリーンショット 2022-07-03 22.51.13.png](https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/8d44122b-27da-a846-03a1-27dba95bd0ae.png)\n\nimport org.junit.jupiter.api.Test\nimport org.openqa.selenium.By\n\nclass GoogleTest {\n\n    @BeforeEach\n    fun `Set Configure Before Test`() {\n        Configuration.holdBrowserOpen = true\n    }\n\n    @Test\n    fun `Search in Google`() {\n        open(\"https://duckduckgo.com\")\n        `$`(By.name(\"q\")).`val`(\"selenide java\").pressEnter()\n\n        `$$`(\".results .result\").shouldHave(sizeGreaterThan(1))\n        `$`(\"#r1-0\").shouldHave(text(\"Selenide: concise UI tests in Java\"))\n    }\n\n}\n```\n\n今度はブラウザが消えずに残ってくれました👏\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1da35738-b271-3cc0-df9b-7fbda1155745.png\">\n\n## Chrome以外で動かしたい\nChrome以外のブラウザでテストをしたいということもあると思います。そのときはどうすれば良いでしょうか。\nこちらも`com.codeborne.selenide.Configuration`クラスのプロパティを設定することで変更が可能なようです。`browser`プロパティには以下のように記載があります。\n> Which browser to use. Can be configured either programmatically, via selenide.properties file or by system property \"-Dselenide.browser=ie\". Supported values: \"chrome\", \"firefox\", \"ie\", \"opera\", \"edge\" Default value: \"chrome\"\n\nどのブラウザをしようするか、プログラムからも、`selenide.properties`からも、またJVM引数からも設定することができます。サポートされている値は`chrome`/`firefox`/`ie`/`opera`/`edge`で、デフォルトは`chrome`。\n\nこちらをsafariに変更してみます。定数も用意されていました。\n\n```kotlin:GoogleTest.kt\npackage com.example.selenium_sample\n\nimport com.codeborne.selenide.Browser\nimport com.codeborne.selenide.Browsers\nimport com.codeborne.selenide.CollectionCondition.sizeGreaterThan\nimport com.codeborne.selenide.Condition.*\nimport com.codeborne.selenide.Configuration\nimport com.codeborne.selenide.Selenide.*\nimport org.junit.jupiter.api.BeforeEach\nimport org.junit.jupiter.api.Test\nimport org.openqa.selenium.By\n\nclass GoogleTest {\n\n    @BeforeEach\n    fun `Set Configure Before Test`() {\n        Configuration.holdBrowserOpen = true\n        Configuration.browser = Browsers.SAFARI\n    }\n\n    @Test\n    fun `Search in Google`() {\n        open(\"https://duckduckgo.com\")\n        `$`(By.name(\"q\")).`val`(\"selenide java\").pressEnter()\n\n        `$$`(\".results .result\").shouldHave(sizeGreaterThan(1))\n        `$`(\"#r1-0\").shouldHave(text(\"Selenide: concise UI tests in Java\"))\n    }\n\n}\n```\n\nただこのままでは動きませんでした。\n```console:console\nCould not start a new session. Possible causes are invalid address of the remote server or browser start-up failure.\n```\n\n#### safari側の設定\nリモートオートメーションを許可にチェックを入れます。\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/2580da55-3616-c280-0444-9c8dd0c668bf.png\">\n\n#### 再度テスト実行\n\u003Cimg width=\"600\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/4b7b0685-c15a-1040-eb4b-0ff7ebe027a6.png\">\n\nsafariの場合、デフォルトでwebdriverが存在するようです。（パス:\n`/usr/bin/safaridriver`）。\n他のブラウザを使用する場合は、自分でダウンロードする等の手間が発生するかもしれません。\n\nseleniumのこのページが参考になりそうです。\n\nhttps://www.selenium.dev/ja/documentation/webdriver/getting_started/install_drivers/\n\n# さいごに\nテストを起動するだけでしたら簡単ですね。ただ、ページオブジェクト等を用意してさらに綺麗にしていくとなると最初は大変かもしれません。しかし、手動でテストをくりかえすよりかは良いのではないかと思います。\n\n\n","2022-07-08T12:36:52+09:00","9946b2b5b14dd888a50d",[233,236,239],{"name":234,"versions":235},"Selenium",[],{"name":237,"versions":238},"Kotlin",[],{"name":240,"versions":241},"Selenide",[],"Kotlin×Selenideを利用してブラウザ自動テストをしてみる","https://qiita.com/y5347M/items/9946b2b5b14dd888a50d",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1929,{"rendered_body":247,"body":248,"coediting":7,"comments_count":8,"created_at":249,"group":10,"id":250,"likes_count":8,"private":7,"reactions_count":8,"stocks_count":8,"tags":251,"title":256,"updated_at":249,"url":257,"user":258,"page_views_count":259,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:69\">前回に引き続きチュートリアルを実施してみます。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:51\">\u003Ciframe id=\"qiita-embed-content__c94604bd81f47809771f96acb5b3bb5c\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__c94604bd81f47809771f96acb5b3bb5c\" data-content=\"https%3A%2F%2Fqiita.com%2Fy5347M%2Fitems%2F203a2b2fc3532bf9699f\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:141\">コーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\u003C/p>\n\u003Cp data-sourcepos=\"8:1-8:69\">\u003Ciframe id=\"qiita-embed-content__1ac7c48af1eb22c15066b663006a3377\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1ac7c48af1eb22c15066b663006a3377\" data-content=\"https%3A%2F%2Frunebook.dev%2Fja%2Fdocs%2Fkotlin%2Fdocs%2Freference%2Fcoding-conventions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"10:1-10:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"11:1-16:0\">\n\u003Cli data-sourcepos=\"11:1-11:15\">macOS: 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:45\">IntelliJ IDEA: 2021.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"13:1-13:38\">Kotlin: 212-1.5.10-release-IJ5457.46\u003C/li>\n\u003Cli data-sourcepos=\"14:1-14:15\">Gradle: 7.4.1\u003C/li>\n\u003Cli data-sourcepos=\"15:1-16:0\">Java: temurin 17.0.3\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"17:1-17:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"18:1-18:33\">\n\u003Cspan id=\"ブログエンジンを実装\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%96%E3%83%AD%E3%82%B0%E3%82%A8%E3%83%B3%E3%82%B8%E3%83%B3%E3%82%92%E5%AE%9F%E8%A3%85\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ブログエンジンを実装\u003C/h2>\n\u003Ch4 data-sourcepos=\"19:1-19:48\">\n\u003Cspan id=\"blog-mustache-テンプレートを更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#blog-mustache-%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>\"blog\" Mustache テンプレートを更新\u003C/h4>\n\u003Cp data-sourcepos=\"20:1-20:44\">\u003Ccode>src/main/resources/templates/blog.mustache\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"mustache\" data-sourcepos=\"21:1-42:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">blog.mustache\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">header\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\n\u003Cspan class=\"nt\">&lt;h1&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/h1&gt;\u003C/span>\n\n\u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"articles\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n\n  \u003Cspan class=\"k\">{{#\u003C/span>\u003Cspan class=\"nn\">articles\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n    \u003Cspan class=\"nt\">&lt;section&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;header\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-header\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n        \u003Cspan class=\"nt\">&lt;h2\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-title\"\u003C/span>\u003Cspan class=\"nt\">&gt;&lt;a\u003C/span> \u003Cspan class=\"na\">href=\u003C/span>\u003Cspan class=\"s\">\"/article/\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">slug\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"s\">\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/a&gt;&lt;/h2&gt;\u003C/span>\n        \u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-meta\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>By  \u003Cspan class=\"nt\">&lt;strong&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">author\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">firstname\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/strong&gt;\u003C/span>, on \u003Cspan class=\"nt\">&lt;strong&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">addedAt\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/strong&gt;&lt;/div&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;/header&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-description\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n        \u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">headline\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n      \u003Cspan class=\"nt\">&lt;/div&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;/section&gt;\u003C/span>\n  \u003Cspan class=\"k\">{{/\u003C/span>\u003Cspan class=\"nn\">articles\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003Cspan class=\"nt\">&lt;/div&gt;\u003C/span>\n\n\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">footer\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"43:1-43:29\">\n\u003Cspan id=\"新しい記事を作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%96%B0%E3%81%97%E3%81%84%E8%A8%98%E4%BA%8B%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>新しい記事を作成\u003C/h4>\n\u003Cp data-sourcepos=\"44:1-44:47\">\u003Ccode>src/main/resources/templates/article.mustache\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"mustache\" data-sourcepos=\"45:1-62:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">article.mustache\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">header\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\n\u003Cspan class=\"nt\">&lt;section\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;header\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-header\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;h1\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-title\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/h1&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;p\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-meta\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>By  \u003Cspan class=\"nt\">&lt;strong&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">author\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">firstname\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/strong&gt;\u003C/span>, on \u003Cspan class=\"nt\">&lt;strong&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">addedAt\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/strong&gt;&lt;/p&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;/header&gt;\u003C/span>\n\n  \u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-description\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n    \u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">headline\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\n    \u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">content\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n  \u003Cspan class=\"nt\">&lt;/div&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;/section&gt;\u003C/span>\n\n\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">footer\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"64:1-64:24\">\n\u003Cspan id=\"controllerを更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#controller%E3%82%92%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Controllerを更新\u003C/h4>\n\u003Cp data-sourcepos=\"65:1-66:61\">このコントローラーは単一のコンストラクター（暗黙的な\u003Ccode>@Autowired\u003C/code>）があるので、\u003Ccode>ArticleRepository\u003C/code>と\u003Ccode>MarkdownConverter\u003C/code>のコンストラクターのパラメーターは自動的にAutrowiredされるそうです。\u003Cbr>\n（\u003Ccode>MarkdownConverter\u003C/code>ってどこのことでしょう…）\u003C/p>\n\u003Cp data-sourcepos=\"68:1-68:52\">\u003Ccode>src/main/kotlin/com/example/blog/HtmlController.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"69:1-119:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">HtmlController.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.http.HttpStatus\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.stereotype.Controller\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.ui.Model\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.ui.set\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.bind.annotation.GetMapping\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.bind.annotation.PathVariable\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.server.ResponseStatusException\u003C/span>\n\n\u003Cspan class=\"nd\">@Controller\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">HtmlController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">repository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@GetMapping\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"/\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">blog\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Model\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"title\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"Blog\"\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"articles\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">repository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findAllByOrderByAddedAtDesc\u003C/span>\u003Cspan class=\"p\">().\u003C/span>\u003Cspan class=\"nf\">map\u003C/span> \u003Cspan class=\"p\">{\u003C/span> \u003Cspan class=\"n\">it\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">render\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">}\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"s\">\"blog\"\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@GetMapping\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"/article/{slug}\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nd\">@PathVariable\u003C/span> \u003Cspan class=\"n\">slug\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Model\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">article\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">repository\u003C/span>\n                \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findBySlug\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">slug\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n                \u003Cspan class=\"o\">?.\u003C/span>\u003Cspan class=\"nf\">render\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n                \u003Cspan class=\"o\">?:\u003C/span> \u003Cspan class=\"k\">throw\u003C/span> \u003Cspan class=\"nc\">ResponseStatusException\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">HttpStatus\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">NOT_FOUND\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"This article does not exist\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"title\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">title\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"article\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">article\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"s\">\"article\"\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">render\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">RenderedArticle\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"n\">slug\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"n\">title\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"n\">headline\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"n\">content\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"n\">author\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"n\">addedAt\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">format\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n    \u003Cspan class=\"p\">)\u003C/span>\n\n    \u003Cspan class=\"kd\">data class\u003C/span> \u003Cspan class=\"nc\">RenderedArticle\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n            \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">slug\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">title\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">headline\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">content\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">author\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleUser\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n            \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">addedAt\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"121:1-121:29\">\n\u003Cspan id=\"初期データを登録\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%88%9D%E6%9C%9F%E3%83%87%E3%83%BC%E3%82%BF%E3%82%92%E7%99%BB%E9%8C%B2\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>初期データを登録\u003C/h4>\n\u003Cp data-sourcepos=\"122:1-122:55\">\u003Ccode>src/main/kotlin/com/example/blog/BlogConfiguration.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"123:1-152:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">BlogConfiguration.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.ApplicationRunner\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.context.annotation.Bean\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.context.annotation.Configuration\u003C/span>\n\n\u003Cspan class=\"nd\">@Configuration\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">BlogConfiguration\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Bean\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">databaseInitializer\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">articleUserRepository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleUserRepository\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                            \u003Cspan class=\"n\">articleRepository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">ApplicationRunner\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">smaldini\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">articleUserRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">save\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">ArticleUser\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"smaldini\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Stéphane\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Maldini\"\u003C/span>\u003Cspan class=\"p\">))\u003C/span>\n        \u003Cspan class=\"n\">articleRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">save\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n                \u003Cspan class=\"n\">title\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"Reactor Bismuth is out\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                \u003Cspan class=\"n\">headline\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"Lorem ipsum\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                \u003Cspan class=\"n\">content\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"dolor sit amet\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                \u003Cspan class=\"n\">author\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">smaldini\u003C/span>\n        \u003Cspan class=\"p\">))\u003C/span>\n        \u003Cspan class=\"n\">articleRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">save\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n                \u003Cspan class=\"n\">title\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"Reactor Aluminium has landed\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                \u003Cspan class=\"n\">headline\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"Lorem ipsum\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                \u003Cspan class=\"n\">content\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"dolor sit amet\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n                \u003Cspan class=\"n\">author\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">smaldini\u003C/span>\n        \u003Cspan class=\"p\">))\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"154:1-154:29\">\n\u003Cspan id=\"統合テストの更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%B5%B1%E5%90%88%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>統合テストの更新\u003C/h4>\n\u003Cp data-sourcepos=\"155:1-155:54\">\u003Ccode>src/test/kotlin/com/example/blog/IntegrationTests.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"156:1-200:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>package com.example.blog\n\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.jupiter.api.AfterAll\nimport org.junit.jupiter.api.BeforeAll\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.boot.test.web.client.TestRestTemplate\nimport org.springframework.boot.test.web.client.getForEntity\nimport org.springframework.http.HttpStatus\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n    @BeforeAll\n    fun setup() {\n        println(\"&gt;&gt; Setup\")\n    }\n\n    @Test\n    fun `Assert blog page title, content and status code`() {\n        println(\"&gt;&gt; Assert blog page title, content and status code\")\n        val entity = restTemplate.getForEntity&lt;String&gt;(\"/\")\n        assertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n        assertThat(entity.body).contains(\"&lt;h1&gt;Blog&lt;/h1&gt;\", \"Reactor\")\n    }\n\n    @Test\n    fun `Assert article page title, content and status code`() {\n        println(\"&gt;&gt; Assert article page title, content and status code\")\n        val title = \"Reactor Aluminium has landed\"\n        val entity = restTemplate.getForEntity&lt;String&gt;(\"/article/${title.toSlug()}\")\n        assertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n        assertThat(entity.body).contains(title, \"Lorem ipsum\", \"dolor sit amet\")\n    }\n\n    @AfterAll\n    fun teardown() {\n        println(\"&gt;&gt; Tear down\")\n    }\n\n}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"202:1-205:139\">アプリケーションを起動して、\u003Ca href=\"http://localhost:8080/\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080\u003C/a>にアクセスします。初期化データが投入されています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd0ac4c91-b31c-8efb-d6ff-4eb26a5bbc3c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fa3402cfcad554e58d6edf18ed274094\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd0ac4c91-b31c-8efb-d6ff-4eb26a5bbc3c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=fa3402cfcad554e58d6edf18ed274094\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fd0ac4c91-b31c-8efb-d6ff-4eb26a5bbc3c.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=048b63cbf264b912121b7cdd13a29602 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/d0ac4c91-b31c-8efb-d6ff-4eb26a5bbc3c.png\" loading=\"lazy\">\u003C/a>\u003Cbr>\nリンクになっているところをクリックします。記事が参照できるようになっています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F56fd3136-17f1-7cf8-6dab-07ab431bfdf9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eacc60ddcb085233ca6ec83b267caef6\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F56fd3136-17f1-7cf8-6dab-07ab431bfdf9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eacc60ddcb085233ca6ec83b267caef6\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F56fd3136-17f1-7cf8-6dab-07ab431bfdf9.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=f62c2416998a4e49ce9ee53c8e7004ea 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/56fd3136-17f1-7cf8-6dab-07ab431bfdf9.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"208:1-208:24\">\n\u003Cspan id=\"構成プロパティ\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%A7%8B%E6%88%90%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>構成プロパティ\u003C/h2>\n\u003Cp data-sourcepos=\"209:1-209:262\">引用：\u003Ccode>Kotlin では、アプリケーションプロパティを管理するための推奨される方法は、@ConfigurationProperties を @ConstructorBinding と組み合わせて、読み取り専用プロパティを使用できるようにすること\u003C/code>\u003C/p>\n\u003Cp data-sourcepos=\"211:1-211:18\">だそうです。\u003C/p>\n\u003Ch4 data-sourcepos=\"212:1-212:29\">\n\u003Cspan id=\"プロパティの用意\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%81%AE%E7%94%A8%E6%84%8F\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロパティの用意\u003C/h4>\n\u003Cp data-sourcepos=\"213:1-213:52\">\u003Ccode>src/main/kotlin/com/example/blog/BlogProperties.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"214:1-225:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">BlogProperties.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.context.properties.ConfigurationProperties\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.context.properties.ConstructorBinding\u003C/span>\n\n\u003Cspan class=\"nd\">@ConstructorBinding\u003C/span>\n\u003Cspan class=\"nd\">@ConfigurationProperties\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"blog\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"kd\">data class\u003C/span> \u003Cspan class=\"nc\">BlogProperties\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">title\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">banner\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Banner\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"kd\">data class\u003C/span> \u003Cspan class=\"nc\">Banner\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">title\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">content\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"227:1-227:74\">\n\u003Cspan id=\"アプリケーションレベルでプロパティを有効にする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%83%AC%E3%83%99%E3%83%AB%E3%81%A7%E3%83%97%E3%83%AD%E3%83%91%E3%83%86%E3%82%A3%E3%82%92%E6%9C%89%E5%8A%B9%E3%81%AB%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アプリケーションレベルでプロパティを有効にする\u003C/h4>\n\u003Cp data-sourcepos=\"228:1-228:53\">\u003Ccode>src/main/kotlin/com/example/blog/BlogApplication.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"229:1-243:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">BlogApplication.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.autoconfigure.SpringBootApplication\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.context.properties.EnableConfigurationProperties\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.runApplication\u003C/span>\n\n\u003Cspan class=\"nd\">@SpringBootApplication\u003C/span>\n\u003Cspan class=\"nd\">@EnableConfigurationProperties\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">BlogProperties\u003C/span>\u003Cspan class=\"o\">::\u003C/span>\u003Cspan class=\"k\">class\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">BlogApplication\u003C/span>\n\n\u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">main\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">args\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Array\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">&gt;)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">runApplication\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">BlogApplication\u003C/span>\u003Cspan class=\"p\">&gt;(*\u003C/span>\u003Cspan class=\"n\">args\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"245:1-245:30\">\n\u003Cspan id=\"buildgradlektsの更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#buildgradlekts%E3%81%AE%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>build.gradle.ktsの更新\u003C/h4>\n\u003Cp data-sourcepos=\"246:1-247:18\">カスタムプロパティをIDEに認識させるために、\u003Ccode>spring-boot-configuration-processor\u003C/code>依存関係でkapt を構成する必要があります。\u003Cbr>\n\u003Ccode>build.gradle.kts\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"248:1-258:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">plugins\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"nf\">kotlin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"kapt\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"s\">\"1.4.32\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"nf\">dependencies\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"nf\">kapt\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"org.springframework.boot:spring-boot-configuration-processor\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"260:1-260:36\">\n\u003Cspan id=\"applicationpropertiesの更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#applicationproperties%E3%81%AE%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>application.propertiesの更新\u003C/h4>\n\u003Cdiv class=\"code-frame\" data-lang=\"properties\" data-sourcepos=\"261:1-265:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.properties\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"py\">blog.title\u003C/span>\u003Cspan class=\"p\">=\u003C/span>\u003Cspan class=\"s\">Blog\u003C/span>\n\u003Cspan class=\"py\">blog.banner.title\u003C/span>\u003Cspan class=\"p\">=\u003C/span>\u003Cspan class=\"s\">Warning\u003C/span>\n\u003Cspan class=\"py\">blog.banner.content\u003C/span>\u003Cspan class=\"p\">=\u003C/span>\u003Cspan class=\"s\">The blog will be down tomorrow.\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"267:1-267:51\">せっかくなのでyml形式にしてみます。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yml\" data-sourcepos=\"268:1-274:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">application.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">blog\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">title\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Blog\u003C/span>\n  \u003Cspan class=\"na\">banner\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n    \u003Cspan class=\"na\">title\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">Warning\u003C/span>\n    \u003Cspan class=\"na\">content\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">The blog will be down tomorrow.\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"276:1-276:32\">\n\u003Cspan id=\"テンプレートの更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%81%AE%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テンプレートの更新\u003C/h4>\n\u003Cp data-sourcepos=\"277:1-277:44\">\u003Ccode>src/main/resources/templates/blog.mustache\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"mustache\" data-sourcepos=\"278:1-312:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">blog.mustache\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">header\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\n\u003Cspan class=\"nt\">&lt;h1&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/h1&gt;\u003C/span>\n\n\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">header\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\n\u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"articles\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n\n  \u003Cspan class=\"k\">{{#\u003C/span>\u003Cspan class=\"nn\">banner\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n  \u003Cspan class=\"nt\">&lt;section&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;header\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"banner\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;h2\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"banner-title\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">banner\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/h2&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;/header&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"banner-content\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n      \u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">banner\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">content\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n    \u003Cspan class=\"nt\">&lt;/div&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;/section&gt;\u003C/span>\n  \u003Cspan class=\"k\">{{/\u003C/span>\u003Cspan class=\"nn\">banner\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\n  \u003Cspan class=\"k\">{{#\u003C/span>\u003Cspan class=\"nn\">articles\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n    \u003Cspan class=\"nt\">&lt;section&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;header\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-header\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n        \u003Cspan class=\"nt\">&lt;h2\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-title\"\u003C/span>\u003Cspan class=\"nt\">&gt;&lt;a\u003C/span> \u003Cspan class=\"na\">href=\u003C/span>\u003Cspan class=\"s\">\"/article/\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">slug\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"s\">\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/a&gt;&lt;/h2&gt;\u003C/span>\n        \u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-meta\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>By  \u003Cspan class=\"nt\">&lt;strong&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">author\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nv\">firstname\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/strong&gt;\u003C/span>, on \u003Cspan class=\"nt\">&lt;strong&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">addedAt\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/strong&gt;&lt;/div&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;/header&gt;\u003C/span>\n      \u003Cspan class=\"nt\">&lt;div\u003C/span> \u003Cspan class=\"na\">class=\u003C/span>\u003Cspan class=\"s\">\"article-description\"\u003C/span>\u003Cspan class=\"nt\">&gt;\u003C/span>\n        \u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">headline\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n      \u003Cspan class=\"nt\">&lt;/div&gt;\u003C/span>\n    \u003Cspan class=\"nt\">&lt;/section&gt;\u003C/span>\n  \u003Cspan class=\"k\">{{/\u003C/span>\u003Cspan class=\"nn\">articles\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003Cspan class=\"nt\">&lt;/div&gt;\u003C/span>\n\n\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">footer\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"313:1-313:35\">\n\u003Cspan id=\"コントローラーの更新\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E6%9B%B4%E6%96%B0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コントローラーの更新\u003C/h4>\n\u003Cp data-sourcepos=\"314:1-314:87\">クラスの引数にBlogPropertiesの追加、blog関数の処理を更新します。\u003C/p>\n\u003Cp data-sourcepos=\"316:1-316:52\">\u003Ccode>src/main/kotlin/com/example/blog/HtmlController.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"317:1-330:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">HtmlController.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nd\">@Controller\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">HtmlController\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">repository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">properties\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">BlogProperties\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@GetMapping\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"/\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">blog\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Model\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"title\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">properties\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">title\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"banner\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">properties\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">banner\u003C/span>\n        \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"articles\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">repository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findAllByOrderByAddedAtDesc\u003C/span>\u003Cspan class=\"p\">().\u003C/span>\u003Cspan class=\"nf\">map\u003C/span> \u003Cspan class=\"p\">{\u003C/span> \u003Cspan class=\"n\">it\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">render\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">}\u003C/span>\n        \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"s\">\"blog\"\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n  \u003Cspan class=\"err\">・・・\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"332:1-333:139\">アプリケーションをリフレッシュし直して再度\u003Ca href=\"http://localhost:8080/\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080\u003C/a>にアクセスします。\u003Ccode>application.yml\u003C/code>に記載した内容が反省されています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F118e2519-baef-8a48-a95b-4dc17a01b9cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=28db93e12d979cee293e2a73d27a9915\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F118e2519-baef-8a48-a95b-4dc17a01b9cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=28db93e12d979cee293e2a73d27a9915\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F118e2519-baef-8a48-a95b-4dc17a01b9cd.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7507b90fa3dea46a8c925f8da25d215b 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/118e2519-baef-8a48-a95b-4dc17a01b9cd.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"335:1-335:15\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h2>\n\u003Cp data-sourcepos=\"336:1-336:321\">時間かかってしまいましたが、kotlinでspring bootを使用したアプリケーションを構築できました。実際にはもっとエラーに遭遇していますが、たいてい起動する時のJavaのバージョン違いやチュートリアルの読み飛ばしだったように思います。\u003C/p>\n\u003Cp data-sourcepos=\"338:1-338:291\">個人的にはkotlinの利点として、\u003Ccode>null-safety\u003C/code>である点と\u003Ccode>JUnit\u003C/code>テストの関数名が文章で書けるという点でした。ただ\u003Ccode>null-safety\u003C/code>はまだまだイメージが掴めていないので、積極的に使いこなして理解していきたいところです。\u003C/p>\n","# 前提\n前回に引き続きチュートリアルを実施してみます。\n\nhttps://qiita.com/y5347M/items/203a2b2fc3532bf9699f\n\nコーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\n\nhttps://runebook.dev/ja/docs/kotlin/docs/reference/coding-conventions\n\n# 環境\n- macOS: 11.6.4\n- IntelliJ IDEA: 2021.2.3 (Community Edition)\n- Kotlin: 212-1.5.10-release-IJ5457.46\n- Gradle: 7.4.1\n- Java: temurin 17.0.3\n\n# 手順\n## ブログエンジンを実装\n#### \"blog\" Mustache テンプレートを更新\n`src/main/resources/templates/blog.mustache`\n```mustache:blog.mustache\n{{> header}}\n\n\u003Ch1>{{title}}\u003C/h1>\n\n\u003Cdiv class=\"articles\">\n\n  {{#articles}}\n    \u003Csection>\n      \u003Cheader class=\"article-header\">\n        \u003Ch2 class=\"article-title\">\u003Ca href=\"/article/{{slug}}\">{{title}}\u003C/a>\u003C/h2>\n        \u003Cdiv class=\"article-meta\">By  \u003Cstrong>{{author.firstname}}\u003C/strong>, on \u003Cstrong>{{addedAt}}\u003C/strong>\u003C/div>\n      \u003C/header>\n      \u003Cdiv class=\"article-description\">\n        {{headline}}\n      \u003C/div>\n    \u003C/section>\n  {{/articles}}\n\u003C/div>\n\n{{> footer}}\n```\n#### 新しい記事を作成\n`src/main/resources/templates/article.mustache`\n```mustache:article.mustache\n{{> header}}\n\n\u003Csection class=\"article\">\n  \u003Cheader class=\"article-header\">\n    \u003Ch1 class=\"article-title\">{{article.title}}\u003C/h1>\n    \u003Cp class=\"article-meta\">By  \u003Cstrong>{{article.author.firstname}}\u003C/strong>, on \u003Cstrong>{{article.addedAt}}\u003C/strong>\u003C/p>\n  \u003C/header>\n\n  \u003Cdiv class=\"article-description\">\n    {{article.headline}}\n\n    {{article.content}}\n  \u003C/div>\n\u003C/section>\n\n{{> footer}}\n```\n\n#### Controllerを更新\nこのコントローラーは単一のコンストラクター（暗黙的な`@Autowired`）があるので、`ArticleRepository`と`MarkdownConverter`のコンストラクターのパラメーターは自動的にAutrowiredされるそうです。\n（`MarkdownConverter`ってどこのことでしょう…）\n\n`src/main/kotlin/com/example/blog/HtmlController.kt`\n```kotlin:HtmlController.kt\npackage com.example.blog\n\nimport org.springframework.http.HttpStatus\nimport org.springframework.stereotype.Controller\nimport org.springframework.ui.Model\nimport org.springframework.ui.set\nimport org.springframework.web.bind.annotation.GetMapping\nimport org.springframework.web.bind.annotation.PathVariable\nimport org.springframework.web.server.ResponseStatusException\n\n@Controller\nclass HtmlController(private val repository: ArticleRepository) {\n\n    @GetMapping(\"/\")\n    fun blog(model: Model): String {\n        model[\"title\"] = \"Blog\"\n        model[\"articles\"] = repository.findAllByOrderByAddedAtDesc().map { it.render() }\n        return \"blog\"\n    }\n\n    @GetMapping(\"/article/{slug}\")\n    fun article(@PathVariable slug: String, model: Model): String {\n        val article = repository\n                .findBySlug(slug)\n                ?.render()\n                ?: throw ResponseStatusException(HttpStatus.NOT_FOUND, \"This article does not exist\")\n        model[\"title\"] = article.title\n        model[\"article\"] = article\n        return \"article\"\n    }\n\n    fun Article.render() = RenderedArticle(\n            slug,\n            title,\n            headline,\n            content,\n            author,\n            addedAt.format()\n    )\n\n    data class RenderedArticle(\n            val slug: String,\n            val title: String,\n            val headline: String,\n            val content: String,\n            val author: ArticleUser,\n            val addedAt: String)\n\n}\n```\n\n#### 初期データを登録\n`src/main/kotlin/com/example/blog/BlogConfiguration.kt`\n```kotlin:BlogConfiguration.kt\npackage com.example.blog\n\nimport org.springframework.boot.ApplicationRunner\nimport org.springframework.context.annotation.Bean\nimport org.springframework.context.annotation.Configuration\n\n@Configuration\nclass BlogConfiguration {\n\n    @Bean\n    fun databaseInitializer(articleUserRepository: ArticleUserRepository,\n                            articleRepository: ArticleRepository) = ApplicationRunner {\n\n        val smaldini = articleUserRepository.save(ArticleUser(\"smaldini\", \"Stéphane\", \"Maldini\"))\n        articleRepository.save(Article(\n                title = \"Reactor Bismuth is out\",\n                headline = \"Lorem ipsum\",\n                content = \"dolor sit amet\",\n                author = smaldini\n        ))\n        articleRepository.save(Article(\n                title = \"Reactor Aluminium has landed\",\n                headline = \"Lorem ipsum\",\n                content = \"dolor sit amet\",\n                author = smaldini\n        ))\n    }\n}\n```\n\n#### 統合テストの更新\n`src/test/kotlin/com/example/blog/IntegrationTests.kt`\n```\npackage com.example.blog\n\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.jupiter.api.AfterAll\nimport org.junit.jupiter.api.BeforeAll\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.boot.test.web.client.TestRestTemplate\nimport org.springframework.boot.test.web.client.getForEntity\nimport org.springframework.http.HttpStatus\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n    @BeforeAll\n    fun setup() {\n        println(\">> Setup\")\n    }\n\n    @Test\n    fun `Assert blog page title, content and status code`() {\n        println(\">> Assert blog page title, content and status code\")\n        val entity = restTemplate.getForEntity\u003CString>(\"/\")\n        assertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n        assertThat(entity.body).contains(\"\u003Ch1>Blog\u003C/h1>\", \"Reactor\")\n    }\n\n    @Test\n    fun `Assert article page title, content and status code`() {\n        println(\">> Assert article page title, content and status code\")\n        val title = \"Reactor Aluminium has landed\"\n        val entity = restTemplate.getForEntity\u003CString>(\"/article/${title.toSlug()}\")\n        assertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n        assertThat(entity.body).contains(title, \"Lorem ipsum\", \"dolor sit amet\")\n    }\n\n    @AfterAll\n    fun teardown() {\n        println(\">> Tear down\")\n    }\n\n}\n```\n\nアプリケーションを起動して、[http://localhost:8080](http://localhost:8080/)にアクセスします。初期化データが投入されています。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/d0ac4c91-b31c-8efb-d6ff-4eb26a5bbc3c.png\">\nリンクになっているところをクリックします。記事が参照できるようになっています。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/56fd3136-17f1-7cf8-6dab-07ab431bfdf9.png\">\n\n\n## 構成プロパティ\n引用：`Kotlin では、アプリケーションプロパティを管理するための推奨される方法は、@ConfigurationProperties を @ConstructorBinding と組み合わせて、読み取り専用プロパティを使用できるようにすること`\n\nだそうです。\n#### プロパティの用意\n`src/main/kotlin/com/example/blog/BlogProperties.kt`\n```kotlin:BlogProperties.kt\npackage com.example.blog\n\nimport org.springframework.boot.context.properties.ConfigurationProperties\nimport org.springframework.boot.context.properties.ConstructorBinding\n\n@ConstructorBinding\n@ConfigurationProperties(\"blog\")\ndata class BlogProperties(var title: String, val banner: Banner) {\n    data class Banner(val title: String? = null, val content: String)\n}\n```\n\n#### アプリケーションレベルでプロパティを有効にする\n`src/main/kotlin/com/example/blog/BlogApplication.kt`\n```kotlin:BlogApplication.kt\npackage com.example.blog\n\nimport org.springframework.boot.autoconfigure.SpringBootApplication\nimport org.springframework.boot.context.properties.EnableConfigurationProperties\nimport org.springframework.boot.runApplication\n\n@SpringBootApplication\n@EnableConfigurationProperties(BlogProperties::class)\nclass BlogApplication\n\nfun main(args: Array\u003CString>) {\n    runApplication\u003CBlogApplication>(*args)\n}\n```\n\n#### build.gradle.ktsの更新\nカスタムプロパティをIDEに認識させるために、`spring-boot-configuration-processor`依存関係でkapt を構成する必要があります。\n`build.gradle.kts`\n```build.gradle.kts\nplugins {\n  ...\n  kotlin(\"kapt\") version \"1.4.32\"\n}\n\ndependencies {\n  ...\n  kapt(\"org.springframework.boot:spring-boot-configuration-processor\")\n}\n```\n\n#### application.propertiesの更新\n```properties:application.properties\nblog.title=Blog\nblog.banner.title=Warning\nblog.banner.content=The blog will be down tomorrow.\n```\n\nせっかくなのでyml形式にしてみます。\n```yml:application.yml\nblog:\n  title: Blog\n  banner:\n    title: Warning\n    content: The blog will be down tomorrow.\n```\n\n#### テンプレートの更新\n`src/main/resources/templates/blog.mustache`\n```mustache:blog.mustache\n{{> header}}\n\n\u003Ch1>{{title}}\u003C/h1>\n\n{{> header}}\n\n\u003Cdiv class=\"articles\">\n\n  {{#banner.title}}\n  \u003Csection>\n    \u003Cheader class=\"banner\">\n      \u003Ch2 class=\"banner-title\">{{banner.title}}\u003C/h2>\n    \u003C/header>\n    \u003Cdiv class=\"banner-content\">\n      {{banner.content}}\n    \u003C/div>\n  \u003C/section>\n  {{/banner.title}}\n\n  {{#articles}}\n    \u003Csection>\n      \u003Cheader class=\"article-header\">\n        \u003Ch2 class=\"article-title\">\u003Ca href=\"/article/{{slug}}\">{{title}}\u003C/a>\u003C/h2>\n        \u003Cdiv class=\"article-meta\">By  \u003Cstrong>{{author.firstname}}\u003C/strong>, on \u003Cstrong>{{addedAt}}\u003C/strong>\u003C/div>\n      \u003C/header>\n      \u003Cdiv class=\"article-description\">\n        {{headline}}\n      \u003C/div>\n    \u003C/section>\n  {{/articles}}\n\u003C/div>\n\n{{> footer}}\n```\n#### コントローラーの更新\nクラスの引数にBlogPropertiesの追加、blog関数の処理を更新します。\n\n`src/main/kotlin/com/example/blog/HtmlController.kt`\n```kotlin:HtmlController.kt\n@Controller\nclass HtmlController(private val repository: ArticleRepository, private val properties: BlogProperties) {\n\n    @GetMapping(\"/\")\n    fun blog(model: Model): String {\n        model[\"title\"] = properties.title\n        model[\"banner\"] = properties.banner\n        model[\"articles\"] = repository.findAllByOrderByAddedAtDesc().map { it.render() }\n        return \"blog\"\n    }\n\n  ・・・\n```\n\nアプリケーションをリフレッシュし直して再度[http://localhost:8080](http://localhost:8080/)にアクセスします。`application.yml`に記載した内容が反省されています。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/118e2519-baef-8a48-a95b-4dc17a01b9cd.png\">\n\n## さいごに\n時間かかってしまいましたが、kotlinでspring bootを使用したアプリケーションを構築できました。実際にはもっとエラーに遭遇していますが、たいてい起動する時のJavaのバージョン違いやチュートリアルの読み飛ばしだったように思います。\n\n個人的にはkotlinの利点として、`null-safety`である点と`JUnit`テストの関数名が文章で書けるという点でした。ただ`null-safety`はまだまだイメージが掴めていないので、積極的に使いこなして理解していきたいところです。\n\n\n","2022-06-26T12:41:26+09:00","2218c3381118e015ecc5",[252,254],{"name":237,"versions":253},[],{"name":143,"versions":255},[],"KotlinでSpring BootのWebアプリケーションを作成してみる（３）","https://qiita.com/y5347M/items/2218c3381118e015ecc5",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1368,{"rendered_body":261,"body":262,"coediting":7,"comments_count":8,"created_at":263,"group":10,"id":264,"likes_count":8,"private":7,"reactions_count":8,"stocks_count":8,"tags":265,"title":270,"updated_at":263,"url":271,"user":272,"page_views_count":273,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-2:69\">前回に引き続きチュートリアルを実施してみます。\u003C/p>\n\u003Cp data-sourcepos=\"4:1-4:51\">\u003Ciframe id=\"qiita-embed-content__5d26316f0c25d1b802bf3dbd0d88884e\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5d26316f0c25d1b802bf3dbd0d88884e\" data-content=\"https%3A%2F%2Fqiita.com%2Fy5347M%2Fitems%2F17a3198a2eb553844634\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:141\">コーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\u003C/p>\n\u003Cp data-sourcepos=\"8:1-8:69\">\u003Ciframe id=\"qiita-embed-content__2ae527ac35e2fdf000e54d63095d4c85\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__2ae527ac35e2fdf000e54d63095d4c85\" data-content=\"https%3A%2F%2Frunebook.dev%2Fja%2Fdocs%2Fkotlin%2Fdocs%2Freference%2Fcoding-conventions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"10:1-10:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"11:1-16:0\">\n\u003Cli data-sourcepos=\"11:1-11:15\">macOS: 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:45\">IntelliJ IDEA: 2021.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"13:1-13:38\">Kotlin: 212-1.5.10-release-IJ5457.46\u003C/li>\n\u003Cli data-sourcepos=\"14:1-14:15\">Gradle: 7.4.1\u003C/li>\n\u003Cli data-sourcepos=\"15:1-16:0\">Java: temurin 17.0.3\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"17:1-17:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"18:1-18:39\">\n\u003Cspan id=\"独自の拡張機能を作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%8B%AC%E8%87%AA%E3%81%AE%E6%8B%A1%E5%BC%B5%E6%A9%9F%E8%83%BD%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>独自の拡張機能を作成する\u003C/h2>\n\u003Cp data-sourcepos=\"19:1-20:63\">以下のクラスを作成します。この関数は後ほど使うそうです。\u003Cbr>\n（これで良いのでしょうか、少し不安です。）\u003C/p>\n\u003Cp data-sourcepos=\"22:1-22:48\">\u003Ccode>src/main/kotlin/com/example/blog/Extensions.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"23:1-57:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Extensions.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.LocalDateTime\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.format.DateTimeFormatterBuilder\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.temporal.ChronoField\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.util.*\u003C/span>\n\n\u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">format\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">this\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">format\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">englishDateFormatter\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">daysLookup\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"mi\">1\u003C/span>\u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"mi\">31\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">associate\u003C/span> \u003Cspan class=\"p\">{\u003C/span> \u003Cspan class=\"n\">it\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toLong\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"n\">to\u003C/span> \u003Cspan class=\"nf\">getOrdinal\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">it\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">englishDateFormatter\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">DateTimeFormatterBuilder\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendPattern\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"yyyy-MM-dd\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendLiteral\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendText\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">ChronoField\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">DAY_OF_MONTH\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">daysLookup\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendLiteral\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">appendPattern\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"yyyy\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toFormatter\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">Locale\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">ENGLISH\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"k\">private\u003C/span> \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">getOrdinal\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">n\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Int\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">when\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"k\">in\u003C/span> \u003Cspan class=\"mi\">11\u003C/span>\u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"mi\">13\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}th\"\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"p\">%\u003C/span> \u003Cspan class=\"mi\">10\u003C/span> \u003Cspan class=\"p\">==\u003C/span> \u003Cspan class=\"mi\">1\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}st\"\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"p\">%\u003C/span> \u003Cspan class=\"mi\">10\u003C/span> \u003Cspan class=\"p\">==\u003C/span> \u003Cspan class=\"mi\">2\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}nd\"\u003C/span>\n    \u003Cspan class=\"n\">n\u003C/span> \u003Cspan class=\"p\">%\u003C/span> \u003Cspan class=\"mi\">10\u003C/span> \u003Cspan class=\"p\">==\u003C/span> \u003Cspan class=\"mi\">3\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}rd\"\u003C/span>\n    \u003Cspan class=\"k\">else\u003C/span> \u003Cspan class=\"p\">-&gt;\u003C/span> \u003Cspan class=\"s\">\"${n}th\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toSlug\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nf\">toLowerCase\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">replace\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"\\n\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">replace\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"[^a-z\\\\d\\\\s]\"\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toRegex\u003C/span>\u003Cspan class=\"p\">(),\u003C/span> \u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">split\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\" \"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">joinToString\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"-\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">replace\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"-+\"\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toRegex\u003C/span>\u003Cspan class=\"p\">(),\u003C/span> \u003Cspan class=\"s\">\"-\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch2 data-sourcepos=\"59:1-59:31\">\n\u003Cspan id=\"jpa-を使用した永続性\" class=\"fragment\">\u003C/span>\u003Ca href=\"#jpa-%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E6%B0%B8%E7%B6%9A%E6%80%A7\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>JPA を使用した永続性\u003C/h2>\n\u003Ch4 data-sourcepos=\"60:1-60:33\">\n\u003Cspan id=\"entityをopenに設定する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#entity%E3%82%92open%E3%81%AB%E8%A8%AD%E5%AE%9A%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Entityをopenに設定する\u003C/h4>\n\u003Cp data-sourcepos=\"61:1-61:100\">遅延フェッチを有効にするにはEntityをopenに設定する必要があるそうです。\u003C/p>\n\u003Cp data-sourcepos=\"63:1-64:41\">\u003Ccode>build.gradle.kts\u003C/code>を編集します。\u003Cbr>\nまずはpluginsに1行追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"65:1-70:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">plugins\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"o\">..\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\n  \u003Cspan class=\"nf\">kotlin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"plugin.allopen\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"n\">version\u003C/span> \u003Cspan class=\"s\">\"1.4.32\"\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"71:1-71:37\">さらにallopenを記述します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"72:1-78:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">build.gradle.kts\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nf\">allOpen\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n  \u003Cspan class=\"k\">annotation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"javax.persistence.Entity\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n  \u003Cspan class=\"k\">annotation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"javax.persistence.Embeddable\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n  \u003Cspan class=\"k\">annotation\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"javax.persistence.MappedSuperclass\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"80:1-80:20\">\n\u003Cspan id=\"モデル作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%A2%E3%83%87%E3%83%AB%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>モデル作成\u003C/h4>\n\u003Cp data-sourcepos=\"81:1-83:117\">Entityを作成します。\u003Cbr>\nデフォルト値を持つフィールド変数はコンストラクタの後ろに定義します。コンストラクタを使用して定義する際、引数を省略できます。\u003Cbr>\nKotlinでは同じファイル内で簡潔なクラス宣言をグループ化することは普通なようです。\u003C/p>\n\u003Cp data-sourcepos=\"85:1-85:46\">\u003Ccode>src/main/kotlin/com/example/blog/Entities.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"86:1-111:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Entities.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">com.example.blog.toSlug\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">java.time.LocalDateTime\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.Entity\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.GeneratedValue\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.Id\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">javax.persistence.ManyToOne\u003C/span>\n\n\u003Cspan class=\"nd\">@Entity\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">title\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">headline\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">content\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nd\">@ManyToOne\u003C/span> \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">author\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">slug\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">title\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">toSlug\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">addedAt\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">LocalDateTime\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">now\u003C/span>\u003Cspan class=\"p\">(),\u003C/span>\n        \u003Cspan class=\"nd\">@Id\u003C/span> \u003Cspan class=\"nd\">@GeneratedValue\u003C/span> \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">id\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\n\u003Cspan class=\"nd\">@Entity\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">login\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">firstname\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">lastname\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">description\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"nd\">@Id\u003C/span> \u003Cspan class=\"nd\">@GeneratedValue\u003C/span> \u003Cspan class=\"kd\">var\u003C/span> \u003Cspan class=\"py\">id\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">?\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"k\">null\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"113:1-113:26\">\n\u003Cspan id=\"リポジトリ作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%AA%E3%83%9D%E3%82%B8%E3%83%88%E3%83%AA%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>リポジトリ作成\u003C/h4>\n\u003Cp data-sourcepos=\"114:1-114:79\">こちらも同じファイル内に2つのinterfaceを宣言しています。\u003C/p>\n\u003Cp data-sourcepos=\"116:1-116:50\">\u003Ccode>src/main/kotlin/com/example/blog/Repositories.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"117:1-130:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">Repositories.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.data.repository.CrudRepository\u003C/span>\n\n\u003Cspan class=\"kd\">interface\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span> \u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">CrudRepository\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">findBySlug\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">slug\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">?\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">findAllByOrderByAddedAtDesc\u003C/span>\u003Cspan class=\"p\">():\u003C/span> \u003Cspan class=\"nc\">Iterable\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"kd\">interface\u003C/span> \u003Cspan class=\"nc\">UserRepository\u003C/span> \u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">CrudRepository\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"nc\">Long\u003C/span>\u003Cspan class=\"p\">&gt;\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">findByLogin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">login\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">?\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"132:1-132:29\">\n\u003Cspan id=\"jpaのテストを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#jpa%E3%81%AE%E3%83%86%E3%82%B9%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>JPAのテストを作成\u003C/h4>\n\u003Cp data-sourcepos=\"133:1-134:55\">リポジトリが期待通り動作するかテストを作成します。\u003Cbr>\n\u003Ccode>src/test/kotlin/com/example/blog/RepositoriesTests.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"135:1-175:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">RepositoriesTests.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">Article\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">ArticleRepository\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">User\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">UserRepository\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.assertj.core.api.Assertions.assertThat\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.beans.factory.annotation.Autowired\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.data.repository.findByIdOrNull\u003C/span>\n\n\u003Cspan class=\"nd\">@DataJpaTest\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">RepositoriesTests\u003C/span> \u003Cspan class=\"nd\">@Autowired\u003C/span> \u003Cspan class=\"k\">constructor\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">entityManager\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">TestEntityManager\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">userRepository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">UserRepository\u003C/span>\u003Cspan class=\"p\">,\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">articleRepository\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">ArticleRepository\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`When\u003C/span> \u003Cspan class=\"n\">findByIdOrNull\u003C/span> \u003Cspan class=\"n\">then\u003C/span> \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">Article`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">juergen\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"springjuergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Juergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Hoeller\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">persist\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">article\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">Article\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"Spring Framework 5.0 goes GA\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Dear Spring community ...\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Lorem ipsum\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">persist\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">flush\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">found\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">articleRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findByIdOrNull\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">id\u003C/span>\u003Cspan class=\"o\">!!\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">found\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">isEqualTo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">article\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`When\u003C/span> \u003Cspan class=\"n\">findByLogin\u003C/span> \u003Cspan class=\"n\">then\u003C/span> \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"nc\">User`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">juergen\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">User\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"springjuergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Juergen\"\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"s\">\"Hoeller\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">persist\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"n\">entityManager\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">flush\u003C/span>\u003Cspan class=\"p\">()\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">user\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">userRepository\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nf\">findByLogin\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">login\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">user\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">isEqualTo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">juergen\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"177:1-177:48\">またしてもエラーが発生しました。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"178:1-184:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>2022-06-19 11:44:12.495  WARN 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 42001, SQLState: 42001\n2022-06-19 11:44:12.495 ERROR 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQLステートメントに文法エラーがあります \n\"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; 期待されるステートメント \"identifier\"\nSyntax error in SQL statement \"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; expected \"identifier\"; SQL statement:\n\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"186:1-187:57\">どうやら\u003Ccode>USER\u003C/code>というワードはH2の予約語だそうなので、\u003Ccode>USER\u003C/code>を\u003Ccode>ARTICLE_USER\u003C/code>に変更してみます。\u003Cbr>\n結果、問題なくテストを実行できました。\u003C/p>\n\u003Cp data-sourcepos=\"189:1-189:52\">\u003Ciframe id=\"qiita-embed-content__1e4907c2e46f91f98cdf089871f7b103\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__1e4907c2e46f91f98cdf089871f7b103\" data-content=\"https%3A%2F%2Fgithub.com%2Fh2database%2Fh2database%2Fissues%2F3363\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch2 data-sourcepos=\"191:1-191:15\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h2>\n\u003Cp data-sourcepos=\"192:1-193:42\">長くなったのでこちらで一旦切ります。\u003Cbr>\n今回はJPA周りを実装しました。\u003C/p>\n","# 前提\n前回に引き続きチュートリアルを実施してみます。\n\nhttps://qiita.com/y5347M/items/17a3198a2eb553844634\n\nコーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\n\nhttps://runebook.dev/ja/docs/kotlin/docs/reference/coding-conventions\n\n# 環境\n- macOS: 11.6.4\n- IntelliJ IDEA: 2021.2.3 (Community Edition)\n- Kotlin: 212-1.5.10-release-IJ5457.46\n- Gradle: 7.4.1\n- Java: temurin 17.0.3\n\n# 手順\n## 独自の拡張機能を作成する\n以下のクラスを作成します。この関数は後ほど使うそうです。\n（これで良いのでしょうか、少し不安です。）\n\n`src/main/kotlin/com/example/blog/Extensions.kt`\n```kotlin:Extensions.kt\npackage com.example.blog\n\nimport java.time.LocalDateTime\nimport java.time.format.DateTimeFormatterBuilder\nimport java.time.temporal.ChronoField\nimport java.util.*\n\nfun LocalDateTime.format() = this.format(englishDateFormatter)\n\nprivate val daysLookup = (1..31).associate { it.toLong() to getOrdinal(it) }\n\nprivate val englishDateFormatter = DateTimeFormatterBuilder()\n        .appendPattern(\"yyyy-MM-dd\")\n        .appendLiteral(\" \")\n        .appendText(ChronoField.DAY_OF_MONTH, daysLookup)\n        .appendLiteral(\" \")\n        .appendPattern(\"yyyy\")\n        .toFormatter(Locale.ENGLISH)\n\nprivate fun getOrdinal(n: Int) = when {\n    n in 11..13 -> \"${n}th\"\n    n % 10 == 1 -> \"${n}st\"\n    n % 10 == 2 -> \"${n}nd\"\n    n % 10 == 3 -> \"${n}rd\"\n    else -> \"${n}th\"\n}\n\nfun String.toSlug() = toLowerCase()\n        .replace(\"\\n\", \" \")\n        .replace(\"[^a-z\\\\d\\\\s]\".toRegex(), \" \")\n        .split(\" \")\n        .joinToString(\"-\")\n        .replace(\"-+\".toRegex(), \"-\")\n```\n\n## JPA を使用した永続性\n#### Entityをopenに設定する\n遅延フェッチを有効にするにはEntityをopenに設定する必要があるそうです。\n\n`build.gradle.kts`を編集します。\nまずはpluginsに1行追加します。\n```build.gradle.kts\nplugins {\n  ...\n  kotlin(\"plugin.allopen\") version \"1.4.32\"\n}\n```\nさらにallopenを記述します。\n```build.gradle.kts\nallOpen {\n  annotation(\"javax.persistence.Entity\")\n  annotation(\"javax.persistence.Embeddable\")\n  annotation(\"javax.persistence.MappedSuperclass\")\n}\n```\n\n#### モデル作成\nEntityを作成します。\nデフォルト値を持つフィールド変数はコンストラクタの後ろに定義します。コンストラクタを使用して定義する際、引数を省略できます。\nKotlinでは同じファイル内で簡潔なクラス宣言をグループ化することは普通なようです。\n\n`src/main/kotlin/com/example/blog/Entities.kt`\n```kotlin:Entities.kt\nimport com.example.blog.toSlug\nimport java.time.LocalDateTime\nimport javax.persistence.Entity\nimport javax.persistence.GeneratedValue\nimport javax.persistence.Id\nimport javax.persistence.ManyToOne\n\n@Entity\nclass Article(\n        var title: String,\n        var headline: String,\n        var content: String,\n        @ManyToOne var author: User,\n        var slug: String = title.toSlug(),\n        var addedAt: LocalDateTime = LocalDateTime.now(),\n        @Id @GeneratedValue var id: Long? = null)\n\n@Entity\nclass User(\n        var login: String,\n        var firstname: String,\n        var lastname: String,\n        var description: String? = null,\n        @Id @GeneratedValue var id: Long? = null)\n```\n\n#### リポジトリ作成\nこちらも同じファイル内に2つのinterfaceを宣言しています。\n\n`src/main/kotlin/com/example/blog/Repositories.kt`\n```kotlin:Repositories.kt\npackage com.example.blog\n\nimport org.springframework.data.repository.CrudRepository\n\ninterface ArticleRepository : CrudRepository\u003CArticle, Long> {\n    fun findBySlug(slug: String): Article?\n    fun findAllByOrderByAddedAtDesc(): Iterable\u003CArticle>\n}\n\ninterface UserRepository : CrudRepository\u003CUser, Long> {\n    fun findByLogin(login: String): User?\n}\n```\n\n#### JPAのテストを作成\nリポジトリが期待通り動作するかテストを作成します。\n`src/test/kotlin/com/example/blog/RepositoriesTests.kt`\n```kotlin:RepositoriesTests.kt\npackage com.example.blog\n\nimport Article\nimport ArticleRepository\nimport User\nimport UserRepository\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest\nimport org.springframework.boot.test.autoconfigure.orm.jpa.TestEntityManager\nimport org.springframework.data.repository.findByIdOrNull\n\n@DataJpaTest\nclass RepositoriesTests @Autowired constructor(\n        val entityManager: TestEntityManager,\n        val userRepository: UserRepository,\n        val articleRepository: ArticleRepository) {\n\n    @Test\n    fun `When findByIdOrNull then return Article`() {\n        val juergen = User(\"springjuergen\", \"Juergen\", \"Hoeller\")\n        entityManager.persist(juergen)\n        val article = Article(\"Spring Framework 5.0 goes GA\", \"Dear Spring community ...\", \"Lorem ipsum\", juergen)\n        entityManager.persist(article)\n        entityManager.flush()\n        val found = articleRepository.findByIdOrNull(article.id!!)\n        assertThat(found).isEqualTo(article)\n    }\n\n    @Test\n    fun `When findByLogin then return User`() {\n        val juergen = User(\"springjuergen\", \"Juergen\", \"Hoeller\")\n        entityManager.persist(juergen)\n        entityManager.flush()\n        val user = userRepository.findByLogin(juergen.login)\n        assertThat(user).isEqualTo(juergen)\n    }\n}\n```\n\nまたしてもエラーが発生しました。\n```\n2022-06-19 11:44:12.495  WARN 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQL Error: 42001, SQLState: 42001\n2022-06-19 11:44:12.495 ERROR 37201 --- [    Test worker] o.h.engine.jdbc.spi.SqlExceptionHelper   : SQLステートメントに文法エラーがあります \n\"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; 期待されるステートメント \"identifier\"\nSyntax error in SQL statement \"insert into [*]user (description, firstname, lastname, login, id) values (?, ?, ?, ?, ?)\"; expected \"identifier\"; SQL statement:\n\n```\n\nどうやら`USER`というワードはH2の予約語だそうなので、`USER`を`ARTICLE_USER`に変更してみます。\n結果、問題なくテストを実行できました。\n\nhttps://github.com/h2database/h2database/issues/3363\n\n## さいごに\n長くなったのでこちらで一旦切ります。\n今回はJPA周りを実装しました。\n\n","2022-06-19T12:27:05+09:00","203a2b2fc3532bf9699f",[266,268],{"name":237,"versions":267},[],{"name":143,"versions":269},[],"KotlinでSpring BootのWebアプリケーションを作成してみる（２）","https://qiita.com/y5347M/items/203a2b2fc3532bf9699f",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1648,{"rendered_body":275,"body":276,"coediting":7,"comments_count":8,"created_at":277,"group":10,"id":278,"likes_count":8,"private":7,"reactions_count":8,"stocks_count":12,"tags":279,"title":284,"updated_at":285,"url":286,"user":287,"page_views_count":288,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-4:150\">仕事ではずっとJavaで、たまにJavaScriptやPythonを使用してきました。\u003Cbr>\n「Kotlinはいいぞ(？)」という話をよく聞くので、チュートリアルをやってみます。\u003Cbr>\nJavaのSpring Bootをよく利用しているので、理解しやすいと思い、Kotlinでも同じフレームワークを使用してみます。\u003C/p>\n\u003Cp data-sourcepos=\"6:1-6:84\">チュートリアルは以下のサイトにあるものを実施してみます。\u003C/p>\n\u003Cp data-sourcepos=\"8:1-8:63\">\u003Ciframe id=\"qiita-embed-content__ce72e6a4829a52e213d088a9261050d8\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__ce72e6a4829a52e213d088a9261050d8\" data-content=\"https%3A%2F%2Fspring.pleiades.io%2Fguides%2Ftutorials%2Fspring-boot-kotlin%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"10:1-10:141\">コーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\u003C/p>\n\u003Cp data-sourcepos=\"12:1-12:69\">\u003Ciframe id=\"qiita-embed-content__9a879e6ea1e70a807b584d15a08ed51a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__9a879e6ea1e70a807b584d15a08ed51a\" data-content=\"https%3A%2F%2Frunebook.dev%2Fja%2Fdocs%2Fkotlin%2Fdocs%2Freference%2Fcoding-conventions\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"14:1-14:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"15:1-20:0\">\n\u003Cli data-sourcepos=\"15:1-15:15\">macOS: 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"16:1-16:45\">IntelliJ IDEA: 2021.2.3 (Community Edition)\u003C/li>\n\u003Cli data-sourcepos=\"17:1-17:38\">Kotlin: 212-1.5.10-release-IJ5457.46\u003C/li>\n\u003Cli data-sourcepos=\"18:1-18:15\">Gradle: 7.4.1\u003C/li>\n\u003Cli data-sourcepos=\"19:1-20:0\">Java: temurin 17.0.3\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"21:1-21:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch2 data-sourcepos=\"22:1-22:45\">\n\u003Cspan id=\"新しいプロジェクトを作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%96%B0%E3%81%97%E3%81%84%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>新しいプロジェクトを作成する\u003C/h2>\n\u003Cp data-sourcepos=\"23:1-23:299\">「Initializr Web サイトを利用する方法」「コマンドラインを使用する方法」「IntelliJ IDEA の使用」が紹介されています。今回は一番最初を使用します。一番最後はIntelliのUltimateエディションを利用することが条件のようです。\u003C/p>\n\u003Ch4 data-sourcepos=\"25:1-25:38\">\n\u003Cspan id=\"spring-initializerにアクセス\" class=\"fragment\">\u003C/span>\u003Ca href=\"#spring-initializer%E3%81%AB%E3%82%A2%E3%82%AF%E3%82%BB%E3%82%B9\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>spring initializerにアクセス\u003C/h4>\n\u003Cp data-sourcepos=\"26:1-26:24\">\u003Ciframe id=\"qiita-embed-content__32f9ffb788696595003ac198fd6dc26a\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__32f9ffb788696595003ac198fd6dc26a\" data-content=\"https%3A%2F%2Fstart.spring.io%2F\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch4 data-sourcepos=\"28:1-28:38\">\n\u003Cspan id=\"以下のパラメータを設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E4%BB%A5%E4%B8%8B%E3%81%AE%E3%83%91%E3%83%A9%E3%83%A1%E3%83%BC%E3%82%BF%E3%82%92%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>以下のパラメータを設定\u003C/h4>\n\u003Cul data-sourcepos=\"29:1-43:28\">\n\u003Cli data-sourcepos=\"29:1-29:27\">Project: \u003Ccode>Gradle Project\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"30:1-30:20\">Language: \u003Ccode>Kotlin\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"31:1-31:22\">Spring Boot: \u003Ccode>2.7.0\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"32:1-37:16\">Project Metadata\n\u003Cul data-sourcepos=\"33:5-37:16\">\n\u003Cli data-sourcepos=\"33:5-33:26\">Group: \u003Ccode>com.example\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"34:5-34:27\">Artifact/Name: \u003Ccode>blog\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"35:5-35:38\">Package name: \u003Ccode>com.example.blog\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"36:5-36:22\">Packaging: \u003Ccode>Jar\u003C/code>\n\u003C/li>\n\u003Cli data-sourcepos=\"37:5-37:16\">Java: \u003Ccode>17\u003C/code>\n\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003Cli data-sourcepos=\"38:1-43:28\">Dependencies:\n\u003Cul data-sourcepos=\"39:5-43:28\">\n\u003Cli data-sourcepos=\"39:5-39:18\">\u003Ccode>Spring Web\u003C/code>\u003C/li>\n\u003Cli data-sourcepos=\"40:5-40:16\">\u003Ccode>Mustache\u003C/code>\u003C/li>\n\u003Cli data-sourcepos=\"41:5-41:23\">\u003Ccode>Spring Data JPA\u003C/code>\u003C/li>\n\u003Cli data-sourcepos=\"42:5-42:19\">\u003Ccode>H2 Database\u003C/code>\u003C/li>\n\u003Cli data-sourcepos=\"43:5-43:28\">\u003Ccode>Spring Boot DevTools\u003C/code>\u003C/li>\n\u003C/ul>\n\u003C/li>\n\u003C/ul>\n\u003Ch4 data-sourcepos=\"44:1-44:45\">\n\u003Cspan id=\"生成ボタンgenerateをクリック\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%94%9F%E6%88%90%E3%83%9C%E3%82%BF%E3%83%B3generate%E3%82%92%E3%82%AF%E3%83%AA%E3%83%83%E3%82%AF\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>生成ボタン(Generate)をクリック\u003C/h4>\n\u003Cp data-sourcepos=\"45:1-46:139\">blog.zipがダウンロードされます。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15d748d3-047a-50c7-98e2-a2a363479586.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=02cef631df876db05445d11862cf1b77\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15d748d3-047a-50c7-98e2-a2a363479586.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=02cef631df876db05445d11862cf1b77\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F15d748d3-047a-50c7-98e2-a2a363479586.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5117ed5bca8e6013d37a45d39aa145e8 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/15d748d3-047a-50c7-98e2-a2a363479586.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"48:1-48:62\">\n\u003Cspan id=\"ダウンロードしたプロジェクトを展開する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%80%E3%82%A6%E3%83%B3%E3%83%AD%E3%83%BC%E3%83%89%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92%E5%B1%95%E9%96%8B%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ダウンロードしたプロジェクトを展開する\u003C/h4>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"49:1-81:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>kotlin % unzip blog.zip \nArchive:  blog.zip\n   creating: blog/\n  inflating: blog/gradlew            \n   creating: blog/src/\n   creating: blog/src/test/\n   creating: blog/src/test/kotlin/\n   creating: blog/src/test/kotlin/com/\n   creating: blog/src/test/kotlin/com/example/\n   creating: blog/src/test/kotlin/com/example/blog/\n  inflating: blog/src/test/kotlin/com/example/blog/BlogApplicationTests.kt  \n   creating: blog/src/main/\n   creating: blog/src/main/kotlin/\n   creating: blog/src/main/kotlin/com/\n   creating: blog/src/main/kotlin/com/example/\n   creating: blog/src/main/kotlin/com/example/blog/\n  inflating: blog/src/main/kotlin/com/example/blog/BlogApplication.kt  \n   creating: blog/src/main/resources/\n   creating: blog/src/main/resources/templates/\n   creating: blog/src/main/resources/static/\n  inflating: blog/src/main/resources/application.properties  \n  inflating: blog/build.gradle.kts   \n   creating: blog/gradle/\n   creating: blog/gradle/wrapper/\n  inflating: blog/gradle/wrapper/gradle-wrapper.jar  \n  inflating: blog/gradle/wrapper/gradle-wrapper.properties  \n  inflating: blog/HELP.md            \n  inflating: blog/.gitignore         \n  inflating: blog/settings.gradle.kts  \n  inflating: blog/gradlew.bat        \nkotlin %\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch4 data-sourcepos=\"83:1-83:55\">\n\u003Cspan id=\"展開したプロジェクトをintellijで開く\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%B1%95%E9%96%8B%E3%81%97%E3%81%9F%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E3%82%92intellij%E3%81%A7%E9%96%8B%E3%81%8F\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>展開したプロジェクトをIntelliJで開く\u003C/h4>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9da2ce91-6ee2-28d9-6b5d-3a9ffd75e057.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e37222b4543f5722380576c7ad350fbe\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9da2ce91-6ee2-28d9-6b5d-3a9ffd75e057.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e37222b4543f5722380576c7ad350fbe\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F9da2ce91-6ee2-28d9-6b5d-3a9ffd75e057.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=4d495332e21398f5c022cbb75cf804f9 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/9da2ce91-6ee2-28d9-6b5d-3a9ffd75e057.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"86:1-86:33\">\n\u003Cspan id=\"コントローラーの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%B3%E3%83%88%E3%83%AD%E3%83%BC%E3%83%A9%E3%83%BC%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コントローラーの作成\u003C/h2>\n\u003Cp data-sourcepos=\"87:1-87:52\">\u003Ccode>src/main/kotlin/com/example/blog/HtmlController.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"88:1-106:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">HtmlController.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.stereotype.Controller\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.ui.Model\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.ui.set\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.web.bind.annotation.GetMapping\u003C/span>\n\n\u003Cspan class=\"nd\">@Controller\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">HtmlController\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n  \u003Cspan class=\"nd\">@GetMapping\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"/\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n  \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">blog\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">Model\u003C/span>\u003Cspan class=\"p\">):\u003C/span> \u003Cspan class=\"nc\">String\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n    \u003Cspan class=\"n\">model\u003C/span>\u003Cspan class=\"p\">[\u003C/span>\u003Cspan class=\"s\">\"title\"\u003C/span>\u003Cspan class=\"p\">]\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">\"Blog\"\u003C/span>\n    \u003Cspan class=\"k\">return\u003C/span> \u003Cspan class=\"s\">\"blog\"\u003C/span>\n  \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F133448fe-d0cb-03d2-a35b-be261411703e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0be9a807e3dd348f6f43085e6cc0a85b\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F133448fe-d0cb-03d2-a35b-be261411703e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=0be9a807e3dd348f6f43085e6cc0a85b\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F133448fe-d0cb-03d2-a35b-be261411703e.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=2b74016b547401be90c6bda9e1d2f5ec 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/133448fe-d0cb-03d2-a35b-be261411703e.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"109:1-109:38\">\n\u003Cspan id=\"mustacheテンプレートを作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#mustache%E3%83%86%E3%83%B3%E3%83%97%E3%83%AC%E3%83%BC%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>Mustacheテンプレートを作成\u003C/h2>\n\u003Cp data-sourcepos=\"110:1-110:46\">\u003Ccode>src/main/resources/templates/header.mustache\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"mustache\" data-sourcepos=\"111:1-117:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">header.mustache\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nt\">&lt;html&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;head&gt;\u003C/span>\n  \u003Cspan class=\"nt\">&lt;title&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/title&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;/head&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;body&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"118:1-118:46\">\u003Ccode>src/main/resources/templates/footer.mustache\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"mustache\" data-sourcepos=\"119:1-122:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">footer.mustache\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"nt\">&lt;/body&gt;\u003C/span>\n\u003Cspan class=\"nt\">&lt;/html&gt;\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"123:1-123:44\">\u003Ccode>src/main/resources/templates/blog.mustache\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"mustache\" data-sourcepos=\"124:1-128:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">blog.mustache\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">header\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003Cspan class=\"nt\">&lt;h1&gt;\u003C/span>\u003Cspan class=\"k\">{{\u003C/span>\u003Cspan class=\"nv\">title\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\u003Cspan class=\"nt\">&lt;/h1&gt;\u003C/span>\n\u003Cspan class=\"k\">{{&gt;\u003C/span> \u003Cspan class=\"nv\">footer\u003C/span>\u003Cspan class=\"k\">}}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F37708048-59fd-8a7c-4836-b3744b3a20e3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9aac5bba5badcee5265530ae301c4270\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F37708048-59fd-8a7c-4836-b3744b3a20e3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=9aac5bba5badcee5265530ae301c4270\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F37708048-59fd-8a7c-4836-b3744b3a20e3.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=705046dbe719f5e5c9ca0349c8eab0bc 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/37708048-59fd-8a7c-4836-b3744b3a20e3.png\" loading=\"lazy\">\u003C/a>\n\u003Ch2 data-sourcepos=\"131:1-131:36\">\n\u003Cspan id=\"アプリケーションの起動\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%81%AE%E8%B5%B7%E5%8B%95\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アプリケーションの起動\u003C/h2>\n\u003Ch4 data-sourcepos=\"132:1-132:72\">\n\u003Cspan id=\"blogapplicationktを選択してrun-blogapplicationktを実行\" class=\"fragment\">\u003C/span>\u003Ca href=\"#blogapplicationkt%E3%82%92%E9%81%B8%E6%8A%9E%E3%81%97%E3%81%A6run-blogapplicationkt%E3%82%92%E5%AE%9F%E8%A1%8C\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>\u003Ccode>BlogApplication.kt\u003C/code>を選択して\u003Ccode>Run BlogApplicationKt\u003C/code>を実行\u003C/h4>\n\u003Cp data-sourcepos=\"133:1-133:36\">しかしここでエラーが…。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"134:1-136:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>java.lang.UnsupportedClassVersionError: com/example/blog/BlogApplicationKt has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 60.0\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"137:1-137:176\">「このversionのJava Runtimeは60.0versionのclass fileしか認識できないけど、\u003Ccode>com/example/blog/BlogApplicationKt\u003C/code>は61.0だ」と怒られているようです。\u003C/p>\n\u003Cp data-sourcepos=\"139:1-140:139\">私のIntelliJ IDEAのJREがDefaultでJava16だったので、17に変更したら問題なく起動できました。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3565c46b-5eb6-59f9-3d4f-abdf82fb8054.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e07e600c6ee99d8ac462ea22afac907c\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3565c46b-5eb6-59f9-3d4f-abdf82fb8054.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=e07e600c6ee99d8ac462ea22afac907c\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F3565c46b-5eb6-59f9-3d4f-abdf82fb8054.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=da20ff67f31b33b6748eb9ed9d595251 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3565c46b-5eb6-59f9-3d4f-abdf82fb8054.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"142:1-144:139\">\u003Ca href=\"http://localhost:8080/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">http://localhost:8080/\u003C/a>\u003Cbr>\nにアクセスすると、Blogと表示されています。\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F4f26386a-1127-4b9f-6a70-9cdc4ab8fad8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ba26b92ce555f12a9646baed8040dd23\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F4f26386a-1127-4b9f-6a70-9cdc4ab8fad8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ba26b92ce555f12a9646baed8040dd23\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F4f26386a-1127-4b9f-6a70-9cdc4ab8fad8.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=93b5c57d9ef974777c12ac5a489bb255 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/4f26386a-1127-4b9f-6a70-9cdc4ab8fad8.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch2 data-sourcepos=\"146:1-146:33\">\n\u003Cspan id=\"junit5を使用したテスト\" class=\"fragment\">\u003C/span>\u003Ca href=\"#junit5%E3%82%92%E4%BD%BF%E7%94%A8%E3%81%97%E3%81%9F%E3%83%86%E3%82%B9%E3%83%88\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>JUnit5を使用したテスト\u003C/h2>\n\u003Ch4 data-sourcepos=\"147:1-147:23\">\n\u003Cspan id=\"テストの作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%81%AE%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テストの作成\u003C/h4>\n\u003Cp data-sourcepos=\"148:1-150:54\">テスト関数名が文章になっているのはポイント高いですね。\u003Cbr>\n実際にテスト結果も問題ありません。\u003Cbr>\n\u003Ccode>src/test/kotlin/com/example/blog/IntegrationTests.kt\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"151:1-173:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">IntegrationTests.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.assertj.core.api.Assertions.assertThat\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.beans.factory.annotation.Autowired\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.context.SpringBootTest\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.web.client.TestRestTemplate\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.web.client.getForEntity\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.http.HttpStatus\u003C/span>\n\n\u003Cspan class=\"nd\">@SpringBootTest\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">webEnvironment\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">SpringBootTest\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">WebEnvironment\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">RANDOM_PORT\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">IntegrationTests\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nd\">@Autowired\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">restTemplate\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">TestRestTemplate\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Assert\u003C/span> \u003Cspan class=\"n\">blog\u003C/span> \u003Cspan class=\"n\">page\u003C/span> \u003Cspan class=\"n\">title\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">content\u003C/span> \u003Cspan class=\"n\">and\u003C/span> \u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"nf\">code`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">entity\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">restTemplate\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">getForEntity\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"s\">\"/\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">entity\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">statusCode\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">isEqualTo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">HttpStatus\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">OK\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">entity\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">body\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">contains\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"&lt;h1&gt;Blog&lt;/h1&gt;\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Ch4 data-sourcepos=\"175:1-175:83\">\n\u003Cspan id=\"テストクラスごとにテスト開始前後で関数を実行する場合\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%94%E3%81%A8%E3%81%AB%E3%83%86%E3%82%B9%E3%83%88%E9%96%8B%E5%A7%8B%E5%89%8D%E5%BE%8C%E3%81%A7%E9%96%A2%E6%95%B0%E3%82%92%E5%AE%9F%E8%A1%8C%E3%81%99%E3%82%8B%E5%A0%B4%E5%90%88\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テストクラスごとにテスト開始前後で関数を実行する場合\u003C/h4>\n\u003Cp data-sourcepos=\"176:1-177:46\">プロパティファイルを設定します。\u003Cbr>\n\u003Ccode>src/test/resources/junit-platform.properties\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"properties\" data-sourcepos=\"178:1-180:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">junit-platform.properties\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"py\">junit.jupiter.testinstance.lifecycle.default\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"s\">per_class\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"182:1-182:83\">テストクラスで\u003Ccode>@BeforeAll\u003C/code>、\u003Ccode>@AfterAll\u003C/code>が使えるようになります。\u003C/p>\n\u003Ch4 data-sourcepos=\"184:1-184:38\">\n\u003Cspan id=\"テストクラスに関数追加\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%86%E3%82%B9%E3%83%88%E3%82%AF%E3%83%A9%E3%82%B9%E3%81%AB%E9%96%A2%E6%95%B0%E8%BF%BD%E5%8A%A0\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>テストクラスに関数追加\u003C/h4>\n\u003Cp data-sourcepos=\"185:1-185:84\">\u003Ccode>src/test/kotlin/com/example/blog/IntegrationTests.kt\u003C/code>に関数を追加します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"kotlin\" data-sourcepos=\"186:1-220:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">IntegrationTests.kt\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"k\">package\u003C/span> \u003Cspan class=\"nn\">com.example.blog\u003C/span>\n\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.assertj.core.api.Assertions.assertThat\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.AfterAll\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.BeforeAll\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.junit.jupiter.api.Test\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.beans.factory.annotation.Autowired\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.context.SpringBootTest\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.web.client.TestRestTemplate\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.boot.test.web.client.getForEntity\u003C/span>\n\u003Cspan class=\"k\">import\u003C/span> \u003Cspan class=\"nn\">org.springframework.http.HttpStatus\u003C/span>\n\n\u003Cspan class=\"nd\">@SpringBootTest\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">webEnvironment\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"nc\">SpringBootTest\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">WebEnvironment\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">RANDOM_PORT\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n\u003Cspan class=\"kd\">class\u003C/span> \u003Cspan class=\"nc\">IntegrationTests\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nd\">@Autowired\u003C/span> \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">restTemplate\u003C/span>\u003Cspan class=\"p\">:\u003C/span> \u003Cspan class=\"nc\">TestRestTemplate\u003C/span>\u003Cspan class=\"p\">)\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n\n    \u003Cspan class=\"nd\">@BeforeAll\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">setup\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"nf\">println\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"&gt;&gt; Setup\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@Test\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">`Assert\u003C/span> \u003Cspan class=\"n\">blog\u003C/span> \u003Cspan class=\"n\">page\u003C/span> \u003Cspan class=\"n\">title\u003C/span>\u003Cspan class=\"p\">,\u003C/span> \u003Cspan class=\"n\">content\u003C/span> \u003Cspan class=\"n\">and\u003C/span> \u003Cspan class=\"n\">status\u003C/span> \u003Cspan class=\"nf\">code`\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"kd\">val\u003C/span> \u003Cspan class=\"py\">entity\u003C/span> \u003Cspan class=\"p\">=\u003C/span> \u003Cspan class=\"n\">restTemplate\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">getForEntity\u003C/span>\u003Cspan class=\"p\">&lt;\u003C/span>\u003Cspan class=\"nc\">String\u003C/span>\u003Cspan class=\"p\">&gt;(\u003C/span>\u003Cspan class=\"s\">\"/\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">entity\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">statusCode\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">isEqualTo\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"nc\">HttpStatus\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"nc\">OK\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n        \u003Cspan class=\"nf\">assertThat\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"n\">entity\u003C/span>\u003Cspan class=\"p\">.\u003C/span>\u003Cspan class=\"n\">body\u003C/span>\u003Cspan class=\"p\">).\u003C/span>\u003Cspan class=\"nf\">contains\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"&lt;h1&gt;Blog&lt;/h1&gt;\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n    \u003Cspan class=\"nd\">@AfterAll\u003C/span>\n    \u003Cspan class=\"k\">fun\u003C/span> \u003Cspan class=\"nf\">teardown\u003C/span>\u003Cspan class=\"p\">()\u003C/span> \u003Cspan class=\"p\">{\u003C/span>\n        \u003Cspan class=\"nf\">println\u003C/span>\u003Cspan class=\"p\">(\u003C/span>\u003Cspan class=\"s\">\"&gt;&gt; Tear down\"\u003C/span>\u003Cspan class=\"p\">)\u003C/span>\n    \u003Cspan class=\"p\">}\u003C/span>\n\n\u003Cspan class=\"p\">}\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"222:1-222:143\">コンソールに、テストクラスの開始時は\u003Ccode>&gt;&gt; Setup\u003C/code>、終了時は\u003Ccode>&gt;&gt; Tear down\u003C/code>という文字列が出力されていたらOK。\u003C/p>\n\u003Ch2 data-sourcepos=\"224:1-224:15\">\n\u003Cspan id=\"さいごに\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%81%95%E3%81%84%E3%81%94%E3%81%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>さいごに\u003C/h2>\n\u003Cp data-sourcepos=\"225:1-225:69\">長くなってきたのでここで一旦ここで終了します。\u003C/p>\n","# 前提\n仕事ではずっとJavaで、たまにJavaScriptやPythonを使用してきました。\n「Kotlinはいいぞ(？)」という話をよく聞くので、チュートリアルをやってみます。\nJavaのSpring Bootをよく利用しているので、理解しやすいと思い、Kotlinでも同じフレームワークを使用してみます。\n\nチュートリアルは以下のサイトにあるものを実施してみます。\n\nhttps://spring.pleiades.io/guides/tutorials/spring-boot-kotlin/\n\nコーディングルールがわからないときはこちらを参照。（間違っていたら指摘いただけると幸いです。）\n\nhttps://runebook.dev/ja/docs/kotlin/docs/reference/coding-conventions\n\n# 環境\n- macOS: 11.6.4\n- IntelliJ IDEA: 2021.2.3 (Community Edition)\n- Kotlin: 212-1.5.10-release-IJ5457.46\n- Gradle: 7.4.1\n- Java: temurin 17.0.3\n\n# 手順\n## 新しいプロジェクトを作成する\n「Initializr Web サイトを利用する方法」「コマンドラインを使用する方法」「IntelliJ IDEA の使用」が紹介されています。今回は一番最初を使用します。一番最後はIntelliのUltimateエディションを利用することが条件のようです。\n\n#### spring initializerにアクセス\nhttps://start.spring.io/\n\n#### 以下のパラメータを設定\n- Project: `Gradle Project`\n- Language: `Kotlin`\n- Spring Boot: `2.7.0`\n- Project Metadata\n    - Group: `com.example`\n    - Artifact/Name: `blog`\n    - Package name: `com.example.blog`\n    - Packaging: `Jar`\n    - Java: `17`\n- Dependencies:\n    - `Spring Web`\n    - `Mustache`\n    - `Spring Data JPA`\n    - `H2 Database`\n    - `Spring Boot DevTools`\n#### 生成ボタン(Generate)をクリック\nblog.zipがダウンロードされます。\n\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/15d748d3-047a-50c7-98e2-a2a363479586.png\">\n\n#### ダウンロードしたプロジェクトを展開する\n```\nkotlin % unzip blog.zip \nArchive:  blog.zip\n   creating: blog/\n  inflating: blog/gradlew            \n   creating: blog/src/\n   creating: blog/src/test/\n   creating: blog/src/test/kotlin/\n   creating: blog/src/test/kotlin/com/\n   creating: blog/src/test/kotlin/com/example/\n   creating: blog/src/test/kotlin/com/example/blog/\n  inflating: blog/src/test/kotlin/com/example/blog/BlogApplicationTests.kt  \n   creating: blog/src/main/\n   creating: blog/src/main/kotlin/\n   creating: blog/src/main/kotlin/com/\n   creating: blog/src/main/kotlin/com/example/\n   creating: blog/src/main/kotlin/com/example/blog/\n  inflating: blog/src/main/kotlin/com/example/blog/BlogApplication.kt  \n   creating: blog/src/main/resources/\n   creating: blog/src/main/resources/templates/\n   creating: blog/src/main/resources/static/\n  inflating: blog/src/main/resources/application.properties  \n  inflating: blog/build.gradle.kts   \n   creating: blog/gradle/\n   creating: blog/gradle/wrapper/\n  inflating: blog/gradle/wrapper/gradle-wrapper.jar  \n  inflating: blog/gradle/wrapper/gradle-wrapper.properties  \n  inflating: blog/HELP.md            \n  inflating: blog/.gitignore         \n  inflating: blog/settings.gradle.kts  \n  inflating: blog/gradlew.bat        \nkotlin %\n```\n\n#### 展開したプロジェクトをIntelliJで開く\n\u003Cimg width=\"560\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/9da2ce91-6ee2-28d9-6b5d-3a9ffd75e057.png\">\n\n## コントローラーの作成\n`src/main/kotlin/com/example/blog/HtmlController.kt`\n```kotlin:HtmlController.kt\npackage com.example.blog\n\nimport org.springframework.stereotype.Controller\nimport org.springframework.ui.Model\nimport org.springframework.ui.set\nimport org.springframework.web.bind.annotation.GetMapping\n\n@Controller\nclass HtmlController {\n\n  @GetMapping(\"/\")\n  fun blog(model: Model): String {\n    model[\"title\"] = \"Blog\"\n    return \"blog\"\n  }\n\n}\n```\n\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/133448fe-d0cb-03d2-a35b-be261411703e.png\">\n\n## Mustacheテンプレートを作成\n`src/main/resources/templates/header.mustache`\n```header.mustache\n\u003Chtml>\n\u003Chead>\n  \u003Ctitle>{{title}}\u003C/title>\n\u003C/head>\n\u003Cbody>\n```\n`src/main/resources/templates/footer.mustache`\n```footer.mustache\n\u003C/body>\n\u003C/html>\n```\n`src/main/resources/templates/blog.mustache`\n```blog.mustache\n{{> header}}\n\u003Ch1>{{title}}\u003C/h1>\n{{> footer}}\n```\n\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/37708048-59fd-8a7c-4836-b3744b3a20e3.png\">\n\n## アプリケーションの起動\n#### `BlogApplication.kt`を選択して`Run BlogApplicationKt`を実行\nしかしここでエラーが…。\n```\njava.lang.UnsupportedClassVersionError: com/example/blog/BlogApplicationKt has been compiled by a more recent version of the Java Runtime (class file version 61.0), this version of the Java Runtime only recognizes class file versions up to 60.0\n```\n「このversionのJava Runtimeは60.0versionのclass fileしか認識できないけど、`com/example/blog/BlogApplicationKt`は61.0だ」と怒られているようです。\n\n私のIntelliJ IDEAのJREがDefaultでJava16だったので、17に変更したら問題なく起動できました。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/3565c46b-5eb6-59f9-3d4f-abdf82fb8054.png\">\n\nhttp://localhost:8080/\nにアクセスすると、Blogと表示されています。\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/4f26386a-1127-4b9f-6a70-9cdc4ab8fad8.png\">\n\n## JUnit5を使用したテスト\n#### テストの作成\nテスト関数名が文章になっているのはポイント高いですね。\n実際にテスト結果も問題ありません。\n`src/test/kotlin/com/example/blog/IntegrationTests.kt`\n```kotlin:IntegrationTests.kt\npackage com.example.blog\n\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.boot.test.web.client.TestRestTemplate\nimport org.springframework.boot.test.web.client.getForEntity\nimport org.springframework.http.HttpStatus\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n    @Test\n    fun `Assert blog page title, content and status code`() {\n        val entity = restTemplate.getForEntity\u003CString>(\"/\")\n        assertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n        assertThat(entity.body).contains(\"\u003Ch1>Blog\u003C/h1>\")\n    }\n\n}\n```\n\n#### テストクラスごとにテスト開始前後で関数を実行する場合\nプロパティファイルを設定します。\n`src/test/resources/junit-platform.properties`\n```properties:junit-platform.properties\njunit.jupiter.testinstance.lifecycle.default = per_class\n```\n\nテストクラスで`@BeforeAll`、`@AfterAll`が使えるようになります。\n\n#### テストクラスに関数追加\n`src/test/kotlin/com/example/blog/IntegrationTests.kt`に関数を追加します。\n```kotlin:IntegrationTests.kt\npackage com.example.blog\n\nimport org.assertj.core.api.Assertions.assertThat\nimport org.junit.jupiter.api.AfterAll\nimport org.junit.jupiter.api.BeforeAll\nimport org.junit.jupiter.api.Test\nimport org.springframework.beans.factory.annotation.Autowired\nimport org.springframework.boot.test.context.SpringBootTest\nimport org.springframework.boot.test.web.client.TestRestTemplate\nimport org.springframework.boot.test.web.client.getForEntity\nimport org.springframework.http.HttpStatus\n\n@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)\nclass IntegrationTests(@Autowired val restTemplate: TestRestTemplate) {\n\n    @BeforeAll\n    fun setup() {\n        println(\">> Setup\")\n    }\n\n    @Test\n    fun `Assert blog page title, content and status code`() {\n        val entity = restTemplate.getForEntity\u003CString>(\"/\")\n        assertThat(entity.statusCode).isEqualTo(HttpStatus.OK)\n        assertThat(entity.body).contains(\"\u003Ch1>Blog\u003C/h1>\")\n    }\n\n    @AfterAll\n    fun teardown() {\n        println(\">> Tear down\")\n    }\n\n}\n```\n\nコンソールに、テストクラスの開始時は`>> Setup`、終了時は`>> Tear down`という文字列が出力されていたらOK。\n\n## さいごに\n長くなってきたのでここで一旦ここで終了します。\n","2022-06-17T01:50:18+09:00","17a3198a2eb553844634",[280,282],{"name":237,"versions":281},[],{"name":143,"versions":283},[],"KotlinでSpring BootのWebアプリケーションを作成してみる（１）","2022-06-19T21:22:22+09:00","https://qiita.com/y5347M/items/17a3198a2eb553844634",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1841,{"rendered_body":290,"body":291,"coediting":7,"comments_count":8,"created_at":292,"group":10,"id":293,"likes_count":12,"private":7,"reactions_count":8,"stocks_count":12,"tags":294,"title":300,"updated_at":301,"url":302,"user":303,"page_views_count":304,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"2:1-2:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"3:1-5:30\">localstackを構築してみたので、実際にデータをPUTしてみたいと思います。\u003Cbr>\nAWSのS3APIが使用できるようなので、そちらを利用します。\u003Cbr>\n前回の記事はこちら。\u003C/p>\n\u003Cp data-sourcepos=\"7:1-7:51\">\u003Ciframe id=\"qiita-embed-content__5bcda52a8556e02c7b6539a417b7ee75\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5bcda52a8556e02c7b6539a417b7ee75\" data-content=\"https%3A%2F%2Fqiita.com%2Fy5347M%2Fitems%2F200d3c4e23b800e433bb\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Ch1 data-sourcepos=\"9:1-9:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"10:1-14:0\">\n\u003Cli data-sourcepos=\"10:1-10:14\">macOS 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"11:1-11:23\">docker-compose: 2.0.0\u003C/li>\n\u003Cli data-sourcepos=\"12:1-12:20\">localstack: 0.14.3\u003C/li>\n\u003Cli data-sourcepos=\"13:1-14:0\">\u003Ca href=\"https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/index.html#cli-aws-s3api\" rel=\"nofollow noopener\" target=\"_blank\">S3API\u003C/a>\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"15:1-15:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch3 data-sourcepos=\"18:1-18:56\">\n\u003Cspan id=\"localstackが立ち上がっているか確認する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#localstack%E3%81%8C%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E7%A2%BA%E8%AA%8D%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>localstackが立ち上がっているか確認する\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"19:1-23:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % docker ps           \nCONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                             NAMES\n205ec2df7163   localstack/localstack:0.14.3   \"docker-entrypoint.sh\"   20 minutes ago   Up 20 minutes   4510-4559/tcp, 5678/tcp, 0.0.0.0:4566-&gt;4566/tcp   localstack\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"25:1-25:40\">\n\u003Cspan id=\"バケットの一覧を表示する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%81%AE%E4%B8%80%E8%A6%A7%E3%82%92%E8%A1%A8%E7%A4%BA%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>バケットの一覧を表示する\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"26:1-28:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>aws s3api list-buckets --endpoint-url=http://localhost:${localstackのポート番号} --profile ${プロファイル}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"29:1-29:60\">バケットは未作成なので空になっています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"30:1-39:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % aws s3api list-buckets --endpoint-url=http://localhost:4566 --profile localstack\n{\n    \"Buckets\": [],\n    \"Owner\": {\n        \"DisplayName\": \"webfile\",\n        \"ID\": \"XXXXXXXXXXXXXXXXXXXXXXX\"\n    }\n}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"41:1-41:31\">\n\u003Cspan id=\"バケットを作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%90%E3%82%B1%E3%83%83%E3%83%88%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>バケットを作成する\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"42:1-48:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>aws s3api create-bucket \n　--bucket=${バケット名} \n　--endpoint-url=http://localhost:${localstackのポート番号} \n　--profile ${プロファイル} \n　--create-bucket-configuration LocationConstraint=${リージョン}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"50:1-50:89\">--create-bucket-configurationでLocationConstraintを指定することが重要です。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"51:1-60:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % aws s3api create-bucket \n　--bucket=sample-backet \n　--endpoint-url=http://localhost:4566 \n　--profile localstack \n　--create-bucket-configuration LocationConstraint=ap-northeast-1\n{\n    \"Location\": \"http://sample-backet.s3.localhost.localstack.cloud:4566/\"\n}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"62:1-62:90\">LocationConstraintを指定しなかった場合、以下のエラーが発生します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"63:1-65:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>An error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"67:1-67:49\">\n\u003Cspan id=\"任意の場所にファイルを作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E4%BB%BB%E6%84%8F%E3%81%AE%E5%A0%B4%E6%89%80%E3%81%AB%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>任意の場所にファイルを作成する\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"68:1-70:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>touch ${ファイル名} | ls -l\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"72:1-72:45\">ファイル名はなんでも良いです。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"73:1-76:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % touch sample.txt | ls -l\n-rw-r--r--  1 mm  staff    0  6 13 14:45 sample.txt\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"78:1-78:41\">\n\u003Cspan id=\"ファイルをlocalstackにputする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92localstack%E3%81%ABput%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ファイルをlocalstackにPUTする\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"79:1-85:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>aws s3api put-object \n --bucket=${バケット名} \n --key=${ファイル名} \n --endpoint-url=http://localhost:${localstackのポート番号} \n --profile ${プロファイル} \n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"86:1-95:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % aws s3api put-object \n --bucket=sample-backet \n --key=sample.txt \n --endpoint-url=http://localhost:4566 \n --profile localstack\n{\n    \"ETag\": \"\\\"d41d8cd98f00b204e9800998ecf8427e\\\"\"\n}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"97:1-97:52\">\n\u003Cspan id=\"先ほど作成したファイルを削除する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%85%88%E3%81%BB%E3%81%A9%E4%BD%9C%E6%88%90%E3%81%97%E3%81%9F%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E5%89%8A%E9%99%A4%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>先ほど作成したファイルを削除する\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"98:1-100:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>rm ${ファイル名} | ls -l\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"102:1-102:43\">sample.txtがなくなっていますね。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"103:1-106:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % rm sample.txt | ls -l\n\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"108:1-108:50\">\n\u003Cspan id=\"ファイルをlocalstackからgetしてくる\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92localstack%E3%81%8B%E3%82%89get%E3%81%97%E3%81%A6%E3%81%8F%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>ファイルをlocalstackからGETしてくる\u003C/h3>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"109:1-116:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>aws s3api get-object \n --bucket=${バケット名}  \n --key=${ファイル名} \n --endpoint-url=http://localhost:${localstackのポート番号} \n --profile ${プロファイル} \n ${ファイル名(outfile)}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"118:1-118:139\">一番最後のファイル名(outfile) は必須項目です。ローカルにgetしてくるときのファイル名を指定します。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"119:1-136:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % aws s3api get-object \n --bucket=sample-backet \n --key=sample.txt \n --endpoint-url=http://localhost:4566 \n --profile localstack \n sample.txt\n{\n    \"AcceptRanges\": \"bytes\",\n    \"LastModified\": \"2022-06-13T05:48:23+00:00\",\n    \"ContentLength\": 0,\n    \"ETag\": \"\\\"d41d8cd98f00b204e9800998ecf8427e\\\"\",\n    \"VersionId\": \"null\",\n    \"ContentLanguage\": \"en-US\",\n    \"ContentType\": \"binary/octet-stream\",\n    \"Metadata\": {}\n}\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"138:1-138:43\">sample.txtをGETしてこれています。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"139:1-142:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % ls -l\n-rw-r--r--  1 mm  staff    0  6 13 14:53 sample.txt\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n","\n# 前提\nlocalstackを構築してみたので、実際にデータをPUTしてみたいと思います。\nAWSのS3APIが使用できるようなので、そちらを利用します。\n前回の記事はこちら。\n\nhttps://qiita.com/y5347M/items/200d3c4e23b800e433bb\n\n# 環境\n- macOS 11.6.4\n- docker-compose: 2.0.0\n- localstack: 0.14.3\n- [S3API](https://awscli.amazonaws.com/v2/documentation/api/latest/reference/s3api/index.html#cli-aws-s3api)\n\n# 手順\n\n\n### localstackが立ち上がっているか確認する\n```\nXXX % docker ps           \nCONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                             NAMES\n205ec2df7163   localstack/localstack:0.14.3   \"docker-entrypoint.sh\"   20 minutes ago   Up 20 minutes   4510-4559/tcp, 5678/tcp, 0.0.0.0:4566->4566/tcp   localstack\n```\n\n### バケットの一覧を表示する\n```\naws s3api list-buckets --endpoint-url=http://localhost:${localstackのポート番号} --profile ${プロファイル}\n```\nバケットは未作成なので空になっています。\n```\nXXX % aws s3api list-buckets --endpoint-url=http://localhost:4566 --profile localstack\n{\n    \"Buckets\": [],\n    \"Owner\": {\n        \"DisplayName\": \"webfile\",\n        \"ID\": \"XXXXXXXXXXXXXXXXXXXXXXX\"\n    }\n}\n```\n\n### バケットを作成する\n```\naws s3api create-bucket \n　--bucket=${バケット名} \n　--endpoint-url=http://localhost:${localstackのポート番号} \n　--profile ${プロファイル} \n　--create-bucket-configuration LocationConstraint=${リージョン}\n```\n\n--create-bucket-configurationでLocationConstraintを指定することが重要です。\n```\nXXX % aws s3api create-bucket \n　--bucket=sample-backet \n　--endpoint-url=http://localhost:4566 \n　--profile localstack \n　--create-bucket-configuration LocationConstraint=ap-northeast-1\n{\n    \"Location\": \"http://sample-backet.s3.localhost.localstack.cloud:4566/\"\n}\n```\n\nLocationConstraintを指定しなかった場合、以下のエラーが発生します。\n```\nAn error occurred (IllegalLocationConstraintException) when calling the CreateBucket operation: The unspecified location constraint is incompatible for the region specific endpoint this request was sent to.\n```\n\n### 任意の場所にファイルを作成する\n```\ntouch ${ファイル名} | ls -l\n```\n\nファイル名はなんでも良いです。\n```\nXXX % touch sample.txt | ls -l\n-rw-r--r--  1 mm  staff    0  6 13 14:45 sample.txt\n```\n\n### ファイルをlocalstackにPUTする\n```\naws s3api put-object \n --bucket=${バケット名} \n --key=${ファイル名} \n --endpoint-url=http://localhost:${localstackのポート番号} \n --profile ${プロファイル} \n```\n```\nXXX % aws s3api put-object \n --bucket=sample-backet \n --key=sample.txt \n --endpoint-url=http://localhost:4566 \n --profile localstack\n{\n    \"ETag\": \"\\\"d41d8cd98f00b204e9800998ecf8427e\\\"\"\n}\n```\n\n### 先ほど作成したファイルを削除する\n```\nrm ${ファイル名} | ls -l\n```\n\nsample.txtがなくなっていますね。\n```\nXXX % rm sample.txt | ls -l\n\n```\n\n### ファイルをlocalstackからGETしてくる\n```\naws s3api get-object \n --bucket=${バケット名}  \n --key=${ファイル名} \n --endpoint-url=http://localhost:${localstackのポート番号} \n --profile ${プロファイル} \n ${ファイル名(outfile)}\n```\n\n一番最後のファイル名(outfile) は必須項目です。ローカルにgetしてくるときのファイル名を指定します。\n```\nXXX % aws s3api get-object \n --bucket=sample-backet \n --key=sample.txt \n --endpoint-url=http://localhost:4566 \n --profile localstack \n sample.txt\n{\n    \"AcceptRanges\": \"bytes\",\n    \"LastModified\": \"2022-06-13T05:48:23+00:00\",\n    \"ContentLength\": 0,\n    \"ETag\": \"\\\"d41d8cd98f00b204e9800998ecf8427e\\\"\",\n    \"VersionId\": \"null\",\n    \"ContentLanguage\": \"en-US\",\n    \"ContentType\": \"binary/octet-stream\",\n    \"Metadata\": {}\n}\n```\n\nsample.txtをGETしてこれています。\n```\nXXX % ls -l\n-rw-r--r--  1 mm  staff    0  6 13 14:53 sample.txt\n```\n","2022-06-13T14:58:00+09:00","537c540f82d476646bf3",[295,297],{"name":179,"versions":296},[],{"name":298,"versions":299},"LocalStack",[],"S3APIを使用してlocalstackにデータをPUTしてみる","2022-06-14T14:40:24+09:00","https://qiita.com/y5347M/items/537c540f82d476646bf3",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},2541,{"rendered_body":306,"body":307,"coediting":7,"comments_count":8,"created_at":308,"group":10,"id":309,"likes_count":65,"private":7,"reactions_count":8,"stocks_count":65,"tags":310,"title":315,"updated_at":316,"url":317,"user":318,"page_views_count":319,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-3:54\">AWSのCLIコマンドを学習する目的でlocalstackを立ち上げます。\u003Cbr>\nプログラムの動作確認用にも使えます。\u003C/p>\n\u003Ch1 data-sourcepos=\"5:1-5:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"6:1-9:0\">\n\u003Cli data-sourcepos=\"6:1-6:14\">macOS 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"7:1-7:23\">docker-compose: 2.0.0\u003C/li>\n\u003Cli data-sourcepos=\"8:1-9:0\">localstack: 0.14.3（執筆時点で最新）\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"10:1-10:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch4 data-sourcepos=\"11:1-11:62\">\n\u003Cspan id=\"docker-composexmlを任意のディレクトリに作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#docker-composexml%E3%82%92%E4%BB%BB%E6%84%8F%E3%81%AE%E3%83%87%E3%82%A3%E3%83%AC%E3%82%AF%E3%83%88%E3%83%AA%E3%81%AB%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>docker-compose.xmlを任意のディレクトリに作成\u003C/h4>\n\u003Cp data-sourcepos=\"12:1-13:71\">以下にdocker-compose.ymlがあるのでこちらを参考に作成。\u003Cbr>\n\u003Ca href=\"https://github.com/localstack/localstack/blob/master/docker-compose.yml\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://github.com/localstack/localstack/blob/master/docker-compose.yml\u003C/a>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"yaml\" data-sourcepos=\"15:1-32:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">docker-compose.yml\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>\u003Cspan class=\"na\">version\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s2\">\"\u003C/span>\u003Cspan class=\"s\">3.8\"\u003C/span>\n\n\u003Cspan class=\"na\">services\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n  \u003Cspan class=\"na\">localstack\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n    \u003Cspan class=\"na\">container_name\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s2\">\"\u003C/span>\u003Cspan class=\"s\">localstack\"\u003C/span>\n    \u003Cspan class=\"na\">image\u003C/span>\u003Cspan class=\"pi\">:\u003C/span> \u003Cspan class=\"s\">localstack/localstack:0.14.3\u003C/span>\n    \u003Cspan class=\"na\">ports\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s\">4566:4566\u003C/span>\n    \u003Cspan class=\"na\">environment\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s\">SERVICES=s3, sqs\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s\">DEBUG=1\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s\">DATA_DIR=/tmp/localstack/data\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s\">DOCKER_HOST=unix:///var/run/docker.sock\u003C/span>\n    \u003Cspan class=\"na\">volumes\u003C/span>\u003Cspan class=\"pi\">:\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s2\">\"\u003C/span>\u003Cspan class=\"s\">${TMPDIR:-/tmp}/localstack:/tmp/localstack\"\u003C/span>\n      \u003Cspan class=\"pi\">-\u003C/span> \u003Cspan class=\"s2\">\"\u003C/span>\u003Cspan class=\"s\">/var/run/docker.sock:/var/run/docker.sock\"\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"34:1-35:55\">environmentに定義できる設定は以下に載っています。\u003Cbr>\n\u003Ca href=\"https://docs.localstack.cloud/localstack/configuration/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.localstack.cloud/localstack/configuration/\u003C/a>\u003C/p>\n\u003Cul data-sourcepos=\"36:1-39:0\">\n\u003Cli data-sourcepos=\"36:1-36:71\">\n\u003Ccode>SERVICES\u003C/code>: カンマ区切りで使用したいサービスを記載\u003C/li>\n\u003Cli data-sourcepos=\"37:1-37:80\">\n\u003Ccode>DEBUG\u003C/code>: ログをより詳細に出力したい場合にフラグを立てる\u003C/li>\n\u003Cli data-sourcepos=\"38:1-39:0\">\n\u003Ccode>DATA_DIR\u003C/code>: 永続データを保存するためのローカルディレクトリ\u003C/li>\n\u003C/ul>\n\u003Ch4 data-sourcepos=\"40:1-40:35\">\n\u003Cspan id=\"コンテナを立ち上げる\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>コンテナを立ち上げる\u003C/h4>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"41:1-43:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>docker-compose up -d\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch4 data-sourcepos=\"45:1-45:38\">\n\u003Cspan id=\"立ち上がっているか確認\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%8C%E3%81%A3%E3%81%A6%E3%81%84%E3%82%8B%E3%81%8B%E7%A2%BA%E8%AA%8D\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>立ち上がっているか確認\u003C/h4>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"46:1-50:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>XXX % docker ps           \nCONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                             NAMES\n205ec2df7163   localstack/localstack:0.14.3   \"docker-entrypoint.sh\"   20 minutes ago   Up 20 minutes   4510-4559/tcp, 5678/tcp, 0.0.0.0:4566-&gt;4566/tcp   localstack\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch4 data-sourcepos=\"52:1-52:65\">\n\u003Cspan id=\"awsの設定ファイルと認証情報ファイルを設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#aws%E3%81%AE%E8%A8%AD%E5%AE%9A%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%81%A8%E8%AA%8D%E8%A8%BC%E6%83%85%E5%A0%B1%E3%83%95%E3%82%A1%E3%82%A4%E3%83%AB%E3%82%92%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>AWSの設定ファイルと認証情報ファイルを設定\u003C/h4>\n\u003Cp data-sourcepos=\"53:1-55:164\">AWS CLIコマンドを使用するときに必要になります。\u003Cbr>\n設定ファイル(config)と認証情報(credentials)を直接編集で以下の通り記載してください。\u003Cbr>\nコマンドでも設定できます。\u003Ca href=\"https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-files.html\" rel=\"nofollow noopener\" target=\"_blank\">こちら\u003C/a>を参考にしてください。\u003C/p>\n\u003Cp data-sourcepos=\"57:1-57:79\">\u003Ciframe id=\"qiita-embed-content__5de4b87db4e954f6c467e826f9c1d57f\" src=\"https://qiita.com/embed-contents/link-card#qiita-embed-content__5de4b87db4e954f6c467e826f9c1d57f\" data-content=\"https%3A%2F%2Fdocs.aws.amazon.com%2Fja_jp%2Fcli%2Flatest%2Fuserguide%2Fcli-configure-files.html\" frameborder=\"0\" scrolling=\"no\" loading=\"lazy\" style=\"width:100%;\" height=\"29\">\n\u003C/iframe>\n\u003C/p>\n\u003Cp data-sourcepos=\"59:1-59:15\">\u003Ccode>~/.aws/config\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"config\" data-sourcepos=\"60:1-64:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">config\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>[\u003Cspan class=\"n\">profile\u003C/span> \u003Cspan class=\"n\">localstack\u003C/span>]\n\u003Cspan class=\"n\">region\u003C/span> = \u003Cspan class=\"n\">ap\u003C/span>-\u003Cspan class=\"n\">northeast\u003C/span>-\u003Cspan class=\"m\">1\u003C/span>\n\u003Cspan class=\"n\">output\u003C/span> = \u003Cspan class=\"n\">json\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n\u003Cp data-sourcepos=\"66:1-66:20\">\u003Ccode>~/.aws/credentials\u003C/code>\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"config\" data-sourcepos=\"67:1-71:3\">\n\u003Cdiv class=\"code-lang\">\u003Cspan class=\"bold\">credentials\u003C/span>\u003C/div>\n\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>[\u003Cspan class=\"n\">localstack\u003C/span>]\n\u003Cspan class=\"n\">aws_access_key_id\u003C/span> = \u003Cspan class=\"n\">dummy\u003C/span>\n\u003Cspan class=\"n\">aws_secret_access_key\u003C/span> = \u003Cspan class=\"n\">dummy\u003C/span>\n\u003C/code>\u003C/pre>\u003C/div>\n\u003C/div>\n","# 前提\nAWSのCLIコマンドを学習する目的でlocalstackを立ち上げます。\nプログラムの動作確認用にも使えます。\n\n# 環境\n- macOS 11.6.4\n- docker-compose: 2.0.0\n- localstack: 0.14.3（執筆時点で最新）\n\n# 手順\n#### docker-compose.xmlを任意のディレクトリに作成\n以下にdocker-compose.ymlがあるのでこちらを参考に作成。\nhttps://github.com/localstack/localstack/blob/master/docker-compose.yml\n\n```docker-compose.yml\nversion: \"3.8\"\n\nservices:\n  localstack:\n    container_name: \"localstack\"\n    image: localstack/localstack:0.14.3\n    ports:\n      - 4566:4566\n    environment:\n      - SERVICES=s3, sqs\n      - DEBUG=1\n      - DATA_DIR=/tmp/localstack/data\n      - DOCKER_HOST=unix:///var/run/docker.sock\n    volumes:\n      - \"${TMPDIR:-/tmp}/localstack:/tmp/localstack\"\n      - \"/var/run/docker.sock:/var/run/docker.sock\"\n```\n\nenvironmentに定義できる設定は以下に載っています。\nhttps://docs.localstack.cloud/localstack/configuration/\n- `SERVICES`: カンマ区切りで使用したいサービスを記載\n- `DEBUG`: ログをより詳細に出力したい場合にフラグを立てる\n- `DATA_DIR`: 永続データを保存するためのローカルディレクトリ\n\n#### コンテナを立ち上げる\n```\ndocker-compose up -d\n```\n\n#### 立ち上がっているか確認\n```\nXXX % docker ps           \nCONTAINER ID   IMAGE                          COMMAND                  CREATED          STATUS          PORTS                                             NAMES\n205ec2df7163   localstack/localstack:0.14.3   \"docker-entrypoint.sh\"   20 minutes ago   Up 20 minutes   4510-4559/tcp, 5678/tcp, 0.0.0.0:4566->4566/tcp   localstack\n```\n\n#### AWSの設定ファイルと認証情報ファイルを設定\nAWS CLIコマンドを使用するときに必要になります。\n設定ファイル(config)と認証情報(credentials)を直接編集で以下の通り記載してください。\nコマンドでも設定できます。[こちら](https://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-files.html)を参考にしてください。\n\nhttps://docs.aws.amazon.com/ja_jp/cli/latest/userguide/cli-configure-files.html\n\n`~/.aws/config`\n```config:config\n[profile localstack]\nregion = ap-northeast-1\noutput = json\n```\n\n`~/.aws/credentials`\n```config:credentials\n[localstack]\naws_access_key_id = dummy\naws_secret_access_key = dummy\n```\n\n","2022-06-05T15:11:04+09:00","200d3c4e23b800e433bb",[311,313],{"name":179,"versions":312},[],{"name":298,"versions":314},[],"localstackをローカル環境に立ち上げてみる","2022-06-14T14:38:47+09:00","https://qiita.com/y5347M/items/200d3c4e23b800e433bb",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},3673,{"rendered_body":321,"body":322,"coediting":7,"comments_count":8,"created_at":323,"group":10,"id":324,"likes_count":8,"private":7,"reactions_count":8,"stocks_count":8,"tags":325,"title":332,"updated_at":323,"url":333,"user":334,"page_views_count":335,"team_membership":10,"organization_url_name":10,"slide":7},"\u003Ch1 data-sourcepos=\"1:1-1:8\">\n\u003Cspan id=\"前提\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%89%8D%E6%8F%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>前提\u003C/h1>\n\u003Cp data-sourcepos=\"2:1-4:55\">いつもどうやって作成するか忘れてしまうので、簡単にまとめます。\u003Cbr>\n参考にしているのは以下のページ。\u003Cbr>\n\u003Ca href=\"https://docs.djangoproject.com/ja/4.0/intro/tutorial01/\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://docs.djangoproject.com/ja/4.0/intro/tutorial01/\u003C/a>\u003C/p>\n\u003Ch1 data-sourcepos=\"6:1-6:8\">\n\u003Cspan id=\"環境\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境\u003C/h1>\n\u003Cul data-sourcepos=\"7:1-11:0\">\n\u003Cli data-sourcepos=\"7:1-7:14\">macOS 11.6.4\u003C/li>\n\u003Cli data-sourcepos=\"8:1-8:16\">python: 3.8.12\u003C/li>\n\u003Cli data-sourcepos=\"9:1-9:27\">anaconda navigator: 2.1.1\u003C/li>\n\u003Cli data-sourcepos=\"10:1-11:0\">PyCharm: 2021.2.1 (Community Edition)\u003C/li>\n\u003C/ul>\n\u003Ch1 data-sourcepos=\"12:1-12:8\">\n\u003Cspan id=\"手順\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E6%89%8B%E9%A0%86\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>手順\u003C/h1>\n\u003Ch3 data-sourcepos=\"13:1-13:28\">\n\u003Cspan id=\"各種インストール\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E5%90%84%E7%A8%AE%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>各種インストール\u003C/h3>\n\u003Cul data-sourcepos=\"14:1-18:0\">\n\u003Cli data-sourcepos=\"14:1-15:52\">anaconda navigator: 2.1.1\u003Cbr>\n\u003Ca href=\"https://www.anaconda.com/products/distribution#macos\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.anaconda.com/products/distribution#macos\u003C/a>\n\u003C/li>\n\u003Cli data-sourcepos=\"16:1-18:0\">PyCharm: 2021.2.1 (Community Edition)\u003Cbr>\n\u003Ca href=\"https://www.jetbrains.com/ja-jp/pycharm/download/#section=mac\" class=\"autolink\" rel=\"nofollow noopener\" target=\"_blank\">https://www.jetbrains.com/ja-jp/pycharm/download/#section=mac\u003C/a>\n\u003C/li>\n\u003C/ul>\n\u003Ch3 data-sourcepos=\"19:1-19:43\">\n\u003Cspan id=\"anaconda-navigatorをセットアップ\" class=\"fragment\">\u003C/span>\u003Ca href=\"#anaconda-navigator%E3%82%92%E3%82%BB%E3%83%83%E3%83%88%E3%82%A2%E3%83%83%E3%83%97\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>anaconda navigatorをセットアップ\u003C/h3>\n\u003Ch4 data-sourcepos=\"20:1-20:32\">\n\u003Cspan id=\"anaconda-navigatorを起動\" class=\"fragment\">\u003C/span>\u003Ca href=\"#anaconda-navigator%E3%82%92%E8%B5%B7%E5%8B%95\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>anaconda navigatorを起動\u003C/h4>\n\u003Cp data-sourcepos=\"21:1-22:139\">Environmentタブを押下し、下部にあるCreateボタンを押下\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F422bc94c-98d2-f525-f502-837ea0c33b20.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a466393d34f04d331063321ba0c35dd7\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F422bc94c-98d2-f525-f502-837ea0c33b20.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a466393d34f04d331063321ba0c35dd7\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F422bc94c-98d2-f525-f502-837ea0c33b20.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d5f1f1b670cfadd7a2cc6b3fe3982bc1 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/422bc94c-98d2-f525-f502-837ea0c33b20.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"24:1-24:89\">\n\u003Cspan id=\"任意の環境名とpythonのバージョンを指定してcreateボタンを押下\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E4%BB%BB%E6%84%8F%E3%81%AE%E7%92%B0%E5%A2%83%E5%90%8D%E3%81%A8python%E3%81%AE%E3%83%90%E3%83%BC%E3%82%B8%E3%83%A7%E3%83%B3%E3%82%92%E6%8C%87%E5%AE%9A%E3%81%97%E3%81%A6create%E3%83%9C%E3%82%BF%E3%83%B3%E3%82%92%E6%8A%BC%E4%B8%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>任意の環境名とPythonのバージョンを指定してCreateボタンを押下\u003C/h4>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5a1c1b47-2652-41dc-1a55-71d667088fec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=74803ca65688e82258ce6b74d327eb63\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5a1c1b47-2652-41dc-1a55-71d667088fec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=74803ca65688e82258ce6b74d327eb63\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F5a1c1b47-2652-41dc-1a55-71d667088fec.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5002a8e28e3934bd04365a47291a47be 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5a1c1b47-2652-41dc-1a55-71d667088fec.png\" loading=\"lazy\">\u003C/a>\n\u003Ch4 data-sourcepos=\"27:1-27:29\">\n\u003Cspan id=\"環境が作成される\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83%E3%81%8C%E4%BD%9C%E6%88%90%E3%81%95%E3%82%8C%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境が作成される\u003C/h4>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff28e5845-1549-1724-cc45-2ffe0e789cef.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ce0fcb94b5d248038e483b596dceb0c1\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff28e5845-1549-1724-cc45-2ffe0e789cef.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=ce0fcb94b5d248038e483b596dceb0c1\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Ff28e5845-1549-1724-cc45-2ffe0e789cef.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=d19866b8b47452bb210b10c57b5a1f56 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/f28e5845-1549-1724-cc45-2ffe0e789cef.png\" loading=\"lazy\">\u003C/a>\n\u003Ch4 data-sourcepos=\"30:1-30:109\">\n\u003Cspan id=\"環境右にあるライブラリ検索でdjangoを探しapplyを押下してインストールする\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83%E5%8F%B3%E3%81%AB%E3%81%82%E3%82%8B%E3%83%A9%E3%82%A4%E3%83%96%E3%83%A9%E3%83%AA%E6%A4%9C%E7%B4%A2%E3%81%A7django%E3%82%92%E6%8E%A2%E3%81%97apply%E3%82%92%E6%8A%BC%E4%B8%8B%E3%81%97%E3%81%A6%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境右にあるライブラリ検索でDjangoを探し、Applyを押下してインストールする\u003C/h4>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb82271f5-c275-198b-e3d2-058f0e85196f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eb5101df6181057a7483718a6d7b1ba0\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb82271f5-c275-198b-e3d2-058f0e85196f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=eb5101df6181057a7483718a6d7b1ba0\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2Fb82271f5-c275-198b-e3d2-058f0e85196f.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=0b375f7b34422b07ef1a226d57ddb2c0 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b82271f5-c275-198b-e3d2-058f0e85196f.png\" loading=\"lazy\">\u003C/a>\n\u003Ch3 data-sourcepos=\"33:1-33:28\">\n\u003Cspan id=\"プロジェクト作成\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E4%BD%9C%E6%88%90\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロジェクト作成\u003C/h3>\n\u003Cp data-sourcepos=\"34:1-34:131\">ターミナルで、PC内の任意のディレクトリで実行。mysiteをプロジェクト名に置き換えてください。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"35:1-37:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>django-admin startproject mysite\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"39:1-39:43\">\n\u003Cspan id=\"アプリケーションを作成する\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%82%A2%E3%83%97%E3%83%AA%E3%82%B1%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3%E3%82%92%E4%BD%9C%E6%88%90%E3%81%99%E3%82%8B\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>アプリケーションを作成する\u003C/h3>\n\u003Cp data-sourcepos=\"40:1-40:53\">myappをアプリ名に置き換えてください。\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"41:1-44:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>cd mysite\npython manage.py startapp myapp\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Ch3 data-sourcepos=\"46:1-46:20\">\n\u003Cspan id=\"pycharmを起動\" class=\"fragment\">\u003C/span>\u003Ca href=\"#pycharm%E3%82%92%E8%B5%B7%E5%8B%95\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>PyCharmを起動\u003C/h3>\n\u003Cp data-sourcepos=\"47:1-47:66\">プロジェクトのあるディレクトリを指定して開く\u003C/p>\n\u003Ch4 data-sourcepos=\"49:1-49:20\">\n\u003Cspan id=\"環境を設定\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E7%92%B0%E5%A2%83%E3%82%92%E8%A8%AD%E5%AE%9A\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>環境を設定\u003C/h4>\n\u003Cp data-sourcepos=\"50:1-51:139\">PyCharm &gt; Preferences &gt; Project: mysite &gt; Python Interpreter &gt; 歯車を押下して、Addボタンを押す\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F188fe0ea-a36d-85a6-7c03-7b4794ce05ce.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a8250f6fc51fc2429c1ef977f1d69d77\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F188fe0ea-a36d-85a6-7c03-7b4794ce05ce.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=a8250f6fc51fc2429c1ef977f1d69d77\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F188fe0ea-a36d-85a6-7c03-7b4794ce05ce.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=5ac8b9cd4cd80c6fb10f3dc7971ecc66 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/188fe0ea-a36d-85a6-7c03-7b4794ce05ce.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Cp data-sourcepos=\"53:1-54:139\">VirtualEnv Environment &gt; Exisiting environmentで先ほど作成した環境を選択する\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1628090b-76f8-33ef-b82a-012679b65e76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2dbf21e7ccea5e7f4bc4789a5b81ba1c\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1628090b-76f8-33ef-b82a-012679b65e76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=2dbf21e7ccea5e7f4bc4789a5b81ba1c\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F1628090b-76f8-33ef-b82a-012679b65e76.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7a5210fb227ee4a9611138c0521a7d21 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1628090b-76f8-33ef-b82a-012679b65e76.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n\u003Ch4 data-sourcepos=\"56:1-56:29\">\n\u003Cspan id=\"プロジェクト起動\" class=\"fragment\">\u003C/span>\u003Ca href=\"#%E3%83%97%E3%83%AD%E3%82%B8%E3%82%A7%E3%82%AF%E3%83%88%E8%B5%B7%E5%8B%95\">\u003Ci class=\"fa fa-link\">\u003C/i>\u003C/a>プロジェクト起動\u003C/h4>\n\u003Cp data-sourcepos=\"57:1-57:60\">プロジェクトが存在するディレクトリで実行\u003C/p>\n\u003Cdiv class=\"code-frame\" data-lang=\"text\" data-sourcepos=\"58:1-60:3\">\u003Cdiv class=\"highlight\">\u003Cpre>\u003Ccode>python manage.py runserver\n\u003C/code>\u003C/pre>\u003C/div>\u003C/div>\n\u003Cp data-sourcepos=\"62:1-63:139\">\u003Ccode>http://127.0.0.1:8000/\u003C/code>にアクセスし、ページが表示されていたらOK\u003Cbr>\n\u003Ca href=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F16a753c9-6931-7f87-690c-1d0a99313d11.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cc377c74e4be584352822591a8c2939a\" target=\"_blank\" rel=\"nofollow noopener\">\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F16a753c9-6931-7f87-690c-1d0a99313d11.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;s=cc377c74e4be584352822591a8c2939a\" srcset=\"https://qiita-user-contents.imgix.net/https%3A%2F%2Fqiita-image-store.s3.ap-northeast-1.amazonaws.com%2F0%2F2433961%2F16a753c9-6931-7f87-690c-1d0a99313d11.png?ixlib=rb-4.0.0&amp;auto=format&amp;gif-q=60&amp;q=75&amp;w=1400&amp;fit=max&amp;s=7deba802113d8bf5362959621807a8f3 1x\" data-canonical-src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/16a753c9-6931-7f87-690c-1d0a99313d11.png\" loading=\"lazy\">\u003C/a>\u003C/p>\n","# 前提\nいつもどうやって作成するか忘れてしまうので、簡単にまとめます。\n参考にしているのは以下のページ。\nhttps://docs.djangoproject.com/ja/4.0/intro/tutorial01/\n\n# 環境\n- macOS 11.6.4\n- python: 3.8.12\n- anaconda navigator: 2.1.1\n- PyCharm: 2021.2.1 (Community Edition)\n\n# 手順\n### 各種インストール\n- anaconda navigator: 2.1.1\nhttps://www.anaconda.com/products/distribution#macos\n- PyCharm: 2021.2.1 (Community Edition)\nhttps://www.jetbrains.com/ja-jp/pycharm/download/#section=mac\n\n### anaconda navigatorをセットアップ\n#### anaconda navigatorを起動\nEnvironmentタブを押下し、下部にあるCreateボタンを押下\n\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/422bc94c-98d2-f525-f502-837ea0c33b20.png\">\n\n#### 任意の環境名とPythonのバージョンを指定してCreateボタンを押下\n\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/5a1c1b47-2652-41dc-1a55-71d667088fec.png\">\n\n#### 環境が作成される\n\u003Cimg width=\"300\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/f28e5845-1549-1724-cc45-2ffe0e789cef.png\">\n\n#### 環境右にあるライブラリ検索でDjangoを探し、Applyを押下してインストールする\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/b82271f5-c275-198b-e3d2-058f0e85196f.png\">\n\n### プロジェクト作成\nターミナルで、PC内の任意のディレクトリで実行。mysiteをプロジェクト名に置き換えてください。\n```\ndjango-admin startproject mysite\n```\n\n### アプリケーションを作成する\nmyappをアプリ名に置き換えてください。\n```\ncd mysite\npython manage.py startapp myapp\n```\n\n### PyCharmを起動\nプロジェクトのあるディレクトリを指定して開く\n\n#### 環境を設定\nPyCharm > Preferences > Project: mysite > Python Interpreter > 歯車を押下して、Addボタンを押す\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/188fe0ea-a36d-85a6-7c03-7b4794ce05ce.png\">\n\nVirtualEnv Environment > Exisiting environmentで先ほど作成した環境を選択する\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/1628090b-76f8-33ef-b82a-012679b65e76.png\">\n\n#### プロジェクト起動\nプロジェクトが存在するディレクトリで実行\n```\npython manage.py runserver\n```\n\n`http://127.0.0.1:8000/`にアクセスし、ページが表示されていたらOK\n\u003Cimg width=\"500\" alt=\"\" src=\"https://qiita-image-store.s3.ap-northeast-1.amazonaws.com/0/2433961/16a753c9-6931-7f87-690c-1d0a99313d11.png\">\n\n\n\n","2022-05-22T20:04:18+09:00","57178b8434da5ef20f64",[326,329],{"name":327,"versions":328},"Python",[],{"name":330,"versions":331},"Django",[],"Djangoプロジェクト作成","https://qiita.com/y5347M/items/57178b8434da5ef20f64",{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34},1185,{"description":26,"facebook_id":27,"followees_count":28,"followers_count":12,"github_login_name":29,"id":29,"items_count":30,"linkedin_id":27,"location":27,"name":29,"organization":27,"permanent_id":31,"profile_image_url":32,"team_only":7,"twitter_screen_name":33,"website_url":34,"image_monthly_upload_limit":337,"image_monthly_upload_remaining":338},104857600,101432560,1745893159706]